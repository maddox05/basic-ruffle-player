// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["openfl"]["display"] = $hx_exports["openfl"]["display"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	__registerLimeModule: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,__registerLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = ["lime","_internal","backend","html5","HTML5Application"];
lime__$internal_backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,accelerometer: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,exec: function() {
		js_Browser.get_window().addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		js_Browser.get_window().addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		js_Browser.get_window().addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		js_Browser.get_window().addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		js_Browser.get_window().addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		js_Browser.get_window().addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		js_Browser.get_window().addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g2 = 0;
			var _g11 = this.parent.__windows;
			while(_g2 < _g11.length) {
				var window1 = _g11[_g2];
				++_g2;
				this.parent.onUpdate.dispatch(Std["int"](this.deltaTime));
				if(window1.context != null) {
					window1.onRender.dispatch(window1.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		js_Browser.get_window().requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.get_window() != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.get_window().onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.get_window().onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.get_window().onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.get_window().onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.get_window() != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				if(!event.defaultPrevented) {
					this.parent.get_window().onClose.dispatch();
					if(this.parent.get_window() != null && this.parent.get_window().onClose.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "blur":
				this.parent.get_window().onFocusOut.dispatch();
				this.parent.get_window().onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.get_window().onFocusIn.dispatch();
				this.parent.get_window().onActivate.dispatch();
				break;
			case "resize":
				this.parent.get_window().__backend.handleResizeEvent(event);
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.exists(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.set(id,cache);
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.get(id);
			joystick = lime_ui_Joystick.devices.get(id);
			gamepad = lime_ui_Gamepad.devices.get(id);
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	meta: null
	,modules: null
	,onUpdate: null
	,onCreateWindow: null
	,__backend: null
	,__preloader: null
	,__window: null
	,__windowByID: null
	,__windows: null
	,addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function(window) {
		if(window != null && this.__windowByID.exists(window.id)) {
			if(this.__window == window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,window);
			this.__windowByID.remove(window.id);
			window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,x,y) {
			f5(a15,a24,x,y);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function(window) {
		if(this.get_window() == window) {
			this.onWindowClose();
		}
		this.__removeWindow(window);
	}
	,get_preloader: function() {
		return this.__preloader;
	}
	,get_window: function() {
		return this.__window;
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_preloader:"get_preloader"}
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("truckLoader4",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.set("build","6369");
	app.meta.set("company","adgard");
	app.meta.set("file","truckLoader4");
	app.meta.set("name","Truck Loader 4");
	app.meta.set("packageName","com.bestphysics.TruckLoader4");
	app.meta.set("version","1.0.0");
	var attributes = { allowHighDPI : false, alwaysOnTop : false, borderless : false, element : null, frameRate : 30, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "Truck Loader 4", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 4, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.get_window() == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Reflect.hasField(attributes,field)) {
					Reflect.setField(attributes,field,Reflect.field(config,field));
				} else if(Reflect.hasField(attributes.context,field)) {
					Reflect.setField(attributes.context,field,Reflect.field(config,field));
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new openfl_display_DefaultPreloader());
	app.get_preloader().onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.get_preloader().onComplete.add(function() {
		preloader.start();
	});
	var preloader1 = preloader.onComplete;
	var a1 = (js_Boot.__cast(app.get_window() , openfl_display_Window)).stage;
	preloader1.add(function() {
		ApplicationMain.start(a1);
	});
	var _g2 = 0;
	var _g11 = ManifestResources.preloadLibraries;
	while(_g2 < _g11.length) {
		var library = _g11[_g2];
		++_g2;
		app.get_preloader().addLibrary(library);
	}
	var _g3 = 0;
	var _g12 = ManifestResources.preloadLibraryNames;
	while(_g3 < _g12.length) {
		var name = _g12[_g3];
		++_g3;
		app.get_preloader().addLibraryName(name);
	}
	app.get_preloader().load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		Main.main();
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.get_fullscreen()) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	__eventMap: null
	,__iterators: null
	,__targetDispatcher: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!this.__eventMap.exists(type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.set(type,list);
			this.__iterators.set(type,[iterator]);
		} else {
			var list1 = this.__eventMap.get(type);
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(list1[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.get(type);
			var _g2 = 0;
			while(_g2 < iterators.length) {
				var iterator1 = iterators[_g2];
				++_g2;
				if(iterator1.active) {
					iterator1.copy();
				}
			}
			this.__addListenerByPriority(list1,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return this.__eventMap.exists(type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.get(type);
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.get(type);
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			this.__eventMap.remove(type);
			this.__iterators.remove(type);
		}
		if(!this.__eventMap.iterator().hasNext()) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.get(type);
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var iterators = this.__iterators.get(type);
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g1 = 0;
		var _g = numElements;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__renderTransform: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__getBounds: null
	,__renderCairo: null
	,__renderCanvas: null
	,__renderDOM: null
	,__renderGL: null
	,__update: null
	,__mask: null
	,__scrollRect: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = 1 / this.redMultiplier;
		this.greenMultiplier = 1 / this.greenMultiplier;
		this.blueMultiplier = 1 / this.blueMultiplier;
		this.alphaMultiplier = 1 / this.alphaMultiplier;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl__$Vector_Vector_$Impl_$.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl__$Vector_Vector_$Impl_$.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = ["lime","utils","ObjectPool"];
lime_utils_ObjectPool.prototype = {
	activeObjects: null
	,inactiveObjects: null
	,__inactiveObject0: null
	,__inactiveObject1: null
	,__inactiveObjectList: null
	,__pool: null
	,__size: null
	,clean: function(object) {
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			object = this.__getInactive();
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			this.__addInactive(object);
		} else {
			this.__pool.remove(object);
		}
	}
	,__addInactive: function(object) {
		if(this.__inactiveObject0 == null) {
			this.__inactiveObject0 = object;
		} else if(this.__inactiveObject1 == null) {
			this.__inactiveObject1 = object;
		} else {
			this.__inactiveObjectList.add(object);
		}
		this.inactiveObjects++;
	}
	,__getInactive: function() {
		var object = null;
		if(this.__inactiveObject0 != null) {
			object = this.__inactiveObject0;
			this.__inactiveObject0 = null;
		} else if(this.__inactiveObject1 != null) {
			object = this.__inactiveObject1;
			this.__inactiveObject1 = null;
		} else {
			object = this.__inactiveObjectList.pop();
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject0 = this.__inactiveObjectList.pop();
			}
			if(this.__inactiveObjectList.length > 0) {
				this.__inactiveObject1 = this.__inactiveObjectList.pop();
			}
		}
		this.inactiveObjects--;
		this.activeObjects++;
		return object;
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var object = this.__inactiveObjectList.iterator();
		while(object.hasNext()) {
			var object1 = object.next();
			this.__pool.remove(object1);
			this.__inactiveObjectList.remove(object1);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g1 = 0;
				var _g = value - current;
				while(_g1 < _g) {
					var i = _g1++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = haxe_ds_ObjectMap.getId(key) || haxe_ds_ObjectMap.assignId(key);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[haxe_ds_ObjectMap.getId(key)];
	}
	,exists: function(key) {
		return this.h.__keys__[haxe_ds_ObjectMap.getId(key)] != null;
	}
	,remove: function(key) {
		var id = haxe_ds_ObjectMap.getId(key);
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[haxe_ds_ObjectMap.getId(i)];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__calculateAbsoluteTransform = function(local,parentTransform,target) {
	target.a = local.a * parentTransform.a + local.b * parentTransform.c;
	target.b = local.a * parentTransform.b + local.b * parentTransform.d;
	target.c = local.c * parentTransform.a + local.d * parentTransform.c;
	target.d = local.c * parentTransform.b + local.d * parentTransform.d;
	target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
	target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
};
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	opaqueBackground: null
	,parent: null
	,stage: null
	,__alpha: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheBitmap: null
	,__cacheBitmapBackground: null
	,__cacheBitmapColorTransform: null
	,__cacheBitmapData: null
	,__cacheBitmapData2: null
	,__cacheBitmapData3: null
	,__cacheBitmapMatrix: null
	,__cacheBitmapRenderer: null
	,__cairo: null
	,__children: null
	,__customRenderClear: null
	,__customRenderEvent: null
	,__filters: null
	,__graphics: null
	,__isCacheBitmapRender: null
	,__isMask: null
	,__loaderInfo: null
	,__mask: null
	,__maskTarget: null
	,__name: null
	,__objectTransform: null
	,__renderable: null
	,__renderDirty: null
	,__renderParent: null
	,__renderTransform: null
	,__renderTransformCache: null
	,__renderTransformChanged: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scaleX: null
	,__scaleY: null
	,__scrollRect: null
	,__shader: null
	,__tempPoint: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldBlendMode: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldColorTransform: null
	,__worldShader: null
	,__worldTransform: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldTransformInvalid: null
	,__worldZ: null
	,__canvas: null
	,__context: null
	,__style: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
				openfl_display_DisplayObject.__broadcastEvents.set(type,[]);
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(type);
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(Std["is"](event,openfl_events_MouseEvent)) {
			var mouseEvent = event;
			mouseEvent.stageX = this.__getRenderTransform().__transformX(mouseEvent.localX,mouseEvent.localY);
			mouseEvent.stageY = this.__getRenderTransform().__transformY(mouseEvent.localX,mouseEvent.localY);
		} else if(Std["is"](event,openfl_events_TouchEvent)) {
			var touchEvent = event;
			touchEvent.stageX = this.__getRenderTransform().__transformX(touchEvent.localX,touchEvent.localY);
			touchEvent.stageY = this.__getRenderTransform().__transformY(touchEvent.localX,touchEvent.localY);
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			var currentBounds = this.getBounds(this);
			var targetBounds = obj.getBounds(this);
			return currentBounds.intersects(targetBounds);
		}
		return false;
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(openfl_display_DisplayObject.__broadcastEvents.exists(type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.get(type),this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g1 = 0;
				var _g = i;
				while(_g1 < _g) {
					var j = _g1++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			this.__renderTransform.__transformInversePoint(global);
		} else {
			local.x = this.__renderTransform.__transformInverseX(global.x,global.y);
			local.y = this.__renderTransform.__transformInverseY(global.x,global.y);
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderer);
			} else {
				openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderer);
			}
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			openfl__$internal_renderer_dom_DOMBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMDisplayObject.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMDisplayObject.clear(this,renderer);
	}
	,__renderEvent: function(renderer) {
		if(this.__customRenderEvent != null && this.__renderable) {
			this.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			this.__customRenderEvent.objectMatrix.copyFrom(this.__renderTransform);
			this.__customRenderEvent.objectColorTransform.__copyFrom(this.__worldColorTransform);
			this.__customRenderEvent.renderer = renderer;
			var _g = renderer.__type;
			switch(_g) {
			case "cairo":
				this.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				this.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(this.stage != null && this.__worldVisible) {
					this.__customRenderEvent.type = "renderDOM";
				} else {
					this.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(this.__worldShader);
				renderer1.__context3D.__flushGL();
				this.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(this.__worldBlendMode);
			renderer.__pushMaskObject(this);
			this.dispatchEvent(this.__customRenderEvent);
			renderer.__popMaskObject(this);
			if(renderer.__type == "opengl") {
				var renderer2 = renderer;
				renderer2.setViewport();
			}
		}
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_context3D_Context3DDisplayObject.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__shouldCacheHardware: function(value) {
		if(value == true || this.__filters != null) {
			return true;
		}
		if(value == false || this.__graphics != null && !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(this.__graphics)) {
			return false;
		}
		return null;
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__blendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.get_colorTransform());
				} else {
					this.__worldColorTransform.__identity();
				}
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_display_DisplayObject.__tempColorTransform;
		colorTransform.__copyFrom(this.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		if(this.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault()) {
			var rect = null;
			var needRender = this.__cacheBitmap == null || this.__renderDirty && (force || this.__children != null && this.__children.length > 0 || this.__graphics != null && this.__graphics.__dirty) || this.opaqueBackground != this.__cacheBitmapBackground || renderer.__type != "opengl" && !this.__cacheBitmapColorTransform.__equals(colorTransform);
			var updateTransform = needRender || renderer.__type == "opengl" && !this.__cacheBitmap.__worldTransform.equals(this.__worldTransform);
			var hasFilters = this.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = this.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(this.__cacheBitmapMatrix == null) {
				this.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = this.__cacheAsBitmapMatrix != null ? this.__cacheAsBitmapMatrix : this.__renderTransform;
			if(!needRender && (bitmapMatrix.a != this.__cacheBitmapMatrix.a || bitmapMatrix.b != this.__cacheBitmapMatrix.b || bitmapMatrix.c != this.__cacheBitmapMatrix.c || bitmapMatrix.d != this.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && this.__cacheBitmapData != null && this.__cacheBitmapData.image != null && this.__cacheBitmapData.image.version < this.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			this.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			this.__cacheBitmapMatrix.tx = 0;
			this.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				this.__getFilterBounds(rect,this.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				if(rect.x > 0) {
					offsetX = Math.ceil(rect.x);
				} else {
					offsetX = Math.floor(rect.x);
				}
				if(rect.y > 0) {
					offsetY = Math.ceil(rect.y);
				} else {
					offsetY = Math.floor(rect.y);
				}
				if(this.__cacheBitmapData != null) {
					if(filterWidth > this.__cacheBitmapData.width || filterHeight > this.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,this.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,this.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = this.__cacheBitmapData.width;
						bitmapHeight = this.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				this.__cacheBitmapBackground = this.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = this.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(this.__cacheBitmapData == null || bitmapWidth > this.__cacheBitmapData.width || bitmapHeight > this.__cacheBitmapData.height) {
						this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(this.__cacheBitmap == null) {
							this.__cacheBitmap = new openfl_display_Bitmap();
						}
						this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						this.__cacheBitmapRenderer = null;
					} else {
						this.__cacheBitmapData.__fillRect(this.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						this.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					this.__cacheBitmap = null;
					this.__cacheBitmapData = null;
					this.__cacheBitmapData2 = null;
					this.__cacheBitmapData3 = null;
					this.__cacheBitmapRenderer = null;
					return true;
				}
			} else {
				this.__cacheBitmapData = this.__cacheBitmap.get_bitmapData();
			}
			if(updateTransform || needRender) {
				this.__cacheBitmap.__worldTransform.copyFrom(this.__worldTransform);
				if(bitmapMatrix == this.__renderTransform) {
					this.__cacheBitmap.__renderTransform.identity();
					this.__cacheBitmap.__renderTransform.tx = this.__renderTransform.tx + offsetX;
					this.__cacheBitmap.__renderTransform.ty = this.__renderTransform.ty + offsetY;
				} else {
					this.__cacheBitmap.__renderTransform.copyFrom(this.__cacheBitmapMatrix);
					this.__cacheBitmap.__renderTransform.invert();
					this.__cacheBitmap.__renderTransform.concat(this.__renderTransform);
					this.__cacheBitmap.__renderTransform.tx += offsetX;
					this.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			this.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			this.__cacheBitmap.__renderable = this.__renderable;
			this.__cacheBitmap.__worldAlpha = this.__worldAlpha;
			this.__cacheBitmap.__worldBlendMode = this.__worldBlendMode;
			this.__cacheBitmap.__worldShader = this.__worldShader;
			this.__cacheBitmap.__scrollRect = this.__scrollRect;
			this.__cacheBitmap.set_mask(this.__mask);
			if(needRender) {
				var renderType = renderer.__type;
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(null) == false) {
						renderType = "canvas";
					}
				}
				if(this.__cacheBitmapRenderer == null || renderType != this.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						this.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,this.__cacheBitmapData);
					} else {
						if(this.__cacheBitmapData.image == null) {
							var color = this.opaqueBackground != null ? -16777216 | this.opaqueBackground : 0;
							this.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.__cacheBitmapData.image);
						this.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(this.__cacheBitmapData.image.buffer.__srcContext);
					}
					this.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					this.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(this.__cacheBitmapColorTransform == null) {
					this.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				this.__cacheBitmapRenderer.__stage = this.stage;
				this.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				this.__cacheBitmapRenderer.__setBlendMode(10);
				this.__cacheBitmapRenderer.__worldAlpha = 1 / this.__worldAlpha;
				this.__cacheBitmapRenderer.__worldTransform.copyFrom(this.__renderTransform);
				this.__cacheBitmapRenderer.__worldTransform.invert();
				this.__cacheBitmapRenderer.__worldTransform.concat(this.__cacheBitmapMatrix);
				this.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				this.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				this.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				this.__cacheBitmapRenderer.__worldColorTransform.__invert();
				this.__isCacheBitmapRender = true;
				if(this.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = this.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					this.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(this.__cacheBitmapData);
					if(this.__cacheBitmapData.image != null) {
						this.__cacheBitmapData.__textureVersion = this.__cacheBitmapData.image.version + 1;
					}
					this.__cacheBitmapData.__drawGL(this,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g2 = 0;
						var _g11 = this.__filters;
						while(_g2 < _g11.length) {
							var filter1 = _g11[_g2];
							++_g2;
							if(filter1.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = this.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(this.__cacheBitmapData2 == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
							this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							if(this.__cacheBitmapData2.image != null) {
								this.__cacheBitmapData2.__textureVersion = this.__cacheBitmapData2.image.version + 1;
							}
						}
						this.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = this.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(this.__cacheBitmapData3 == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
								if(this.__cacheBitmapData3.image != null) {
									this.__cacheBitmapData3.__textureVersion = this.__cacheBitmapData3.image.version + 1;
								}
							}
							this.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = this.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g3 = 0;
						var _g12 = this.__filters;
						while(_g3 < _g12.length) {
							var filter2 = _g12[_g3];
							++_g3;
							if(filter2.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter2.__smooth);
							}
							var _g31 = 0;
							var _g21 = filter2.__numShaderPasses;
							while(_g31 < _g21) {
								var i = _g31++;
								shader = filter2.__initShader(childRenderer,i);
								childRenderer.__setBlendMode(filter2.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter2.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							if(filter2.__preserveObject) {
								childRenderer.__setBlendMode(10);
								childRenderer.__setRenderTarget(bitmap);
								childRenderer.__renderFilterPass(bitmap3,childRenderer.__defaultDisplayShader,filter2.__smooth,false);
							}
							filter2.__renderDirty = false;
						}
						this.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					this.__cacheBitmapData.__drawCanvas(this,this.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData1 = false;
						var needCopyOfOriginal1 = false;
						var _g4 = 0;
						var _g13 = this.__filters;
						while(_g4 < _g13.length) {
							var filter3 = _g13[_g4];
							++_g4;
							if(filter3.__needSecondBitmapData) {
								needSecondBitmapData1 = true;
							}
							if(filter3.__preserveObject) {
								needCopyOfOriginal1 = true;
							}
						}
						var bitmap1 = this.__cacheBitmapData;
						var bitmap21 = null;
						var bitmap31 = null;
						if(needSecondBitmapData1) {
							if(this.__cacheBitmapData2 == null || this.__cacheBitmapData2.image == null || bitmapWidth > this.__cacheBitmapData2.width || bitmapHeight > this.__cacheBitmapData2.height) {
								this.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData2.fillRect(this.__cacheBitmapData2.rect,0);
							}
							bitmap21 = this.__cacheBitmapData2;
						} else {
							bitmap21 = bitmap1;
						}
						if(needCopyOfOriginal1) {
							if(this.__cacheBitmapData3 == null || this.__cacheBitmapData3.image == null || bitmapWidth > this.__cacheBitmapData3.width || bitmapHeight > this.__cacheBitmapData3.height) {
								this.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								this.__cacheBitmapData3.fillRect(this.__cacheBitmapData3.rect,0);
							}
							bitmap31 = this.__cacheBitmapData3;
						}
						var sourceRect = openfl_geom_Rectangle.__pool.get();
						sourceRect.setTo(0,0,filterWidth,filterHeight);
						if(this.__tempPoint == null) {
							this.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = this.__tempPoint;
						var cacheBitmap1;
						var lastBitmap;
						var _g5 = 0;
						var _g14 = this.__filters;
						while(_g5 < _g14.length) {
							var filter4 = _g14[_g5];
							++_g5;
							if(filter4.__preserveObject) {
								bitmap31.copyPixels(bitmap1,bitmap1.rect,destPoint);
							}
							lastBitmap = filter4.__applyFilter(bitmap21,bitmap1,sourceRect,destPoint);
							if(filter4.__preserveObject) {
								lastBitmap.draw(bitmap31,null,this.__objectTransform != null ? this.__objectTransform.get_colorTransform() : null);
							}
							filter4.__renderDirty = false;
							if(needSecondBitmapData1 && lastBitmap == bitmap21) {
								cacheBitmap1 = bitmap1;
								bitmap1 = bitmap21;
								bitmap21 = cacheBitmap1;
							}
						}
						if(this.__cacheBitmapData != bitmap1) {
							cacheBitmap1 = this.__cacheBitmapData;
							this.__cacheBitmapData = bitmap1;
							this.__cacheBitmapData2 = cacheBitmap1;
							this.__cacheBitmap.__bitmapData = this.__cacheBitmapData;
							this.__cacheBitmapRenderer = null;
						}
						openfl_geom_Rectangle.__pool.release(sourceRect);
						this.__cacheBitmap.__imageVersion = this.__cacheBitmapData.__textureVersion;
					}
					this.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!this.__cacheBitmapColorTransform.__isDefault()) {
						this.__cacheBitmapData.colorTransform(this.__cacheBitmapData.rect,this.__cacheBitmapColorTransform);
					}
				}
				this.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			return updateTransform;
		} else if(this.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				this.__cacheBitmap.__renderDOMClear(renderer);
			}
			this.__cacheBitmap = null;
			this.__cacheBitmapData = null;
			this.__cacheBitmapData2 = null;
			this.__cacheBitmapData3 = null;
			this.__cacheBitmapColorTransform = null;
			this.__cacheBitmapRenderer = null;
			return true;
		}
		return false;
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			openfl_display_DisplayObject.__calculateAbsoluteTransform(local,this.parent.__worldTransform,this.__worldTransform);
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			openfl_display_DisplayObject.__calculateAbsoluteTransform(local,renderParent.__renderTransform,this.__renderTransform);
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			this.__renderTransform.__translateTransformed(-this.__scrollRect.x,-this.__scrollRect.y);
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			this.__setRenderDirty();
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		if(value == null) {
			value = 10;
		}
		if(value != this.__blendMode) {
			this.__setRenderDirty();
		}
		return this.__blendMode = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,set_cacheAsBitmap: function(value) {
		this.__setRenderDirty();
		return this.__cacheAsBitmap = value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
		} else {
			this.__filters = null;
		}
		this.__setRenderDirty();
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			this.__setRenderDirty();
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			this.__mask.__setRenderDirty();
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseX(mouseX,mouseY);
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl__$internal_Lib.current.stage.__mouseY;
		return this.__getRenderTransform().__transformInverseY(mouseX,mouseY);
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.get_colorTransform().__equals(value.get_colorTransform())) {
			this.__objectTransform.get_colorTransform().__copyFrom(value.get_colorTransform());
			this.__setRenderDirty();
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			this.__setRenderDirty();
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,__tabEnabled: null
	,__tabIndex: null
	,__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw new js__$Boot_HaxeError(error);
		} else if(child.stage == child) {
			var error1 = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error1.errorID = 3783;
			throw new js__$Boot_HaxeError(error1);
		}
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				this.__setRenderDirty();
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				this.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			child.__setRenderDirty();
			this.__setRenderDirty();
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				var event1 = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
			}
		}
		return child;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			child.__setRenderDirty();
			this.__setRenderDirty();
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event1 = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event1);
				child.__dispatchChildren(event1);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		this.__cleanupRemovedChildren();
	}
	,__cleanupRemovedChildren: function() {
		var _g = 0;
		var _g1 = this.__removedChildren;
		while(_g < _g1.get_length()) {
			var orphan = _g1.get(_g);
			++_g;
			if(orphan.stage == null) {
				orphan.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			openfl_display_DisplayObject.__calculateAbsoluteTransform(child.__transform,matrix,childWorldTransform);
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			openfl_display_DisplayObject.__calculateAbsoluteTransform(child.__transform,matrix,childWorldTransform);
			child.__getFilterBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest1 = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest1 = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest1;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		this.__cleanupRemovedChildren();
		if(!this.__renderable || this.__worldAlpha <= 0 || this.get_mask() != null && (this.get_mask().get_width() <= 0 || this.get_mask().get_height() <= 0)) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderCanvas(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderCanvas(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderCanvasMask: function(renderer) {
		this.__cleanupRemovedChildren();
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvasMask(renderer);
		}
	}
	,__renderDOM: function(renderer) {
		this.__cleanupRemovedChildren();
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		renderer.__pushMaskObject(this);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__renderDOM(renderer);
				child.__renderDirty = false;
			}
			this.__renderDirty = false;
		} else {
			var _g2 = 0;
			var _g11 = this.__children;
			while(_g2 < _g11.length) {
				var child1 = _g11[_g2];
				++_g2;
				child1.__renderDOM(renderer);
			}
		}
		renderer.__popMaskObject(this);
	}
	,__renderDOMClear: function(renderer) {
		this.__cleanupRemovedChildren();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOMClear(renderer);
		}
	}
	,__renderGL: function(renderer) {
		this.__cleanupRemovedChildren();
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderGL.call(this,renderer);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			return;
		}
		if(this.__children.length > 0) {
			renderer.__pushMaskObject(this);
			if(renderer.__stage != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__renderGL(renderer);
					child.__renderDirty = false;
				}
				this.__renderDirty = false;
			} else {
				var _g2 = 0;
				var _g11 = this.__children;
				while(_g2 < _g11.length) {
					var child1 = _g11[_g2];
					++_g2;
					child1.__renderGL(renderer);
				}
			}
		}
		if(this.__children.length > 0) {
			renderer.__popMaskObject(this);
		}
	}
	,__renderGLMask: function(renderer) {
		this.__cleanupRemovedChildren();
		if(this.__graphics != null) {
			openfl__$internal_renderer_context3D_Context3DShape.renderMask(this,renderer);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGLMask(renderer);
		}
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		}
		value = openfl_display_InteractiveObject.prototype.__shouldCacheHardware.call(this,value);
		if(value == true) {
			return true;
		}
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				value = child.__shouldCacheHardware(value);
				if(value == true) {
					return true;
				}
			}
		}
		return value;
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	dropTarget: null
	,hitArea: null
	,useHandCursor: null
	,__buttonMode: null
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			this.__getRenderTransform().__transformInversePoint(point);
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode"})
});
var Main = function() {
	this.gravity = new nape_geom_Vec2(0,500);
	openfl_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.added));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.main = function() {
	haxe_Log.trace("main",{ fileName : "Main.hx", lineNumber : 152, className : "Main", methodName : "main"});
	openfl_Lib.get_current().stage.align = 6;
	openfl_Lib.get_current().stage.set_scaleMode(2);
	openfl_Lib.get_current().addChild(new Main());
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	inited: null
	,menu: null
	,space: null
	,gravity: null
	,resize: function(e) {
		if(!this.inited) {
			this.init();
		}
	}
	,init: function() {
		if(this.inited) {
			return;
		}
		this.inited = true;
		SoundManager.init();
		Storage.init(openfl_Lib.get_current().stage,Std["int"](openfl_Lib.get_current().stage.stageWidth),Std["int"](openfl_Lib.get_current().stage.stageHeight),Std["int"](openfl_Lib.get_current().stage.get_frameRate()));
		this.space = new nape_space_Space(this.gravity);
		Storage.setSpace(this.space);
		Storage.theGame = new openfl_display_Sprite();
		Storage.theMenu = new openfl_display_Sprite();
		Storage.theMenu.set_alpha(1);
		Storage.theGame.set_alpha(0.01);
		this.menu = new MenuState(this,1);
		Storage.theMenu = this.menu;
		Storage.curSprite = this.menu;
		this.checkScaling();
		openfl_Lib.get_current().stage.addChild(Storage.theGame);
		openfl_Lib.get_current().stage.addChild(this.menu);
	}
	,checkScaling: function() {
		Storage.setXY(Std["int"](openfl_Lib.get_current().stage.stageWidth),Std["int"](openfl_Lib.get_current().stage.stageHeight));
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,added: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.added));
		this.stage.addEventListener("resize",$bind(this,this.resize));
		this.init();
	}
	,__class__: Main
});
var DocumentClass = function(current) {
	current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var CButton = function(_colorB,_sw) {
	if(_sw == null) {
		_sw = "k";
	}
	if(_colorB == null) {
		_colorB = "GreenButton";
	}
	this.hitPoints = 0;
	this.sw = "none";
	this.button = null;
	this.glowB = null;
	this.animB = null;
	this.colorB = "none";
	openfl_display_Sprite.call(this);
	this.colorB = _colorB;
	this.sw = _sw;
	var _g = this.colorB;
	switch(_g) {
	case "BlueButton":
		this.animB = Storage.initAnimation("blueLightB","ui",true);
		this.animB.showBehavior("on");
		this.addChild(this.animB);
		var _g1 = this.animB;
		_g1.set_y(_g1.get_y());
		this.glowB = Storage.initAnimation("lightBlue","ui",true);
		this.glowB.showBehavior("enable");
		var _g2 = this.glowB;
		_g2.set_y(_g2.get_y() - 21);
		this.addChild(this.glowB);
		break;
	case "GreenButton":
		this.animB = Storage.initAnimation("greenLightB","ui",true);
		this.animB.showBehavior("off");
		var _g3 = this.animB;
		_g3.set_y(_g3.get_y());
		this.addChild(this.animB);
		this.glowB = Storage.initAnimation("lightGreen","ui",true);
		this.glowB.showBehavior("enable");
		var _g4 = this.glowB;
		_g4.set_y(_g4.get_y() - 21);
		this.addChild(this.glowB);
		break;
	case "OrangeButton":
		this.animB = Storage.initAnimation("orangeLightB","ui",true);
		this.animB.showBehavior("on");
		this.addChild(this.animB);
		var _g5 = this.animB;
		_g5.set_y(_g5.get_y());
		this.glowB = Storage.initAnimation("lightOrange","ui",true);
		this.glowB.showBehavior("enable");
		var _g6 = this.glowB;
		_g6.set_y(_g6.get_y() - 21);
		this.addChild(this.glowB);
		break;
	}
	this.button = Storage.initSpriteUI("cbutton");
	var _g11 = this.button;
	_g11.set_y(_g11.get_y() + 7);
	this.addChild(this.button);
};
$hxClasses["CButton"] = CButton;
CButton.__name__ = ["CButton"];
CButton.__super__ = openfl_display_Sprite;
CButton.prototype = $extend(openfl_display_Sprite.prototype,{
	colorB: null
	,animB: null
	,glowB: null
	,button: null
	,sw: null
	,hitPoints: null
	,__class__: CButton
});
var CompletedGameState = function(_par,_cLevel,_star) {
	this.star = 0;
	this.cLevel = 0;
	this.lastTime = 0;
	this._parent = null;
	openfl_display_Sprite.call(this);
	this._parent = _par;
	this.cLevel = _cLevel;
	this.star = _star;
	Storage.previousLevel = null;
	this.init();
};
$hxClasses["CompletedGameState"] = CompletedGameState;
CompletedGameState.__name__ = ["CompletedGameState"];
CompletedGameState.__super__ = openfl_display_Sprite;
CompletedGameState.prototype = $extend(openfl_display_Sprite.prototype,{
	mainBackGround: null
	,menu: null
	,_parent: null
	,lastTime: null
	,cLevel: null
	,star: null
	,init: function() {
		this._parent.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mainBackGround = Storage.initSpriteUI("gameCompleted");
		var _g = this.mainBackGround;
		_g.set_x(_g.get_x() + this.mainBackGround.get_width() / 2);
		this.mainBackGround.set_y(this.mainBackGround.get_height() / 2);
		Storage.theGame.addChild(this.mainBackGround);
		this.menu = Storage.initAnimation("back","ui");
		Storage.theGame.addChild(this.menu);
		this.menu.showBehavior("out");
		this.menu.set_buttonMode(true);
		this.menu.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.menu.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.menu.addEventListener("mouseDown",$bind(this,this.goToMenu));
		this.menu.set_x(50);
		this.menu.set_y(444);
		this.menu.set_scaleX(1);
		this.menu.set_scaleY(1);
	}
	,clearState: function() {
		Storage.theGame.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		Storage.clear();
		Storage.previousLevel = this;
		while(Storage.theGame.get_numChildren() > 0) Storage.theGame.removeChildAt(0);
		motion_Actuate.reset();
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
		haxe_Log.trace("overMouse",{ fileName : "CompletedGameState.hx", lineNumber : 138, className : "CompletedGameState", methodName : "overMouse"});
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
		haxe_Log.trace("outMouse",{ fileName : "CompletedGameState.hx", lineNumber : 143, className : "CompletedGameState", methodName : "outMouse"});
	}
	,goToMenu: function(e) {
		this.clearState();
		Storage.clear();
		var menuState = new IconsState(this._parent);
		Storage.curSprite = menuState;
		Storage.blackScreenTween(menuState);
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTime;
		this.menu.update(delta);
		this.mainBackGround.update(delta);
		this.lastTime = openfl_Lib.getTimer();
	}
	,__class__: CompletedGameState
});
var CompletedState = function(_par,_cLevel,_score) {
	this.score = 0;
	this.stars = null;
	this.scoreArray = [null,null,null,null];
	this.cLevel = 0;
	this.lastTime = 0;
	this._parent = null;
	openfl_display_Sprite.call(this);
	this.cLevel = _cLevel;
	this._parent = _par;
	Storage.previousLevel = null;
	this.score = _score;
	this.init();
};
$hxClasses["CompletedState"] = CompletedState;
CompletedState.__name__ = ["CompletedState"];
CompletedState.__super__ = openfl_display_Sprite;
CompletedState.prototype = $extend(openfl_display_Sprite.prototype,{
	mainBackGround: null
	,mainBackGround2: null
	,mainBackGround3: null
	,next: null
	,menu: null
	,restart: null
	,_parent: null
	,lastTime: null
	,cLevel: null
	,scoreArray: null
	,stars: null
	,score: null
	,init: function() {
		this.mainBackGround2 = Storage.initSpriteUI("menu");
		var _g = this.mainBackGround2;
		_g.set_x(_g.get_x() + this.mainBackGround2.get_width() / 2);
		var _g1 = this.mainBackGround2;
		_g1.set_y(_g1.get_y() + this.mainBackGround2.get_height() / 2);
		this.mainBackGround2.set_cacheAsBitmap(true);
		Storage.theGame.addChild(this.mainBackGround2);
		this._parent.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		if(Storage.currentLevel != 30) {
			this.mainBackGround = Storage.initSpriteUI("levelCompleted");
		} else {
			this.mainBackGround = Storage.initSpriteUI("gameCompleted");
		}
		var _g2 = this.mainBackGround;
		_g2.set_x(_g2.get_x() + this.mainBackGround.get_width() / 2);
		this.mainBackGround.set_y(this.mainBackGround.get_height() / 2);
		this.mainBackGround.smoothing = true;
		this.mainBackGround.set_cacheAsBitmap(true);
		Storage.theGame.addChild(this.mainBackGround);
		this.stars = Storage.initAnimation("star","ui");
		this.stars.showBehavior(Std.string(Storage.starCounter));
		this.stars.set_x(330);
		this.stars.set_y(260);
		this.stars.set_scaleX(1);
		this.stars.set_scaleY(1);
		this.stars.mouseEnabled = false;
		Storage.theGame.addChild(this.stars);
		var _g3 = 0;
		while(_g3 < 4) {
			var i = _g3++;
			this.scoreArray[i] = Storage.initAnimation("digit","ui");
			this.scoreArray[i].set_x(390 + i * 26);
			this.scoreArray[i].set_y(202);
			this.scoreArray[i].set_scaleX(0.7);
			this.scoreArray[i].set_scaleY(0.7);
			this.scoreArray[i].mouseEnabled = false;
			this.scoreArray[i].showBehavior("0");
			Storage.theGame.addChild(this.scoreArray[i]);
		}
		this.showScores(this.scoreArray,this.score);
		if(Storage.currentLevel != 30) {
			this.next = Storage.initAnimation("next","ui");
		} else {
			this.next = Storage.initAnimation("back","ui");
		}
		Storage.theGame.addChild(this.next);
		this.next.showBehavior("out");
		this.next.set_buttonMode(true);
		this.next.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.next.addEventListener("mouseOut",$bind(this,this.outMouse));
		if(Storage.currentLevel != 30) {
			this.next.addEventListener("mouseDown",$bind(this,this.goToNext));
		} else {
			this.next.addEventListener("mouseDown",$bind(this,this.goToMenu));
		}
		this.next.set_x(503);
		this.next.set_y(397);
		this.menu = Storage.initAnimation("lmenu","ui");
		Storage.theGame.addChild(this.menu);
		this.menu.showBehavior("out");
		this.menu.set_buttonMode(true);
		this.menu.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.menu.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.menu.addEventListener("mouseDown",$bind(this,this.goToMenu));
		this.menu.set_x(342);
		this.menu.set_y(465);
		this.restart = Storage.initAnimation("replay","ui");
		Storage.theGame.addChild(this.restart);
		this.restart.showBehavior("out");
		this.restart.set_buttonMode(true);
		this.restart.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.restart.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.restart.addEventListener("mouseDown",$bind(this,this.goToRestart));
		this.restart.set_x(188);
		this.restart.set_y(397);
	}
	,showScores: function(scoreArray,score) {
		var tonna = 0;
		var sot = 0;
		var ten = 0;
		var one = 0;
		var scoreStr = score == null ? "null" : "" + score;
		if(scoreStr.length > 0) {
			one = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 1,1));
		} else {
			one = 0;
		}
		if(scoreStr.length > 1) {
			ten = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 2,1));
		} else {
			ten = 0;
		}
		if(scoreStr.length > 2) {
			sot = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 3,1));
		} else {
			sot = 0;
		}
		if(scoreStr.length > 3) {
			tonna = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 4,1));
		} else {
			tonna = 0;
		}
		if(one < 0 || one > 9) {
			one = 0;
		}
		if(ten < 0 || ten > 9) {
			ten = 0;
		}
		if(sot < 0 || sot > 9) {
			sot = 0;
		}
		if(tonna < 0 || tonna > 9) {
			tonna = 0;
		}
		scoreArray[0].showBehavior(tonna == null ? "null" : "" + tonna);
		scoreArray[0].update(1);
		scoreArray[1].showBehavior(sot == null ? "null" : "" + sot);
		scoreArray[1].update(1);
		scoreArray[2].showBehavior(ten == null ? "null" : "" + ten);
		scoreArray[2].update(1);
		scoreArray[3].showBehavior(one == null ? "null" : "" + one);
		scoreArray[3].update(1);
		haxe_Log.trace([tonna,sot,ten,one],{ fileName : "CompletedState.hx", lineNumber : 261, className : "CompletedState", methodName : "showScores"});
		return [tonna,sot,ten,one];
	}
	,goToNext: function(e) {
		this.mainBackGround3 = Storage.initSpriteUI("menu");
		var _g = this.mainBackGround3;
		_g.set_x(_g.get_x() + this.mainBackGround3.get_width() / 2);
		var _g1 = this.mainBackGround3;
		_g1.set_y(_g1.get_y() + this.mainBackGround3.get_height() / 2);
		this.mainBackGround3.set_cacheAsBitmap(true);
		Storage.theGame.addChild(this.mainBackGround3);
		this.afterAdsNext();
	}
	,afterAdsNext: function() {
		this.clearState();
		Storage.theGame.removeChild(this.mainBackGround3);
		var playState = new PlayState(this._parent,this.cLevel + 1);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.theGame.addChild(playState);
		Storage.blackScreenTween(playState);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,clearState: function() {
		Storage.theGame.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		motion_Actuate.reset();
		Storage.clear();
		Storage.previousLevel = this;
		while(Storage.theGame.get_numChildren() > 0) Storage.theGame.removeChildAt(0);
	}
	,goToRestart: function(e) {
		this.mainBackGround3 = Storage.initSpriteUI("menu");
		var _g = this.mainBackGround3;
		_g.set_x(_g.get_x() + this.mainBackGround3.get_width() / 2);
		var _g1 = this.mainBackGround3;
		_g1.set_y(_g1.get_y() + this.mainBackGround3.get_height() / 2);
		this.mainBackGround3.set_cacheAsBitmap(true);
		Storage.theGame.addChild(this.mainBackGround3);
		this.clearState();
		Storage.theGame.removeChild(this.mainBackGround3);
		var playState = new PlayState(this._parent,this.cLevel);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.theGame.addChild(playState);
		Storage.blackScreenTween(playState);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,afterAdsRestart: function() {
		Storage.theGame.removeChild(this.mainBackGround3);
		this.clearState();
		Storage.clear();
		var restartState = new PlayState(this._parent,this.cLevel);
		Storage.curSprite = restartState;
		Storage.blackScreenTween(restartState);
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
		haxe_Log.trace("overMouse",{ fileName : "CompletedState.hx", lineNumber : 431, className : "CompletedState", methodName : "overMouse"});
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
		haxe_Log.trace("outMouse",{ fileName : "CompletedState.hx", lineNumber : 436, className : "CompletedState", methodName : "outMouse"});
	}
	,goToMenu: function(e) {
		this.clearState();
		Storage.clear();
		var menuState = new IconsState(this._parent);
		Storage.curSprite = menuState;
		Storage.blackScreenTween(menuState);
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTime;
		this.restart.update(delta);
		this.menu.update(delta);
		this.next.update(delta);
		this.mainBackGround.update(delta);
		this.lastTime = openfl_Lib.getTimer();
	}
	,__class__: CompletedState
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			var tmp = this.r;
			var tmp1 = len < 0 ? s : HxOverrides.substr(s,0,pos + len);
			this.r.m = tmp.exec(tmp1);
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,replace: function(s,by) {
		return s.replace(this.r,by);
	}
	,__class__: EReg
};
var FailedState = function(_par,_cLevel) {
	this.cLevel = 0;
	this.lastTime = 0;
	this._parent = null;
	openfl_display_Sprite.call(this);
	this.cLevel = _cLevel;
	this._parent = _par;
	Storage.previousLevel = null;
	this.init();
};
$hxClasses["FailedState"] = FailedState;
FailedState.__name__ = ["FailedState"];
FailedState.__super__ = openfl_display_Sprite;
FailedState.prototype = $extend(openfl_display_Sprite.prototype,{
	mainBackGround: null
	,restart: null
	,_parent: null
	,lastTime: null
	,cLevel: null
	,init: function() {
		this._parent.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mainBackGround = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/failedState.png"));
		this.mainBackGround.smoothing = true;
		this.mainBackGround.set_cacheAsBitmap(true);
		this.mainBackGround.set_x(0);
		this.mainBackGround.set_y(0);
		Storage.theGame.addChild(this.mainBackGround);
		this.restart = Storage.initAnimation("restartMaxi","ui");
		Storage.theGame.addChild(this.restart);
		this.restart.showBehavior("out");
		this.restart.set_buttonMode(true);
		this.restart.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.restart.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.restart.addEventListener("mouseDown",$bind(this,this.goToRestart));
		this.restart.set_x(450);
		this.restart.set_y(260);
		this.restart.set_scaleX(0.9);
		this.restart.set_scaleY(0.9);
	}
	,clearState: function() {
		Storage.theGame.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		motion_Actuate.reset();
		Storage.clear();
		Storage.previousLevel = this;
		while(Storage.theGame.get_numChildren() > 0) Storage.theGame.removeChildAt(0);
	}
	,goToRestart: function(e) {
		this.clearState();
		var playState = new PlayState(this._parent,this.cLevel);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.theGame.addChild(playState);
		Storage.blackScreenTween(playState);
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
		haxe_Log.trace("overMouse",{ fileName : "FailedState.hx", lineNumber : 252, className : "FailedState", methodName : "overMouse"});
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
		haxe_Log.trace("outMouse",{ fileName : "FailedState.hx", lineNumber : 257, className : "FailedState", methodName : "outMouse"});
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTime;
		this.restart.update(delta);
		this.lastTime = openfl_Lib.getTimer();
	}
	,__class__: FailedState
});
var Fraction = function(fracVec,regionCoordinates,sprite,id) {
	this.fadeTimer = new openfl_utils_Timer(50,0);
	this.fractionId = id;
	this.fractionBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),fracVec);
	this.fractionPolygon = new nape_shape_Polygon(regionCoordinates,new nape_phys_Material(0.1,7.2,7.2,5.2),new nape_dynamics_InteractionFilter(4,-1));
	if(this.fractionPolygon.validity() == nape_shape_ValidationResult.get_VALID()) {
		this.fractionBody.get_shapes().add(this.fractionPolygon);
		var anchor = this.fractionBody.get_localCOM().mul(-1);
		this.fractionBody.align();
		this.fractionBody.graphic = sprite;
		this.fractionBody.graphicOffset = anchor;
		this.fractionBody.graphic.set_x(0);
		this.fractionBody.graphic.set_y(0);
		this.fadeTimer.addEventListener("timer",$bind(this,this.fadeFractions));
	} else {
		this.fractionBody = null;
	}
};
$hxClasses["Fraction"] = Fraction;
Fraction.__name__ = ["Fraction"];
Fraction.prototype = {
	fractionBody: null
	,fractionPolygon: null
	,fractionId: null
	,fadeTimer: null
	,fadeFractions: function(e) {
		var _g = js_Boot.__cast(this.fractionBody.graphic , openfl_display_Sprite);
		_g.set_alpha(_g.get_alpha() - 0.1);
		if((js_Boot.__cast(this.fractionBody.graphic , openfl_display_Sprite)).get_alpha() <= 0) {
			this.fadeTimer.stop();
			Storage.theGame.removeChild(this.fractionBody.graphic);
			Storage.space.get_bodies().remove(this.fractionBody);
			this.fractionBody = null;
		}
	}
	,__class__: Fraction
};
var GameTransformator = function() {
	this.sparksTimer = new openfl_utils_Timer(7000,0);
	this.sparksTimer.addEventListener("timer",$bind(this,this.sparksGo));
};
$hxClasses["GameTransformator"] = GameTransformator;
GameTransformator.__name__ = ["GameTransformator"];
GameTransformator.prototype = {
	sparksTimer: null
	,transSwitch: null
	,transBroken: null
	,transGraphic: null
	,sparksGo: function(e) {
	}
	,__class__: GameTransformator
};
var GameTruck = function() {
	this.boxSum = 0;
	this.truckGo = new openfl_utils_Timer(50,0);
	this.truckGo.addEventListener("timer",$bind(this,this.goTruck));
};
$hxClasses["GameTruck"] = GameTruck;
GameTruck.__name__ = ["GameTruck"];
GameTruck.prototype = {
	truckBody: null
	,leftWheelTruck: null
	,rightWheelTruck: null
	,cargo: null
	,truckGo: null
	,boxCount: null
	,boxSum: null
	,cargoLoad: null
	,stopSignal: null
	,goTruck: function(e) {
		var _g = this.rightWheelTruck;
		_g.set_angularVel(_g.get_angularVel() + 2);
		if(this.rightWheelTruck.get_angularVel() > 20) {
			this.truckGo.stop();
		}
	}
	,__class__: GameTruck
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return js_Lib.get_undefined();
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IconsState = function(_par) {
	this.scoreArray = [null,null,null,null];
	this.total = null;
	this.timerBeforeStartUI = new openfl_utils_Timer(300,1);
	this.iconArray = [];
	this.lastTime = 0;
	this._parent = null;
	openfl_display_Sprite.call(this);
	this._parent = _par;
	Storage.iconsState = this;
	this.mainBackGround = Storage.initSpriteUI("menu");
	var _g = this.mainBackGround;
	_g.set_x(_g.get_x() + this.mainBackGround.get_width() / 2);
	var _g1 = this.mainBackGround;
	_g1.set_y(_g1.get_y() + this.mainBackGround.get_height() / 2);
	this.mainBackGround.smoothing = true;
	this.mainBackGround.set_cacheAsBitmap(true);
	Storage.theGame.addChild(this.mainBackGround);
	this.timerBeforeStartUI.start();
	this.timerBeforeStartUI.addEventListener("timerComplete",$bind(this,this.init));
};
$hxClasses["IconsState"] = IconsState;
IconsState.__name__ = ["IconsState"];
IconsState.__super__ = openfl_display_Sprite;
IconsState.prototype = $extend(openfl_display_Sprite.prototype,{
	mainBackGround: null
	,menu: null
	,icon: null
	,starIcon: null
	,_parent: null
	,lastTime: null
	,iconArray: null
	,timerBeforeStartUI: null
	,total: null
	,scoreArray: null
	,init: function(e) {
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.menu = Storage.initAnimation("back","ui");
		Storage.theGame.addChild(this.menu);
		this.menu.showBehavior("out");
		this.menu.set_buttonMode(true);
		this.menu.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.menu.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.menu.addEventListener("mouseDown",$bind(this,this.goToMenu));
		this.menu.set_x(110);
		this.menu.set_y(444);
		this.menu.set_scaleX(1);
		this.menu.set_scaleY(1);
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 10) {
				var j = _g1++;
				var n = i * 10 + j;
				this.icon = Storage.initAnimation("LevelBtn","ui");
				this.icon.showBehavior("out");
				this.iconArray.push(this.icon);
				var icText = Storage.initAnimation("levelNumbers","ui");
				icText.showBehavior(Std.string(i * 10 + j));
				icText.update(1);
				this.starIcon = Storage.initAnimation("star","ui");
				this.starIcon.showBehavior(Std.string(Storage.starArray[i * 10 + j]));
				this.starIcon.set_scaleX(0.7);
				this.starIcon.set_scaleY(0.7);
				this.starIcon.mouseEnabled = false;
				this.starIcon.update(1);
				icText.set_x(0);
				icText.set_y(0);
				icText.mouseEnabled = false;
				this.icon.addChild(icText);
				if(Storage.levelStateArray[i * 10 + j] == 0) {
					this.icon.showBehavior("over");
					this.icon.set_buttonMode(false);
				} else {
					this.icon.showBehavior("out");
					this.icon.addEventListener("mouseOver",$bind(this,this.overMouse));
					this.icon.addEventListener("mouseOut",$bind(this,this.outMouse));
					this.icon.addEventListener("mouseDown",$bind(this,this.goToIconBefore));
					this.icon.set_buttonMode(true);
				}
				this.icon.set_scaleX(1);
				this.icon.set_scaleY(1);
				this.icon.set_name(Std.string(i * 10 + j + 1));
				this.icon.set_x(54 + 68 * j);
				this.icon.set_y(124 + i * 104);
				this.starIcon.set_x(54 + 68 * j);
				this.starIcon.set_y(86 + i * 104);
				Storage.theGame.addChild(this.icon);
				Storage.theGame.addChild(this.starIcon);
			}
		}
		this.total = Storage.initSpriteUI("total");
		this.total.set_x(170);
		this.total.set_y(40);
		Storage.theGame.addChild(this.total);
		var _g2 = 0;
		while(_g2 < 4) {
			var i1 = _g2++;
			this.scoreArray[i1] = Storage.initAnimation("digit","ui");
			this.scoreArray[i1].set_x(360 + i1 * 36);
			this.scoreArray[i1].set_y(35);
			this.scoreArray[i1].set_scaleX(0.75);
			this.scoreArray[i1].set_scaleY(0.75);
			this.scoreArray[i1].showBehavior("0");
			Storage.theGame.addChild(this.scoreArray[i1]);
		}
		var totalScores = 0;
		var _g11 = 0;
		var _g3 = Storage.scoresArray.length;
		while(_g11 < _g3) {
			var j1 = _g11++;
			totalScores += Storage.scoresArray[j1];
		}
		this.showScores(this.scoreArray,totalScores);
		this.removeEventListener("resize",$bind(this,this.resizeStage));
		this.addEventListener("resize",$bind(this,this.resizeStage));
		Storage.blackScreenTween(this._parent);
	}
	,showScores: function(scoreArray,score) {
		var tonna = 0;
		var sot = 0;
		var ten = 0;
		var one = 0;
		var scoreStr = score == null ? "null" : "" + score;
		if(scoreStr.length > 0) {
			one = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 1,1));
		} else {
			one = 0;
		}
		if(scoreStr.length > 1) {
			ten = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 2,1));
		} else {
			ten = 0;
		}
		if(scoreStr.length > 2) {
			sot = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 3,1));
		} else {
			sot = 0;
		}
		if(scoreStr.length > 3) {
			tonna = Std.parseInt(HxOverrides.substr(scoreStr,scoreStr.length - 4,1));
		} else {
			tonna = 0;
		}
		scoreArray[0].showBehavior(tonna == null ? "null" : "" + tonna);
		scoreArray[0].update(1);
		scoreArray[1].showBehavior(sot == null ? "null" : "" + sot);
		scoreArray[1].update(1);
		scoreArray[2].showBehavior(ten == null ? "null" : "" + ten);
		scoreArray[2].update(1);
		scoreArray[3].showBehavior(one == null ? "null" : "" + one);
		scoreArray[3].update(1);
		return [tonna,sot,ten,one];
	}
	,resizeStage: function(e) {
		Storage.setXY(Std["int"](openfl_Lib.get_current().stage.stageWidth),Std["int"](openfl_Lib.get_current().stage.stageHeight));
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,goToIconBefore: function(e) {
		Storage.currentIcon = Std.parseInt((js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).get_name());
		this.goToIcon();
	}
	,goToIcon: function() {
		haxe_Log.trace("before clear",{ fileName : "IconsState.hx", lineNumber : 346, className : "IconsState", methodName : "goToIcon"});
		this.clearState();
		var playState = new PlayState(this._parent,Storage.currentIcon);
		haxe_Log.trace("after clear",{ fileName : "IconsState.hx", lineNumber : 351, className : "IconsState", methodName : "goToIcon"});
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		Storage.blackScreenTween(playState);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.theGame.addChild(playState);
	}
	,goToMenu: function(e) {
		this.clearState();
		Storage.blackScreenTween(Storage.theGame);
		Storage.theMenu.set_alpha(1);
		Storage.theGame.set_alpha(0.01);
		Storage.theMenu.mouseEnabled = true;
		Storage.theGame.mouseEnabled = false;
		Storage.theMenu.mouseChildren = true;
		Storage.theGame.mouseChildren = false;
		Storage.theMenu.addEventListener("enterFrame",($_=(js_Boot.__cast(Storage.theMenu , MenuState)),$bind($_,$_.onEnterFrame)));
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		SoundManager.play("SoundGameButonsClick");
	}
	,clearState: function() {
		Storage.theGame.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		motion_Actuate.reset();
		Storage.clear();
		Storage.previousLevel = this;
		while(Storage.theGame.get_numChildren() > 0) Storage.theGame.removeChildAt(0);
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
		haxe_Log.trace("overMouse",{ fileName : "IconsState.hx", lineNumber : 464, className : "IconsState", methodName : "overMouse"});
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
		haxe_Log.trace("outMouse",{ fileName : "IconsState.hx", lineNumber : 469, className : "IconsState", methodName : "outMouse"});
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTime;
		this.menu.update(delta);
		this.mainBackGround.update(delta);
		var _g1 = 0;
		var _g = this.iconArray.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.iconArray[i].update(delta);
		}
		this.lastTime = openfl_Lib.getTimer();
	}
	,__class__: IconsState
});
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = ["ManifestResources"];
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	var rootPath = null;
	if(config != null && Reflect.hasField(config,"rootPath")) {
		rootPath = Reflect.field(config,"rootPath");
	}
	if(rootPath == null) {
		rootPath = "";
	}
	lime_utils_Assets.defaultRootPath = rootPath;
	var data;
	var manifest;
	var library;
	data = "{\"name\":null,\"assets\":\"aoy4:pathy20:img%2Fplay%2Fba1.pngy4:sizei136837y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y21:img%2Fplay%2Fba10.pngR2i118490R3R4R5R7R6tgoR0y21:img%2Fplay%2Fba11.pngR2i98663R3R4R5R8R6tgoR0y21:img%2Fplay%2Fba12.pngR2i67754R3R4R5R9R6tgoR0y21:img%2Fplay%2Fba13.pngR2i111116R3R4R5R10R6tgoR0y21:img%2Fplay%2Fba14.pngR2i96501R3R4R5R11R6tgoR0y21:img%2Fplay%2Fba15.pngR2i64105R3R4R5R12R6tgoR0y21:img%2Fplay%2Fba16.pngR2i75145R3R4R5R13R6tgoR0y21:img%2Fplay%2Fba17.pngR2i52282R3R4R5R14R6tgoR0y21:img%2Fplay%2Fba18.pngR2i93381R3R4R5R15R6tgoR0y21:img%2Fplay%2Fba19.pngR2i61371R3R4R5R16R6tgoR0y20:img%2Fplay%2Fba2.pngR2i107680R3R4R5R17R6tgoR0y21:img%2Fplay%2Fba20.pngR2i61988R3R4R5R18R6tgoR0y21:img%2Fplay%2Fba21.pngR2i64340R3R4R5R19R6tgoR0y21:img%2Fplay%2Fba22.pngR2i113106R3R4R5R20R6tgoR0y21:img%2Fplay%2Fba23.pngR2i88589R3R4R5R21R6tgoR0y21:img%2Fplay%2Fba24.pngR2i76394R3R4R5R22R6tgoR0y21:img%2Fplay%2Fba25.pngR2i81960R3R4R5R23R6tgoR0y21:img%2Fplay%2Fba26.pngR2i72812R3R4R5R24R6tgoR0y21:img%2Fplay%2Fba27.pngR2i107180R3R4R5R25R6tgoR0y21:img%2Fplay%2Fba28.pngR2i96952R3R4R5R26R6tgoR0y21:img%2Fplay%2Fba29.pngR2i111722R3R4R5R27R6tgoR0y20:img%2Fplay%2Fba3.pngR2i92600R3R4R5R28R6tgoR0y21:img%2Fplay%2Fba30.pngR2i84171R3R4R5R29R6tgoR0y20:img%2Fplay%2Fba4.pngR2i99621R3R4R5R30R6tgoR0y20:img%2Fplay%2Fba5.pngR2i86436R3R4R5R31R6tgoR0y20:img%2Fplay%2Fba6.pngR2i106081R3R4R5R32R6tgoR0y20:img%2Fplay%2Fba7.pngR2i85547R3R4R5R33R6tgoR0y20:img%2Fplay%2Fba8.pngR2i112468R3R4R5R34R6tgoR0y20:img%2Fplay%2Fba9.pngR2i132659R3R4R5R35R6tgoR0y18:img%2Fui%2Farm.pngR2i2518R3R4R5R36R6tgoR0y19:img%2Fui%2Farm2.pngR2i5208R3R4R5R37R6tgoR0y19:img%2Fui%2Farm3.pngR2i4846R3R4R5R38R6tgoR0y26:img%2Fui%2FarrowBottom.pngR2i407R3R4R5R39R6tgoR0y25:img%2Fui%2FarrowRight.pngR2i362R3R4R5R40R6tgoR0y20:img%2Fui%2Fback.jsonR2i973R3y4:TEXTR5R41R6tgoR0y28:img%2Fui%2FbackAnimation.pngR2i7984R3R4R5R43R6tgoR0y22:img%2Fui%2FBigBox.jsonR2i765R3R42R5R44R6tgoR0y30:img%2Fui%2FBigBoxAnimation.pngR2i4743R3R4R5R45R6tgoR0y21:img%2Fui%2Fblades.pngR2i1159R3R4R5R46R6tgoR0y20:img%2Fui%2Fblank.pngR2i83R3R4R5R47R6tgoR0y26:img%2Fui%2FblueLightB.jsonR2i4084R3R42R5R48R6tgoR0y34:img%2Fui%2FblueLightBAnimation.pngR2i730R3R4R5R49R6tgoR0y24:img%2Fui%2FboardWall.pngR2i1998R3R4R5R50R6tgoR0y22:img%2Fui%2FBtnGoo.jsonR2i998R3R42R5R51R6tgoR0y30:img%2Fui%2FBtnGooAnimation.pngR2i2331R3R4R5R52R6tgoR0y23:img%2Fui%2FBtnLeft.jsonR2i1002R3R42R5R53R6tgoR0y31:img%2Fui%2FBtnLeftAnimation.pngR2i1918R3R4R5R54R6tgoR0y24:img%2Fui%2FBtnRight.jsonR2i1007R3R42R5R55R6tgoR0y32:img%2Fui%2FBtnRightAnimation.pngR2i1944R3R4R5R56R6tgoR0y21:img%2Fui%2FBtnUp.jsonR2i992R3R42R5R57R6tgoR0y29:img%2Fui%2FBtnUpAnimation.pngR2i1939R3R4R5R58R6tgoR0y20:img%2Fui%2Fcargo.pngR2i10279R3R4R5R59R6tgoR0y22:img%2Fui%2Fcbutton.pngR2i388R3R4R5R60R6tgoR0y21:img%2Fui%2FChain1.pngR2i647R3R4R5R61R6tgoR0y21:img%2Fui%2FChain2.pngR2i626R3R4R5R62R6tgoR0y21:img%2Fui%2FClinch.pngR2i351R3R4R5R63R6tgoR0y34:img%2Fui%2FCollectedStarsPanel.pngR2i769R3R4R5R64R6tgoR0y23:img%2Fui%2Fcooller2.pngR2i2684R3R4R5R65R6tgoR0y26:img%2Fui%2FcoollerMain.pngR2i2620R3R4R5R66R6tgoR0y25:img%2Fui%2FcoollerTop.pngR2i383R3R4R5R67R6tgoR0y25:img%2Fui%2FDangerBox1.pngR2i1548R3R4R5R68R6tgoR0y21:img%2Fui%2Fdigit.jsonR2i2094R3R42R5R69R6tgoR0y29:img%2Fui%2FdigitAnimation.pngR2i8529R3R4R5R70R6tgoR0y27:img%2Fui%2FelevatorBody.pngR2i744R3R4R5R71R6tgoR0y31:img%2Fui%2FelevatorCogwheel.pngR2i738R3R4R5R72R6tgoR0y26:img%2Fui%2FElevatorEnd.pngR2i640R3R4R5R73R6tgoR0y26:img%2Fui%2FelevatorTop.pngR2i237R3R4R5R74R6tgoR0y23:img%2Fui%2FelevLine.pngR2i2454R3R4R5R75R6tgoR0y25:img%2Fui%2FelevLine10.pngR2i3067R3R4R5R76R6tgoR0y24:img%2Fui%2FelevLine2.pngR2i1975R3R4R5R77R6tgoR0y24:img%2Fui%2FelevLine3.pngR2i3749R3R4R5R78R6tgoR0y24:img%2Fui%2FelevLine4.pngR2i3854R3R4R5R79R6tgoR0y24:img%2Fui%2FelevLine5.pngR2i3211R3R4R5R80R6tgoR0y24:img%2Fui%2FelevLine6.pngR2i3235R3R4R5R81R6tgoR0y24:img%2Fui%2FelevLine7.pngR2i3415R3R4R5R82R6tgoR0y24:img%2Fui%2FelevLine8.pngR2i3642R3R4R5R83R6tgoR0y24:img%2Fui%2FelevLine9.pngR2i3287R3R4R5R84R6tgoR0y28:img%2Fui%2FgameCompleted.pngR2i35143R3R4R5R85R6tgoR0y32:img%2Fui%2Fgfx_gameMenuPanel.pngR2i892R3R4R5R86R6tgoR0y27:img%2Fui%2FgreenLightB.jsonR2i4105R3R42R5R87R6tgoR0y35:img%2Fui%2FgreenLightBAnimation.pngR2i904R3R4R5R88R6tgoR0y26:img%2Fui%2FHalfShadow.jsonR2i2189R3R42R5R89R6tgoR0y34:img%2Fui%2FHalfShadowAnimation.pngR2i1415R3R4R5R90R6tgoR0y20:img%2Fui%2FLamp.jsonR2i570R3R42R5R91R6tgoR0y28:img%2Fui%2FLampAnimation.pngR2i3671R3R4R5R92R6tgoR0y24:img%2Fui%2Flamp_over.pngR2i249R3R4R5R93R6tgoR0y21:img%2Fui%2FLEVEL.jsonR2i5988R3R42R5R94R6tgoR0y29:img%2Fui%2FLEVELAnimation.pngR2i40626R3R4R5R95R6tgoR0y24:img%2Fui%2FLevelBtn.jsonR2i757R3R42R5R96R6tgoR0y32:img%2Fui%2FLevelBtnAnimation.pngR2i5233R3R4R5R97R6tgoR0y29:img%2Fui%2FlevelCompleted.pngR2i36346R3R4R5R98R6tgoR0y28:img%2Fui%2FlevelNumbers.jsonR2i12112R3R42R5R99R6tgoR0y36:img%2Fui%2FlevelNumbersAnimation.pngR2i10282R3R4R5R100R6tgoR0y22:img%2Fui%2Flevels.jsonR2i795R3R42R5R101R6tgoR0y30:img%2Fui%2FlevelsAnimation.pngR2i10927R3R4R5R102R6tgoR0y25:img%2Fui%2FlightBlue.jsonR2i8058R3R42R5R103R6tgoR0y33:img%2Fui%2FlightBlueAnimation.pngR2i14068R3R4R5R104R6tgoR0y26:img%2Fui%2FlightGreen.jsonR2i8095R3R42R5R105R6tgoR0y34:img%2Fui%2FlightGreenAnimation.pngR2i14039R3R4R5R106R6tgoR0y27:img%2Fui%2FlightOrange.jsonR2i8146R3R42R5R107R6tgoR0y35:img%2Fui%2FlightOrangeAnimation.pngR2i14625R3R4R5R108R6tgoR0y21:img%2Fui%2Flmenu.jsonR2i794R3R42R5R109R6tgoR0y29:img%2Fui%2FlmenuAnimation.pngR2i10927R3R4R5R110R6tgoR0y33:img%2Fui%2FLoad%20the%20truck.pngR2i1691R3R4R5R111R6tgoR0y25:img%2Fui%2FLoaderBody.pngR2i1238R3R4R5R112R6tgoR0y19:img%2Fui%2Flock.pngR2i1313R3R4R5R113R6tgoR0y21:img%2Fui%2FMagnet.pngR2i809R3R4R5R114R6tgoR0y23:img%2Fui%2Fmagnetic.pngR2i125R3R4R5R115R6tgoR0y27:img%2Fui%2FmagneticBeam.pngR2i75R3R4R5R116R6tgoR0y19:img%2Fui%2Fmenu.pngR2i287706R3R4R5R117R6tgoR0y24:img%2Fui%2FmenuMaxi.jsonR2i949R3R42R5R118R6tgoR0y32:img%2Fui%2FmenuMaxiAnimation.pngR2i2125R3R4R5R119R6tgoR0y24:img%2Fui%2FminingImg.pngR2i3358R3R4R5R120R6tgoR0y30:img%2Fui%2FMiningTruckBody.pngR2i1944R3R4R5R121R6tgoR0y31:img%2Fui%2FMiningTruckWheel.pngR2i1065R3R4R5R122R6tgoR0y20:img%2Fui%2FMount.pngR2i563R3R4R5R123R6tgoR0y25:img%2Fui%2FmusicMini.jsonR2i958R3R42R5R124R6tgoR0y33:img%2Fui%2FmusicMiniAnimation.pngR2i2542R3R4R5R125R6tgoR0y24:img%2Fui%2FnearTruck.pngR2i41842R3R4R5R126R6tgoR0y20:img%2Fui%2Fnext.jsonR2i790R3R42R5R127R6tgoR0y28:img%2Fui%2FnextAnimation.pngR2i10354R3R4R5R128R6tgoR0y28:img%2Fui%2ForangeLightB.jsonR2i4126R3R42R5R129R6tgoR0y36:img%2Fui%2ForangeLightBAnimation.pngR2i659R3R4R5R130R6tgoR0y24:img%2Fui%2FoutLight.jsonR2i6033R3R42R5R131R6tgoR0y32:img%2Fui%2FoutLightAnimation.pngR2i15687R3R4R5R132R6tgoR0y20:img%2Fui%2Fplay.jsonR2i787R3R42R5R133R6tgoR0y28:img%2Fui%2FplayAnimation.pngR2i10370R3R4R5R134R6tgoR0y23:img%2Fui%2Fpreloder.pngR2i85847R3R4R5R135R6tgoR0y22:img%2Fui%2Freplay.jsonR2i783R3R42R5R136R6tgoR0y30:img%2Fui%2FreplayAnimation.pngR2i9566R3R4R5R137R6tgoR0y19:img%2Fui%2Fresh.pngR2i1765R3R4R5R138R6tgoR0y27:img%2Fui%2FrestartMaxi.jsonR2i980R3R42R5R139R6tgoR0y35:img%2Fui%2FrestartMaxiAnimation.pngR2i2100R3R4R5R140R6tgoR0y34:img%2Fui%2FrightLoaderCogwheel.pngR2i631R3R4R5R141R6tgoR0y22:img%2Fui%2Fscript1.pngR2i5768R3R4R5R142R6tgoR0y21:img%2Fui%2FSeesaw.pngR2i581R3R4R5R143R6tgoR0y22:img%2Fui%2FShadow.jsonR2i2155R3R42R5R144R6tgoR0y30:img%2Fui%2FShadowAnimation.pngR2i832R3R4R5R145R6tgoR0y21:img%2Fui%2Fshrink.pngR2i478R3R4R5R146R6tgoR0y25:img%2Fui%2FsoundMini.jsonR2i958R3R42R5R147R6tgoR0y33:img%2Fui%2FsoundMiniAnimation.pngR2i2582R3R4R5R148R6tgoR0y26:img%2Fui%2FSquareBox1.jsonR2i770R3R42R5R149R6tgoR0y34:img%2Fui%2FSquareBox1Animation.pngR2i1301R3R4R5R150R6tgoR0y26:img%2Fui%2FSquareBox2.jsonR2i770R3R42R5R151R6tgoR0y34:img%2Fui%2FSquareBox2Animation.pngR2i1146R3R4R5R152R6tgoR0y26:img%2Fui%2FSquareBox3.jsonR2i770R3R42R5R153R6tgoR0y34:img%2Fui%2FSquareBox3Animation.pngR2i732R3R4R5R154R6tgoR0y20:img%2Fui%2Fstar.jsonR2i946R3R42R5R155R6tgoR0y28:img%2Fui%2FstarAnimation.pngR2i2609R3R4R5R156R6tgoR0y20:img%2Fui%2Fstarr.pngR2i425R3R4R5R157R6tgoR0y23:img%2Fui%2FTFXBoom.jsonR2i9597R3R42R5R158R6tgoR0y31:img%2Fui%2FTFXBoomAnimation.pngR2i226087R3R4R5R159R6tgoR0y24:img%2Fui%2FTFXSpark.jsonR2i8937R3R42R5R160R6tgoR0y32:img%2Fui%2FTFXSparkAnimation.pngR2i19049R3R4R5R161R6tgoR0y25:img%2Fui%2FTFXSparkL.jsonR2i8978R3R42R5R162R6tgoR0y33:img%2Fui%2FTFXSparkLAnimation.pngR2i18840R3R4R5R163R6tgoR0y27:img%2Fui%2FThinLongDoor.pngR2i325R3R4R5R164R6tgoR0y28:img%2Fui%2FThinShortDoor.pngR2i283R3R4R5R165R6tgoR0y19:img%2Fui%2Ftime.pngR2i2550R3R4R5R166R6tgoR0y20:img%2Fui%2Ftitle.pngR2i51032R3R4R5R167R6tgoR0y24:img%2Fui%2FTO%20JUMP.pngR2i2440R3R4R5R168R6tgoR0y27:img%2Fui%2FTO%20RESTART.pngR2i4068R3R4R5R169R6tgoR0y20:img%2Fui%2Ftotal.pngR2i7996R3R4R5R170R6tgoR0y28:img%2Fui%2FTPFXLighting.jsonR2i7661R3R42R5R171R6tgoR0y36:img%2Fui%2FTPFXLightingAnimation.pngR2i73021R3R4R5R172R6tgoR0y32:img%2Fui%2FTransformerVault.jsonR2i759R3R42R5R173R6tgoR0y40:img%2Fui%2FTransformerVaultAnimation.pngR2i4668R3R4R5R174R6tgoR0y30:img%2Fui%2FTransporterBase.pngR2i2202R3R4R5R175R6tgoR0y30:img%2Fui%2FTransporterRoll.pngR2i1158R3R4R5R176R6tgoR0y25:img%2Fui%2FTruckBody2.pngR2i7538R3R4R5R177R6tgoR0y30:img%2Fui%2FTruckStopSignal.pngR2i717R3R4R5R178R6tgoR0y24:img%2Fui%2FTruckWeel.pngR2i2371R3R4R5R179R6tgoR0y28:img%2Fui%2FVerticalBox1.jsonR2i770R3R42R5R180R6tgoR0y36:img%2Fui%2FVerticalBox1Animation.pngR2i3289R3R4R5R181R6tgoR0y28:img%2Fui%2FVerticalBox2.jsonR2i788R3R42R5R182R6tgoR0y36:img%2Fui%2FVerticalBox2Animation.pngR2i2896R3R4R5R183R6tgoR0y28:img%2Fui%2FVerticalBox3.jsonR2i788R3R42R5R184R6tgoR0y36:img%2Fui%2FVerticalBox3Animation.pngR2i2928R3R4R5R185R6tgoR0y28:img%2Fui%2FVerticalBox4.jsonR2i782R3R42R5R186R6tgoR0y36:img%2Fui%2FVerticalBox4Animation.pngR2i2715R3R4R5R187R6tgoR0y22:img%2Fui%2Fwarning.pngR2i3250R3R4R5R188R6tgoR0y20:img%2Fui%2FWheel.pngR2i1318R3R4R5R189R6tgoR0y26:img%2Fui%2FWheelSensor.pngR2i124R3R4R5R190R6tgoR0y27:img%2Fui%2FWideLongDoor.pngR2i1139R3R4R5R191R6tgoR0y28:img%2Fui%2FWideShortDoor.pngR2i771R3R4R5R192R6tgoR0y41:json%2Fcommon%2Fgfx_ftc_lvl17_btnGoo.jsonR2i998R3R42R5R193R6tgoR0y49:json%2Fcommon%2Fgfx_ftc_lvl17_btnGooAnimation.pngR2i2210R3R4R5R194R6tgoR0y42:json%2Fcommon%2Fgfx_ftc_lvl17_BtnLeft.jsonR2i1002R3R42R5R195R6tgoR0y50:json%2Fcommon%2Fgfx_ftc_lvl17_BtnLeftAnimation.pngR2i1792R3R4R5R196R6tgoR0y43:json%2Fcommon%2Fgfx_ftc_lvl17_BtnRight.jsonR2i1007R3R42R5R197R6tgoR0y51:json%2Fcommon%2Fgfx_ftc_lvl17_BtnRightAnimation.pngR2i1835R3R4R5R198R6tgoR0y40:json%2Fcommon%2Fgfx_ftc_lvl17_BtnUp.jsonR2i992R3R42R5R199R6tgoR0y48:json%2Fcommon%2Fgfx_ftc_lvl17_BtnUpAnimation.pngR2i1859R3R4R5R200R6tgoR0y20:levels%2Flevel1.jsonR2i8702R3R42R5R201R6tgoR0y21:levels%2Flevel10.jsonR2i9765R3R42R5R202R6tgoR0y21:levels%2Flevel11.jsonR2i12646R3R42R5R203R6tgoR0y21:levels%2Flevel12.jsonR2i24038R3R42R5R204R6tgoR0y21:levels%2Flevel13.jsonR2i10623R3R42R5R205R6tgoR0y21:levels%2Flevel14.jsonR2i11029R3R42R5R206R6tgoR0y21:levels%2Flevel15.jsonR2i13742R3R42R5R207R6tgoR0y21:levels%2Flevel16.jsonR2i10221R3R42R5R208R6tgoR0y21:levels%2Flevel17.jsonR2i10264R3R42R5R209R6tgoR0y21:levels%2Flevel18.jsonR2i15336R3R42R5R210R6tgoR0y21:levels%2Flevel19.jsonR2i17206R3R42R5R211R6tgoR0y20:levels%2Flevel2.jsonR2i9342R3R42R5R212R6tgoR0y21:levels%2Flevel20.jsonR2i11618R3R42R5R213R6tgoR0y21:levels%2Flevel21.jsonR2i9295R3R42R5R214R6tgoR0y21:levels%2Flevel22.jsonR2i13365R3R42R5R215R6tgoR0y21:levels%2Flevel23.jsonR2i9907R3R42R5R216R6tgoR0y21:levels%2Flevel24.jsonR2i10459R3R42R5R217R6tgoR0y21:levels%2Flevel25.jsonR2i8497R3R42R5R218R6tgoR0y21:levels%2Flevel26.jsonR2i10612R3R42R5R219R6tgoR0y21:levels%2Flevel27.jsonR2i17680R3R42R5R220R6tgoR0y21:levels%2Flevel28.jsonR2i12617R3R42R5R221R6tgoR0y21:levels%2Flevel29.jsonR2i9227R3R42R5R222R6tgoR0y20:levels%2Flevel3.jsonR2i14883R3R42R5R223R6tgoR0y21:levels%2Flevel30.jsonR2i18298R3R42R5R224R6tgoR0y20:levels%2Flevel4.jsonR2i12985R3R42R5R225R6tgoR0y20:levels%2Flevel5.jsonR2i13015R3R42R5R226R6tgoR0y20:levels%2Flevel6.jsonR2i8506R3R42R5R227R6tgoR0y20:levels%2Flevel7.jsonR2i13979R3R42R5R228R6tgoR0y20:levels%2Flevel8.jsonR2i12319R3R42R5R229R6tgoR0y20:levels%2Flevel9.jsonR2i10306R3R42R5R230R6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	manifest = lime_utils_AssetManifest.parse(data,rootPath);
	library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
Math.__name__ = ["Math"];
var MenuState = function(_par,i) {
	this.timerSplash = new openfl_utils_Timer(10,1);
	this._parent = null;
	this.lastTime = 0;
	openfl_display_Sprite.call(this);
	this._parent = _par;
	Storage.curSprite = this;
	Storage.menuState = this;
	this.preinit();
};
$hxClasses["MenuState"] = MenuState;
MenuState.__name__ = ["MenuState"];
MenuState.__super__ = openfl_display_Sprite;
MenuState.prototype = $extend(openfl_display_Sprite.prototype,{
	mainBackGround: null
	,splash: null
	,title: null
	,play: null
	,playState: null
	,lastTime: null
	,_parent: null
	,timerSplash: null
	,mask1: null
	,mask2: null
	,mask3: null
	,mask4: null
	,preinit: function() {
		this.splash = Storage.initSpriteUI("menu");
		var _g = this.splash;
		_g.set_x(_g.get_x() + this.splash.get_width() / 2);
		var _g1 = this.splash;
		_g1.set_y(_g1.get_y() + this.splash.get_height() / 2);
		this.splash.update(1);
		this.addChild(this.splash);
		this.timerSplash.addEventListener("timerComplete",$bind(this,this.init));
		if(Storage.checkUrl(["coolmath-games.com","edit.coolmath-games.com","stage.coolmath-games.com","edit-stage.coolmath-games.com","dev.coolmath-games.com","bestphysics.com"])) {
			this.timerSplash.start();
		} else {
			this.timerSplash.start();
		}
	}
	,init: function(e) {
		this.timerSplash.removeEventListener("timerComplete",$bind(this,this.init));
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.mainBackGround = Storage.initSpriteUI("menu");
		var _g = this.mainBackGround;
		_g.set_x(_g.get_x() + this.mainBackGround.get_width() / 2);
		var _g1 = this.mainBackGround;
		_g1.set_y(_g1.get_y() + this.mainBackGround.get_height() / 2);
		this.mainBackGround.set_cacheAsBitmap(true);
		this.addChild(this.mainBackGround);
		this.removeChild(this.splash);
		this.play = Storage.initAnimation("play","ui");
		this.play.set_x(350);
		this.play.set_y(440);
		this.play.showBehavior("out");
		this.addChild(this.play);
		this.play.set_buttonMode(true);
		this.play.addEventListener("mouseDown",$bind(this,this.goToPlayBefore));
		this.play.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.play.addEventListener("mouseOut",$bind(this,this.outMouse));
		openfl_Lib.get_current().stage.removeEventListener("resize",$bind(this,this.resizeStage));
		openfl_Lib.get_current().stage.addEventListener("resize",$bind(this,this.resizeStage));
		this.title = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/title.png"));
		this.addChild(this.title);
		this.title.set_x(176);
		this.title.set_y(110);
		this.addMask();
		haxe_Log.trace("afterinit",{ fileName : "MenuState.hx", lineNumber : 194, className : "MenuState", methodName : "init"});
	}
	,addMask: function() {
		var scaleXX = 0;
		var scaleYY = 0;
		if(Storage.maskesAddedM == true) {
			var m1 = Storage.theMenu.getChildByName("mask1");
			var m2 = Storage.theMenu.getChildByName("mask2");
			var m3 = Storage.theMenu.getChildByName("mask3");
			var m4 = Storage.theMenu.getChildByName("mask4");
			if(m1 != null) {
				this.removeChild(js_Boot.__cast(m1 , openfl_display_Bitmap));
			}
			if(m2 != null) {
				this.removeChild(js_Boot.__cast(m2 , openfl_display_Bitmap));
			}
			if(m3 != null) {
				this.removeChild(js_Boot.__cast(m3 , openfl_display_Bitmap));
			}
			if(m4 != null) {
				this.removeChild(js_Boot.__cast(m3 , openfl_display_Bitmap));
			}
			Storage.maskesAddedM = false;
		}
		this.mask1 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
		this.mask2 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
		this.mask3 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
		this.mask4 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
		this.mask1.set_name("mask1");
		this.mask2.set_name("mask2");
		this.mask3.set_name("mask3");
		this.mask4.set_name("mask4");
		if(openfl_Lib.get_current().stage.stageHeight > openfl_Lib.get_current().stage.stageWidth) {
			this.mask1.set_width(700);
			this.mask1.set_height(Storage.offSetY / Storage.W);
			this.mask1.set_y(-Storage.offSetY / Storage.W);
			this.mask1.set_x(0);
			this.mask2.set_width(700);
			this.mask2.set_height(Storage.offSetY / Storage.W);
			this.mask2.set_y(500);
			this.mask2.set_x(0);
			this.mask3.set_width(400);
			this.mask3.set_height(500);
			this.mask3.set_y(0);
			this.mask3.set_x(-400);
			this.mask4.set_width(500);
			this.mask4.set_height(500);
			this.mask4.set_y(0);
			this.mask4.set_x(700);
		} else {
			this.mask1.set_width(Storage.offSetX / Storage.W);
			this.mask1.set_height(500);
			this.mask1.set_y(0);
			this.mask1.set_x(-Storage.offSetX / Storage.W);
			this.mask2.set_width(Storage.offSetX / Storage.W);
			this.mask2.set_height(500);
			this.mask2.set_x(700);
			this.mask2.set_y(0);
			this.mask3.set_width(700);
			this.mask3.set_height(400);
			this.mask3.set_y(-400);
			this.mask3.set_x(0);
			this.mask4.set_width(700);
			this.mask4.set_height(400);
			this.mask4.set_y(500);
			this.mask4.set_x(0);
		}
		this.addChild(this.mask1);
		this.addChild(this.mask2);
		this.addChild(this.mask3);
		this.addChild(this.mask4);
		Storage.maskesAddedM = true;
	}
	,resizeStage: function(e) {
		Storage.setXY(Std["int"](openfl_Lib.get_current().stage.stageWidth),Std["int"](openfl_Lib.get_current().stage.stageHeight));
		Storage.resizeGame();
		Storage.resizeStage(Storage.theMenu);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
		SoundManager.play("SoundRollver");
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
	}
	,clearState: function() {
		this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
		while(Storage.theGame.get_numChildren() > 0) Storage.theGame.removeChildAt(0);
		Storage.previousLevel = this;
		Storage.theMenu.set_alpha(0.01);
		Storage.theGame.set_alpha(1);
		Storage.theMenu.mouseEnabled = false;
		Storage.theMenu.mouseChildren = false;
		Storage.theGame.mouseEnabled = true;
		Storage.theGame.mouseChildren = true;
	}
	,goToPlayBefore: function(e) {
		this.goToPlay();
	}
	,goToPlay: function() {
		haxe_Log.trace("play",{ fileName : "MenuState.hx", lineNumber : 412, className : "MenuState", methodName : "goToPlay"});
		this.clearState();
		this.playState = new IconsState(this._parent);
		Storage.maskesAddedM = false;
		SoundManager.play("SoundGameButonsClick");
		Storage.curSprite = this.playState;
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.blackScreenTween(this.playState);
		if(Storage.loopInited == false) {
			SoundManager.play("SoundGameMusic");
			Storage.loopInited = true;
		}
	}
	,onEnterFrame: function(e) {
		var delta = openfl_Lib.getTimer() - this.lastTime;
		this.mainBackGround.update(delta);
		this.play.update(delta);
		this.play.update(delta);
		this.lastTime = openfl_Lib.getTimer();
	}
	,__class__: MenuState
});
var PlayState = function(_par,_cLevel) {
	this.dataFromJsonForParsing = [];
	this.stars = null;
	this.scoreArray = [null,null,null,null];
	this.timeA = null;
	this.upKey = false;
	this.downKey = false;
	this.rightKey = false;
	this.leftKey = false;
	this.waitTimer = new openfl_utils_Timer(1000,0);
	this.doorTimer = new openfl_utils_Timer(1000,0);
	this.endTimer = new openfl_utils_Timer(2000,0);
	this.stopwatchTimer = new openfl_utils_Timer(1000,0);
	this.boomTimer = new openfl_utils_Timer(60,0);
	this.rollsCollisionMask = -11;
	this.rollsCollisionGroup = 10;
	this.elevatorCollisionMask = -2;
	this.elevatorCollisionGroup = 3;
	this.objectsCollisionMask = -1;
	this.objectsCollisionGroup = 4;
	this.loaderCollisionMask = -3;
	this.loaderCollisionGroup = 2;
	this.constraintType = new nape_callbacks_CbType();
	this.loaderType = new nape_callbacks_CbType();
	this.elevatorType = new nape_callbacks_CbType();
	this.boxType = new nape_callbacks_CbType();
	this.wallType = new nape_callbacks_CbType();
	this.loaderSensorType = new nape_callbacks_CbType();
	this.fracArray = [];
	this.oPieces = [];
	this.boxArray = [];
	this.loaderBoom = false;
	this.bombForceDefault = 0;
	this.scores = new StarsAndScores();
	this.boomSprite = [];
	this.bombZone = 75;
	this.gameMovieClips = [];
	this.shadows = [];
	this.lamps = [];
	this.transporters = [];
	this.elevatorsCons = [];
	this.elevatorsEnd = [];
	this.elevators = [];
	this.doorsCons = [];
	this.doors = [];
	this.transformators = [];
	this.coolers = [];
	this.buttons = [];
	this.craneMagnetInCargo = false;
	this.loaderInCargo = false;
	this.cargoBox = [];
	this.loaderSpeed = 6;
	this.loaderWithBox = false;
	this.loaderJump = false;
	this.craneMagnetActivate = false;
	this.magnetActivate = false;
	this.trucks = [];
	this.currentControl = "loader";
	this.oldMousePosition = new nape_geom_Vec2(0,0);
	this.gameScreen = new openfl_display_Sprite();
	this._parent = null;
	this.timerBeforeStart = new openfl_utils_Timer(200,1);
	this.lastTime = 0;
	this.Score2 = new openfl_text_TextField();
	this.Score = new openfl_text_TextField();
	this.gravity = new nape_geom_Vec2(0,350);
	openfl_display_Sprite.call(this);
	this._parent = _par;
	this.cLevel = _cLevel;
	Storage.previousLevel = null;
	Storage.currentLevel = _cLevel;
	Storage.playState = this;
	Storage.space = new nape_space_Space(this.gravity);
	this.gameScreen = Storage.theGame;
	this.bombForceDefault = 3500 * this.bombZone / 2;
	Storage.curSprite = this._parent;
	haxe_Log.trace("before load",{ fileName : "PlayState.hx", lineNumber : 374, className : "PlayState", methodName : "new"});
	this.loadUI();
	haxe_Log.trace("aftre load",{ fileName : "PlayState.hx", lineNumber : 376, className : "PlayState", methodName : "new"});
	this.init();
	haxe_Log.trace("after init",{ fileName : "PlayState.hx", lineNumber : 382, className : "PlayState", methodName : "new"});
	if(Storage.checkUrl(["coolmath-games.com","edit.coolmath-games.com","stage.coolmath-games.com","edit-stage.coolmath-games.com","dev.coolmath-games.com","bestphysics.com"])) {
		if(parent.cmgGameEvent!=null){parent.cmgGameEvent('start',Storage.currentLevel);}
	}
};
$hxClasses["PlayState"] = PlayState;
PlayState.__name__ = ["PlayState"];
PlayState.__super__ = openfl_display_Sprite;
PlayState.prototype = $extend(openfl_display_Sprite.prototype,{
	handJoint: null
	,mainBackGround: null
	,back: null
	,gravity: null
	,Score: null
	,Score2: null
	,sound: null
	,menu: null
	,levels: null
	,restart: null
	,mainBackGround3: null
	,mask1: null
	,mask2: null
	,mask3: null
	,mask4: null
	,levelData: null
	,lastTime: null
	,cLevel: null
	,timerBeforeStart: null
	,_parent: null
	,gameScreen: null
	,oldMousePosition: null
	,currentLevelNumber: null
	,gameOver: null
	,currentControl: null
	,mx: null
	,my: null
	,truckLoaderBody: null
	,loaderLeftWheel: null
	,loaderRightWheel: null
	,tk1: null
	,tk2: null
	,magnet: null
	,mount: null
	,craneBody: null
	,craneMagnetBody: null
	,dxb: null
	,dyb: null
	,rastb: null
	,MiningBody: null
	,MiningLeftWheel: null
	,MiningRightWheel: null
	,wallBody: null
	,magnetJointPoint: null
	,magnetJointPoint2: null
	,pvLoaderSensor: null
	,clawDistance: null
	,lineJointLoaderLeftWheel: null
	,lineJointLoaderRightWheel: null
	,mountCons: null
	,trucks: null
	,currentTruck: null
	,magnetActivate: null
	,craneMagnetActivate: null
	,loaderJump: null
	,loaderWithBox: null
	,loaderSpeed: null
	,outLight: null
	,cargoBox: null
	,loaderInCargo: null
	,craneMagnetInCargo: null
	,cargoString: null
	,craneMagnetTouch: null
	,craneSensorLeftTouch: null
	,craneSensorRightTouch: null
	,craneBoxId: null
	,clinchCount: null
	,buttons: null
	,coolers: null
	,transformators: null
	,doors: null
	,doorsCons: null
	,elevators: null
	,elevatorsEnd: null
	,elevatorsCons: null
	,transporters: null
	,lamps: null
	,shadows: null
	,gameMovieClips: null
	,elevatorTimer1: null
	,elevatorTimer2: null
	,elevatorTimer3: null
	,elevatorForCheck: null
	,elevatorsMove: null
	,bombZone: null
	,boomSprite: null
	,scores: null
	,bombForceDefault: null
	,boomX: null
	,boomY: null
	,loaderBoom: null
	,boxArray: null
	,oPieces: null
	,fracArray: null
	,groundLoaderJoint: null
	,mouseJoint: null
	,mouseJoint2: null
	,magnetJoint: null
	,magnetJoint2: null
	,magnetJoint3: null
	,craneMagnetJoint: null
	,loaderSensorType: null
	,wallType: null
	,boxType: null
	,elevatorType: null
	,loaderType: null
	,constraintType: null
	,loaderCollisionGroup: null
	,loaderCollisionMask: null
	,objectsCollisionGroup: null
	,objectsCollisionMask: null
	,elevatorCollisionGroup: null
	,elevatorCollisionMask: null
	,rollsCollisionGroup: null
	,rollsCollisionMask: null
	,pastTime: null
	,boomTimer: null
	,stopwatchTimer: null
	,endTimer: null
	,doorTimer: null
	,waitTimer: null
	,boxListener: null
	,boxListenerEnd: null
	,elevatorLoaderListener: null
	,elevatorBoxesListener: null
	,loaderSensorListener: null
	,loaderSensorListener2: null
	,boxSensorListener: null
	,consListener: null
	,leftKey: null
	,rightKey: null
	,downKey: null
	,upKey: null
	,boxVelocity: null
	,leftBtn: null
	,rightBtn: null
	,upBtn: null
	,actBtn: null
	,timeA: null
	,scoreArray: null
	,stars: null
	,dataFromJsonForParsing: null
	,loadJsonDataWall: function(currentLevel) {
		this.levelData = tjson_TJSON.parse(openfl_utils_Assets.getText("levels/level" + Std.string(this.cLevel) + ".json"));
		var localPointArray = [];
		var worldPointArray = [];
		var curArrayLoc = [];
		var curArrayWorld = [];
		var bodyDataArray = [];
		var currentBodyArray = [];
		var currentLevelItemArray = this.levelData.data.stage.shape;
		var _g = 0;
		while(_g < currentLevelItemArray.length) {
			var curPolygon = currentLevelItemArray[_g];
			++_g;
			if(curPolygon.name == "verts") {
				var twoPointArrayLoc = Std.string(curPolygon.xy1).split(" : ");
				curArrayLoc = [];
				var _g1 = 0;
				while(_g1 < twoPointArrayLoc.length) {
					var s = twoPointArrayLoc[_g1];
					++_g1;
					var v = new nape_geom_Vec2(Std.parseFloat(s.split(",")[0]),Std.parseFloat(s.split(",")[1]));
					curArrayLoc.push(v);
				}
				var twoPointArrayWorld = Std.string(curPolygon.xy2).split(" : ");
				curArrayWorld = [];
				var _g11 = 0;
				while(_g11 < twoPointArrayWorld.length) {
					var s1 = twoPointArrayWorld[_g11];
					++_g11;
					var v1 = new nape_geom_Vec2(Std.parseFloat(s1.split(",")[0]),Std.parseFloat(s1.split(",")[1]));
					curArrayWorld.push(v1);
				}
				localPointArray.push(curArrayLoc);
				worldPointArray.push(curArrayWorld);
			} else {
				currentBodyArray.push(curPolygon.name);
				currentBodyArray.push(new nape_geom_Vec2(Std.parseFloat(curPolygon.x),Std.parseFloat(curPolygon.y)));
				currentBodyArray.push(curPolygon.text);
				currentBodyArray.push(curPolygon.level);
				if(curPolygon.Angle != null) {
					currentBodyArray.push(Storage.roundBy(100,Std.parseFloat(curPolygon.Angle)));
				} else {
					currentBodyArray.push(0);
				}
				currentBodyArray.push(curPolygon.Switch);
				currentBodyArray.push(curPolygon.OpenDirection);
				if(curPolygon.Closed == "true") {
					currentBodyArray.push(true);
				} else {
					currentBodyArray.push(false);
				}
				if(curPolygon.Enabled == "true") {
					currentBodyArray.push(true);
				} else {
					currentBodyArray.push(false);
				}
				if(curPolygon.truckPoints != null) {
					var strPoints;
					if(Std.string(curPolygon.truckPoints).charAt(Std.string(curPolygon.truckPoints).length - 1) == ":") {
						strPoints = HxOverrides.substr(Std.string(curPolygon.truckPoints),0,Std.string(curPolygon.truckPoints).length - 1);
					} else {
						strPoints = Std.string(curPolygon.truckPoints);
					}
					var twoPoint = strPoints.split(":");
					var curPointArray = [];
					var _g12 = 0;
					while(_g12 < twoPoint.length) {
						var s2 = twoPoint[_g12];
						++_g12;
						var vp = new nape_geom_Vec2(Std.parseFloat(s2.split(",")[0]),Std.parseFloat(s2.split(",")[1]));
						curPointArray.push(vp);
					}
					currentBodyArray.push(curPointArray);
				}
				currentBodyArray.push(curPolygon.alpha);
				var wh = new nape_geom_Vec2(0,0);
				var whStr = curPolygon.WidthHeight;
				if(whStr != null) {
					var awh = whStr.split(" ");
					wh.set_x(Std.parseFloat(awh[0]));
					wh.set_y(Std.parseFloat(awh[1]));
					currentBodyArray.push(wh);
				} else {
					currentBodyArray.push(null);
				}
				currentBodyArray.push(curPolygon.Activate);
				if(curPolygon.AutoChange == "false") {
					currentBodyArray.push(false);
				} else {
					currentBodyArray.push(true);
				}
				currentBodyArray.push(Std.string(curPolygon.End));
				currentBodyArray.push(curPolygon.EndPoint);
				currentBodyArray.push(Std.parseFloat(curPolygon.Speed));
				currentBodyArray.push(Std.parseFloat(curPolygon.Try));
				currentBodyArray.push(Std.parseFloat(curPolygon.Start));
				currentBodyArray.push(Std.parseFloat(curPolygon.StopTime));
				currentBodyArray.push(curPolygon.ChangeDirection);
				currentBodyArray.push(curPolygon.ename);
				if(curPolygon.mtPoints != null) {
					var strPoints1;
					if(Std.string(curPolygon.mtPoints).charAt(Std.string(curPolygon.mtPoints).length - 1) == ":") {
						strPoints1 = HxOverrides.substr(Std.string(curPolygon.mtPoints),0,Std.string(curPolygon.mtPoints).length - 1);
					} else {
						strPoints1 = Std.string(curPolygon.mtPoints);
					}
					var twoPoint1 = strPoints1.split(":");
					var curPointArray1 = [];
					var _g13 = 0;
					while(_g13 < twoPoint1.length) {
						var s3 = twoPoint1[_g13];
						++_g13;
						var vp1 = new nape_geom_Vec2(Std.parseFloat(s3.split(",")[0]),Std.parseFloat(s3.split(",")[1]));
						curPointArray1.push(vp1);
					}
					currentBodyArray.push(curPointArray1);
				} else {
					currentBodyArray.push(null);
				}
				if(curPolygon.transPoint != null) {
					var strPoints2;
					if(Std.string(curPolygon.transPoint).charAt(Std.string(curPolygon.transPoint).length - 1) == ":") {
						strPoints2 = HxOverrides.substr(Std.string(curPolygon.transPoint),0,Std.string(curPolygon.transPoint).length - 1);
					} else {
						strPoints2 = Std.string(curPolygon.transPoint);
					}
					var twoPoint2 = strPoints2.split(":");
					var curPointArray2 = [];
					var _g14 = 0;
					while(_g14 < twoPoint2.length) {
						var s4 = twoPoint2[_g14];
						++_g14;
						var vp2 = new nape_geom_Vec2(Std.parseFloat(s4.split(",")[0]),Std.parseFloat(s4.split(",")[1]));
						curPointArray2.push(vp2);
					}
					currentBodyArray.push(curPointArray2);
				} else {
					currentBodyArray.push(null);
				}
				currentBodyArray.push(curPolygon.Direction);
				currentBodyArray.push(curPolygon.Broken);
				bodyDataArray.push(currentBodyArray);
				currentBodyArray = [];
			}
		}
		this.wallBody = this.createWallBody(worldPointArray);
		this.wallBody.set_space(Storage.space);
		this.wallBody.get_cbTypes().add(this.wallType);
		return bodyDataArray;
	}
	,createWallBody: function(worldPointArray) {
		var body = new nape_phys_Body(nape_phys_BodyType.get_STATIC());
		var _g = 0;
		while(_g < worldPointArray.length) {
			var a = worldPointArray[_g];
			++_g;
			var polygon = new nape_shape_Polygon(a);
			body.get_shapes().add(polygon);
		}
		return body;
	}
	,init: function() {
		haxe_Log.trace("start oo",{ fileName : "PlayState.hx", lineNumber : 633, className : "PlayState", methodName : "init"});
		this.dataFromJsonForParsing = this.loadJsonDataWall(Storage.currentLevel);
		var _g = Storage.currentLevel;
		switch(_g) {
		case 7:
			Storage.addKoef = 0.84;
			break;
		case 18:
			Storage.addKoef = 10;
			Storage.addKoef2 = 0;
			break;
		default:
			Storage.addKoef = 0;
			Storage.addKoef2 = 0;
		}
		this.createLevel(1);
		this.handJoint = new nape_constraint_PivotJoint(Storage.space.get_world(),null,nape_geom_Vec2.weak(),nape_geom_Vec2.weak());
		Storage.handJoint = this.handJoint;
		this.handJoint.set_space(Storage.space);
		this.handJoint.set_active(false);
		this.handJoint.set_stiff(false);
		Storage.initLevel(this);
		openfl_Lib.get_current().stage.addEventListener("resize",$bind(this,this.resizeStage));
		this.timerBeforeStart.start();
		this.timerBeforeStart.addEventListener("timerComplete",$bind(this,this.startTheGame));
		Storage.run = true;
		this.loadButtonPanel();
		Storage.resizeGame();
		SoundManager.setLevelSounds(Storage.currentLevel);
		this.addMask();
	}
	,createLevel: function(levelNumber,from) {
		if(from == null) {
			from = "buttons";
		}
		var gameElements = null;
		var elementX = 0;
		var elementY = 0;
		var _g1 = 0;
		var _g = this.trucks.length;
		while(_g1 < _g) {
			var tri = _g1++;
			this.trucks[tri].cargoLoad = false;
		}
		this.clawDistance = 0;
		this.loaderInCargo = false;
		this.craneMagnetInCargo = false;
		this.craneMagnetTouch = false;
		this.craneSensorRightTouch = false;
		this.craneSensorLeftTouch = false;
		this.currentLevelNumber = levelNumber;
		this.MiningBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
		this.MiningBody.graphic = Storage.initSpriteUI("MiningTruckWheel");
		this.MiningLeftWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
		this.MiningLeftWheel.get_shapes().add(new nape_shape_Circle(1,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,3.5,3.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
		this.MiningLeftWheel.graphic = Storage.initSpriteUI("MiningTruckWheel");
		this.MiningRightWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
		this.MiningRightWheel.get_shapes().add(new nape_shape_Circle(1,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,3.5,3.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
		this.MiningRightWheel.graphic = Storage.initSpriteUI("MiningTruckWheel");
		this.MiningRightWheel.graphic = Storage.initSpriteUI("MiningTruckWheel");
		this.clinchCount = 0;
		var mcName;
		var mcQ = this.dataFromJsonForParsing.length - 1;
		var curAnimSprite = null;
		var curText = "";
		var _g11 = 0;
		var _g2 = mcQ + 1;
		while(_g11 < _g2) {
			var i = _g11++;
			if(Storage.arrayWall[this.cLevel - 1] == mcQ + 2 - i) {
				this.gameScreen.addChild(this.back);
				haxe_Log.trace("The Wall",{ fileName : "PlayState.hx", lineNumber : 750, className : "PlayState", methodName : "createLevel"});
			}
			haxe_Log.trace(mcQ - i,{ fileName : "PlayState.hx", lineNumber : 754, className : "PlayState", methodName : "createLevel"});
			mcName = this.dataFromJsonForParsing[mcQ - i][0];
			haxe_Log.trace(mcName,{ fileName : "PlayState.hx", lineNumber : 756, className : "PlayState", methodName : "createLevel"});
			if(mcName == "Shape") {
				curText = this.dataFromJsonForParsing[mcQ - i][2];
				if(curText != "toDo") {
					curAnimSprite = Storage.initSpriteUI(curText);
					curAnimSprite.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()) + curAnimSprite.get_width() / 2);
					curAnimSprite.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()) + curAnimSprite.get_height() / 2);
					if(this.dataFromJsonForParsing[mcQ - i][4] != null) {
						curAnimSprite.set_rotation(Storage.roundBy(100,Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4])));
					}
					this.gameScreen.addChild(curAnimSprite);
				} else {
					haxe_Log.trace("toDo",{ fileName : "PlayState.hx", lineNumber : 773, className : "PlayState", methodName : "createLevel"});
				}
			}
			if(mcName == "StaticText") {
				curText = this.dataFromJsonForParsing[mcQ - i][2];
				if(curText != "toDo") {
					if(HxOverrides.substr(curText,0,5) == "LEVEL") {
						curAnimSprite = Storage.initAnimation("LEVEL","ui");
						curAnimSprite.showBehavior(Std.string(Storage.currentLevel - 1));
						curAnimSprite.update(1);
						curAnimSprite.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()) + curAnimSprite.get_width() / 2);
						curAnimSprite.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()) + curAnimSprite.get_height() / 2);
						curAnimSprite.update(1);
					} else {
						curAnimSprite = Storage.initSpriteUI(curText);
						curAnimSprite.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()) + curAnimSprite.get_width() / 2);
						curAnimSprite.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()) + curAnimSprite.get_height() / 2);
					}
					this.gameScreen.addChild(curAnimSprite);
				} else {
					haxe_Log.trace("toDo",{ fileName : "PlayState.hx", lineNumber : 800, className : "PlayState", methodName : "createLevel"});
				}
			}
			if(mcName == "MovieClip") {
				curText = this.dataFromJsonForParsing[mcQ - i][2];
				if(curText != "toDo") {
					curAnimSprite = Storage.initSpriteUI(curText);
					curAnimSprite.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x() + curAnimSprite.get_width() / 2));
					curAnimSprite.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y() + curAnimSprite.get_height() / 2));
					curAnimSprite.set_rotation(Storage.roundBy(100,Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4])));
					this.gameScreen.addChild(curAnimSprite);
				} else {
					haxe_Log.trace("toDo",{ fileName : "PlayState.hx", lineNumber : 823, className : "PlayState", methodName : "createLevel"});
				}
			}
			if(mcName == "LeaveTheTruck") {
				curText = "outLight";
				if(curText != "toDo") {
					this.outLight = Storage.initAnimation(curText,"ui");
					this.outLight.showBehavior("disable");
					this.outLight.update(1);
					this.outLight.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()) - this.outLight.get_width());
					this.outLight.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()) - this.outLight.get_height());
					this.gameScreen.addChild(this.outLight);
				} else {
					haxe_Log.trace("toDo",{ fileName : "PlayState.hx", lineNumber : 846, className : "PlayState", methodName : "createLevel"});
				}
			}
			if(mcName == "Seesaw") {
				var seesawBody;
				var mcSeesaw = Storage.initSpriteUI(mcName);
				mcSeesaw.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				mcSeesaw.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				seesawBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(mcSeesaw.get_x(),mcSeesaw.get_y()));
				seesawBody.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-mcSeesaw.get_width() * 0.5,-mcSeesaw.get_height() * 0.5,mcSeesaw.get_width(),mcSeesaw.get_height()),nape_phys_Material.wood(),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				seesawBody.graphic = mcSeesaw;
				seesawBody.align();
				seesawBody.get_cbTypes().add(this.wallType);
				seesawBody.get_userData().gameData = mcName;
				Storage.space.get_bodies().add(seesawBody);
				this.gameScreen.addChild(mcSeesaw);
				this.clinchCount++;
				var mcClinch = Storage.initSpriteUI("Clinch");
				mcSeesaw.addChild(mcClinch);
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y());
				var seesawJoint = new nape_constraint_PivotJoint(Storage.space.get_world(),seesawBody,Storage.space.get_world().worldPointToLocal(new nape_geom_Vec2(elementX,elementY)),seesawBody.worldPointToLocal(new nape_geom_Vec2(elementX,elementY)));
				seesawJoint.set_ignore(true);
				Storage.space.get_constraints().add(seesawJoint);
			}
			if(mcName == "WideLongDoor" || mcName == "ThinLongDoor" || mcName == "WideShortDoor" || mcName == "ThinShortDoor") {
				var angle = Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4]);
				var doorBody;
				var mcDoor = Storage.initSpriteUI(mcName);
				mcDoor.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				mcDoor.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				mcDoor.Switch = this.dataFromJsonForParsing[mcQ - i][5];
				mcDoor.Closed = this.dataFromJsonForParsing[mcQ - i][7];
				mcDoor.OpenDirection = this.dataFromJsonForParsing[mcQ - i][6];
				Storage.theGame.addChild(mcDoor);
				mcDoor.set_rotation(0);
				doorBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(mcDoor.get_x(),mcDoor.get_y()));
				var boxW = 0;
				var boxH = 0;
				switch(mcName) {
				case "ThinLongDoor":
					boxW = 9.95;
					boxH = 109.1;
					break;
				case "ThinShortDoor":
					boxW = 9.95;
					boxH = 54.9;
					break;
				case "WideLongDoor":
					boxW = 29.8;
					boxH = 109.35;
					break;
				case "WideShortDoor":
					boxW = 29.8;
					boxH = 54.7;
					break;
				default:
					boxW = Math.ceil(mcDoor.get_width() / 2);
					boxH = Math.ceil(mcDoor.get_height() / 2);
				}
				doorBody.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-boxW * 0.5,-boxH * 0.5,boxW,boxH),nape_phys_Material.steel(),new nape_dynamics_InteractionFilter(this.elevatorCollisionGroup,this.elevatorCollisionMask)));
				if(angle != 0) {
					doorBody.set_rotation(angle / PlayState.DEGREE);
					mcDoor.set_rotation(angle);
				}
				doorBody.graphic = mcDoor;
				doorBody.align();
				doorBody.get_cbTypes().add(this.wallType);
				doorBody.set_allowRotation(false);
				doorBody.get_userData().gameData = mcName;
				Storage.space.get_bodies().add(doorBody);
				this.doors.push(doorBody);
				var doorCons = new nape_constraint_WeldJoint(Storage.space.get_world(),doorBody,Storage.space.get_world().worldPointToLocal(new nape_geom_Vec2(doorBody.get_position().get_x(),doorBody.get_position().get_y())),doorBody.worldPointToLocal(new nape_geom_Vec2(doorBody.get_position().get_x(),doorBody.get_position().get_y())));
				doorCons.set_ignore(true);
				doorCons.set_stiff(true);
				doorCons.set_damping(8.2);
				Storage.space.get_constraints().add(doorCons);
				this.doorsCons.push(doorCons);
			}
			if(mcName == "Lamp") {
				var cLamp = Storage.initAnimation("Lamp","ui",true);
				this.lamps.push(cLamp);
				this.gameScreen.addChild(cLamp);
				cLamp.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				cLamp.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				cLamp.Activate = this.dataFromJsonForParsing[mcQ - i][11];
				cLamp.Enabled = this.dataFromJsonForParsing[mcQ - i][8];
				cLamp.set_rotation(Storage.roundBy(100,Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4])));
				if(cLamp.Enabled == true) {
					cLamp.showBehavior("enable");
				} else {
					cLamp.showBehavior("disable");
				}
			}
			if(mcName == "Shadow" || mcName == "HalfShadow") {
				var shadow = Storage.initAnimation(mcName,"ui",true);
				if(this.dataFromJsonForParsing[mcQ - i][10] != null) {
					shadow.set_scaleX(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][10] , nape_geom_Vec2)).get_x() / 100));
					shadow.set_scaleY(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][10] , nape_geom_Vec2)).get_y() / 100));
					haxe_Log.trace(shadow.get_scaleX(),{ fileName : "PlayState.hx", lineNumber : 985, className : "PlayState", methodName : "createLevel"});
					haxe_Log.trace(shadow.get_scaleY(),{ fileName : "PlayState.hx", lineNumber : 986, className : "PlayState", methodName : "createLevel"});
				}
				shadow.showBehavior("enable");
				this.shadows.push(shadow);
				this.gameScreen.addChild(shadow);
				shadow.Switch = this.dataFromJsonForParsing[mcQ - i][5];
				shadow.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x() + (js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][10] , nape_geom_Vec2)).get_x() / 2));
				shadow.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y() + (js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][10] , nape_geom_Vec2)).get_y() / 2));
				shadow.set_rotation(Storage.roundBy(100,Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4])));
				haxe_Log.trace(shadow.get_x(),{ fileName : "PlayState.hx", lineNumber : 995, className : "PlayState", methodName : "createLevel"});
				haxe_Log.trace(shadow.get_y(),{ fileName : "PlayState.hx", lineNumber : 996, className : "PlayState", methodName : "createLevel"});
			}
			if(mcName == "GreenButton" || mcName == "OrangeButton" || mcName == "BlueButton") {
				var cButton = new CButton(mcName,this.dataFromJsonForParsing[mcQ - i][5]);
				this.buttons.push(cButton);
				cButton.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				cButton.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				cButton.set_rotation(0);
				if(this.dataFromJsonForParsing[mcQ - i][4] != 0) {
					cButton.set_rotation(this.dataFromJsonForParsing[mcQ - i][4]);
				}
			}
			if(mcName == "TransformerVault") {
				var trans = new GameTransformator();
				gameElements = Storage.initAnimation("TransformerVault","ui");
				gameElements.showBehavior("enable");
				gameElements.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()) - 17);
				gameElements.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				trans.transGraphic = gameElements;
				this.transformators.push(trans);
				this.gameScreen.addChild(trans.transGraphic);
				this.transformators[this.transformators.length - 1].transSwitch = this.dataFromJsonForParsing[mcQ - i][5];
				if(this.dataFromJsonForParsing[mcQ - i][24] == "false") {
					this.transformators[this.transformators.length - 1].transBroken = false;
				} else {
					this.transformators[this.transformators.length - 1].transBroken = true;
				}
			}
			if(mcName == "ElevatorEnd") {
				var elevEnd = Storage.initSpriteUI("ElevatorEnd");
				elevEnd.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				elevEnd.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				elevEnd.set_name(this.dataFromJsonForParsing[mcQ - i][20]);
				this.elevatorsEnd.push(elevEnd);
				this.gameScreen.addChild(elevEnd);
			}
			if(mcName == "Cooler") {
				var cooler = Storage.initSpriteUI("coollerMain");
				var blade = Storage.initSpriteUI("blades");
				cooler.addChild(blade);
				cooler.blades = blade;
				var top = Storage.initSpriteUI("coollerTop");
				cooler.addChild(top);
				cooler.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				cooler.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				this.coolers.push(cooler);
			}
			if(mcName == "Elevator") {
				var elevatorBody;
				var mcElevator = Storage.initSpriteUI("elevatorBody");
				mcElevator.set_x(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x()));
				mcElevator.set_y(Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
				mcElevator.Enabled = this.dataFromJsonForParsing[mcQ - i][8];
				mcElevator.AutoChange = this.dataFromJsonForParsing[mcQ - i][12];
				mcElevator.End = this.dataFromJsonForParsing[mcQ - i][13];
				mcElevator.EndPoint = this.dataFromJsonForParsing[mcQ - i][14];
				mcElevator.Speed = this.dataFromJsonForParsing[mcQ - i][15];
				mcElevator.Try = this.dataFromJsonForParsing[mcQ - i][16];
				mcElevator.Start = this.dataFromJsonForParsing[mcQ - i][17];
				mcElevator.StopTime = this.dataFromJsonForParsing[mcQ - i][18];
				mcElevator.Activate = this.dataFromJsonForParsing[mcQ - i][11];
				mcElevator.ChangeDirection = this.dataFromJsonForParsing[mcQ - i][19];
				var mcElevatorW1 = Storage.initSpriteUI("elevatorCogwheel");
				mcElevatorW1.set_y(0);
				mcElevatorW1.set_x(-25);
				mcElevator.addChild(mcElevatorW1);
				mcElevator.w1 = mcElevatorW1;
				var mcElevatorW2 = Storage.initSpriteUI("elevatorCogwheel");
				mcElevatorW2.set_y(0);
				mcElevatorW2.set_x(24);
				mcElevator.addChild(mcElevatorW2);
				mcElevator.w2 = mcElevatorW2;
				var mcElevatorTop = Storage.initSpriteUI("elevatorTop");
				mcElevatorTop.set_y(-mcElevator.get_height() / 2 + 3);
				mcElevator.addChild(mcElevatorTop);
				elevatorBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(mcElevator.get_x(),mcElevator.get_y()));
				elevatorBody.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-mcElevator.get_width() * 0.5,-mcElevator.get_height() * 0.5,mcElevator.get_width(),mcElevator.get_height()),nape_phys_Material.steel(),new nape_dynamics_InteractionFilter(this.elevatorCollisionGroup,this.elevatorCollisionMask)));
				elevatorBody.graphic = mcElevator;
				elevatorBody.align();
				elevatorBody.get_cbTypes().add(this.elevatorType);
				elevatorBody.set_allowRotation(false);
				elevatorBody.get_userData().started = mcElevator.Enabled;
				var sparkL = Storage.initAnimation("TFXSparkL","ui");
				sparkL.showBehavior("disable");
				sparkL.set_y(20);
				sparkL.set_x(-54);
				mcElevator.addChild(sparkL);
				mcElevator.spark1 = sparkL;
				var sparkR = Storage.initAnimation("TFXSpark","ui");
				sparkR.showBehavior("disable");
				sparkR.set_y(20);
				sparkR.set_x(54);
				mcElevator.addChild(sparkR);
				mcElevator.spark2 = sparkR;
				if(mcElevator.Enabled && mcElevator.AutoChange) {
					elevatorBody.get_userData().moving = true;
				} else {
					elevatorBody.get_userData().moving = false;
				}
				Storage.space.get_bodies().add(elevatorBody);
				if(this.elevators.length == 0) {
					this.elevatorTimer1 = new openfl_utils_Timer(mcElevator.StopTime,0);
					this.elevatorTimer1.addEventListener("timer",$bind(this,this.elev1));
					this.elevatorTimer1.stop();
				}
				if(this.elevators.length == 1) {
					this.elevatorTimer2 = new openfl_utils_Timer(mcElevator.StopTime,0);
					this.elevatorTimer2.addEventListener("timer",$bind(this,this.elev2));
					this.elevatorTimer2.stop();
				}
				if(this.elevators.length == 2) {
					this.elevatorTimer3 = new openfl_utils_Timer(mcElevator.StopTime,0);
					this.elevatorTimer3.addEventListener("timer",$bind(this,this.elev3));
					this.elevatorTimer3.stop();
				}
				elevatorBody.get_userData().gameData = "elevator" + this.elevators.length;
				this.elevators.push(elevatorBody);
				var liftCons = new nape_constraint_WeldJoint(Storage.space.get_world(),elevatorBody,Storage.space.get_world().worldPointToLocal(new nape_geom_Vec2(elevatorBody.get_position().get_x(),elevatorBody.get_position().get_y())),elevatorBody.worldPointToLocal(new nape_geom_Vec2(elevatorBody.get_position().get_x(),elevatorBody.get_position().get_y())));
				liftCons.set_ignore(true);
				liftCons.set_stiff(false);
				liftCons.set_damping(9.3);
				Storage.space.get_constraints().add(liftCons);
				this.elevatorsCons.push(liftCons);
			}
			if(mcName == "Transporter") {
				var mcTransporter = Storage.initSpriteUI("TransporterBase");
				var transporterBody;
				var newTransporter = new TransporterLine();
				mcTransporter.Activate = this.dataFromJsonForParsing[mcQ - i][11];
				mcTransporter.Enabled = this.dataFromJsonForParsing[mcQ - i][8];
				mcTransporter.ChangeDirection = this.dataFromJsonForParsing[mcQ - i][19];
				mcTransporter.Direction = this.dataFromJsonForParsing[mcQ - i][23];
				mcTransporter.Speed = this.dataFromJsonForParsing[mcQ - i][15];
				var _g21 = 0;
				while(_g21 < 6) {
					var tr = _g21++;
					gameElements = Storage.initSpriteUI("TransporterRoll");
					elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][22][tr] , nape_geom_Vec2)).get_x());
					elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][22][tr] , nape_geom_Vec2)).get_y());
					this.gameScreen.addChild(gameElements);
					var rollBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
					rollBody.get_shapes().add(new nape_shape_Circle(gameElements.get_width() * 0.5,new nape_geom_Vec2(0,0),new nape_phys_Material(0.1,5.5,5.5,3.5),new nape_dynamics_InteractionFilter(this.rollsCollisionGroup,this.rollsCollisionMask)));
					rollBody.graphic = gameElements;
					rollBody.align();
					rollBody.get_cbTypes().add(this.wallType);
					Storage.space.get_bodies().add(rollBody);
					rollBody.get_userData().gameData = "rollBody";
					newTransporter.transporterRolls.push(rollBody);
				}
				var gameElements2 = Storage.initSpriteUI("TransporterBase");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][22][6] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][22][6] , nape_geom_Vec2)).get_y());
				gameElements2.set_x(elementX);
				gameElements2.set_y(elementY);
				transporterBody = new nape_phys_Body(nape_phys_BodyType.get_KINEMATIC(),new nape_geom_Vec2(elementX,elementY));
				transporterBody.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-gameElements2.get_width() * 0.5,-gameElements2.get_height() * 0.5,gameElements2.get_width(),gameElements2.get_height()),nape_phys_Material.steel()));
				gameElements2.Activate = mcTransporter.Activate;
				gameElements2.Enabled = mcTransporter.Enabled;
				gameElements2.ChangeDirection = mcTransporter.ChangeDirection;
				gameElements2.Direction = mcTransporter.Direction;
				gameElements2.Speed = mcTransporter.Speed;
				this.gameScreen.addChild(gameElements2);
				transporterBody.graphic = gameElements2;
				transporterBody.align();
				transporterBody.get_cbTypes().add(this.wallType);
				Storage.space.get_bodies().add(transporterBody);
				newTransporter.base = transporterBody;
				this.transporters.push(newTransporter);
				var jointPoint;
				var _g3 = 0;
				var _g22 = newTransporter.transporterRolls.length;
				while(_g3 < _g22) {
					var ri = _g3++;
					jointPoint = new nape_geom_Vec2(newTransporter.transporterRolls[ri].get_position().get_x(),newTransporter.transporterRolls[ri].get_position().get_y());
					var rollJoint = new nape_constraint_PivotJoint(transporterBody,newTransporter.transporterRolls[ri],transporterBody.worldPointToLocal(jointPoint),newTransporter.transporterRolls[ri].worldPointToLocal(jointPoint));
					rollJoint.set_ignore(true);
					Storage.space.get_constraints().add(rollJoint);
				}
			}
			if(HxOverrides.substr(mcName,0,mcName.length - 1) == "SquareBox" || HxOverrides.substr(mcName,0,mcName.length - 1) == "DangerBox" || HxOverrides.substr(mcName,0,mcName.length - 1) == "VerticalBox" || mcName == "BigBox") {
				var boxId = this.boxArray.length;
				var boxBody;
				var pin;
				var mcBox = null;
				if(HxOverrides.substr(mcName,0,mcName.length - 1) != "DangerBox") {
					mcBox = Storage.initAnimation(mcName,"ui",true);
					mcBox.showBehavior("0");
				} else {
					mcBox = Storage.initSpriteUI(mcName);
				}
				mcBox.set_rotation(Storage.roundBy(100,Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][4])));
				this.gameScreen.addChild(mcBox);
				var boxWeight;
				var boxFriction;
				if(HxOverrides.substr(mcName,0,mcName.length - 2) == "VerticalBox") {
					boxWeight = 0.01;
					boxFriction = 0.4;
				}
				if(mcName == "BigBox") {
					boxWeight = 0.4;
					boxFriction = 0.3;
				} else {
					boxWeight = 0.4;
					boxFriction = 0.4;
				}
				var boxW1 = 0;
				var boxH1 = 0;
				if(this.dataFromJsonForParsing[mcQ - i][9] == "1") {
					boxBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2((js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x(),(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y()));
					var _g23 = HxOverrides.substr(mcName,0,mcName.length - 1);
					switch(_g23) {
					case "BigBo":case "BigBox":
						boxW1 = 40;
						boxH1 = 40;
						break;
					case "DangerBo":case "DangerBox":case "SquareBox":case "SquareBox2":case "SquareBox3":case "SquareBox4":
						boxW1 = 20;
						boxH1 = 20;
						break;
					case "VerticalBox":
						boxW1 = 40;
						boxH1 = 20;
						break;
					default:
						boxW1 = Math.ceil(mcBox.get_width() / 2);
						boxH1 = Math.ceil(mcBox.get_height() / 2);
					}
					boxBody.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-boxW1,-boxH1,boxW1 * 2,boxH1 * 2),new nape_phys_Material(0.1,boxFriction,boxFriction,boxWeight),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
					var opiece;
					elementX = -6.65;
					elementY = -4.35;
					opiece = new nape_shape_Circle(1,new nape_geom_Vec2(elementX - 10,elementY - 10),new nape_phys_Material(0.1,5.5,5.5,0.01),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask));
					boxBody.get_shapes().add(opiece);
					this.oPieces.push(opiece);
					if(Storage.currentLevel == 7) {
						boxBody.set_allowRotation(false);
					}
					mcBox.BoxId = boxId;
					boxBody.graphic = mcBox;
					boxBody.graphicOffset.set_x(mcBox.get_width() / 2);
					boxBody.graphicOffset.set_y(mcBox.get_height() / 2);
					boxBody.align();
					boxBody.get_userData().boxId = boxId;
					Storage.space.get_bodies().add(boxBody);
					var tmp = HxOverrides.substr(mcName,0,mcName.length - 1);
					boxBody.get_userData().gameData = tmp;
					boxBody.get_userData().isCargo = false;
					boxBody.get_cbTypes().add(this.boxType);
					this.boxArray.push(boxBody);
				} else {
					mcBox.set_alpha(Std.parseFloat(this.dataFromJsonForParsing[mcQ - i][9]));
					mcBox.set_x((js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x());
					mcBox.set_y((js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y());
					this.cargoBox.push(mcBox);
					mcBox.showBehavior("1");
					mcBox.update(1);
				}
			}
			if(mcName == "MiningTruck") {
				var MiningTruckMC = Storage.initSpriteUI("MiningTruckBody");
				var jointWorldPointMT;
				var mcMiningTruck = Storage.initSpriteUI("MiningTruckBody");
				this.gameScreen.addChild(mcMiningTruck);
				var mtCoordinates = new nape_geom_Vec2List();
				var mtCoordinates2 = new nape_geom_Vec2List();
				var mtCoordinates3 = new nape_geom_Vec2List();
				var mtPos;
				var _g24 = 1;
				while(_g24 < 5) {
					var mtb = _g24++;
					mtPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][mtb - 1] , nape_geom_Vec2);
					mtCoordinates.push(mtPos);
				}
				var _g25 = 5;
				while(_g25 < 9) {
					var mtb2 = _g25++;
					mtPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][mtb2 - 1] , nape_geom_Vec2);
					mtCoordinates2.push(mtPos);
				}
				var _g26 = 9;
				while(_g26 < 13) {
					var mtb3 = _g26++;
					mtPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][mtb3 - 1] , nape_geom_Vec2);
					mtCoordinates3.push(mtPos);
				}
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][12] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][12] , nape_geom_Vec2)).get_y());
				this.MiningBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY - 3));
				this.MiningBody.get_shapes().add(new nape_shape_Polygon(mtCoordinates,new nape_phys_Material(0.4,0.2,0.38,0.7),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.MiningBody.get_shapes().add(new nape_shape_Polygon(mtCoordinates2,new nape_phys_Material(0.4,0.2,0.38,0.7),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.MiningBody.get_shapes().add(new nape_shape_Polygon(mtCoordinates3,new nape_phys_Material(0.4,0.2,0.38,0.7),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.MiningBody.graphic = mcMiningTruck;
				this.MiningBody.get_cbTypes().add(this.wallType);
				Storage.space.get_bodies().add(this.MiningBody);
				this.MiningBody.get_userData().gameData = "MiningTruckBody";
				gameElements = Storage.initSpriteUI("MiningTruckWheel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][13] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][13] , nape_geom_Vec2)).get_y());
				this.gameScreen.addChild(gameElements);
				this.MiningLeftWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.MiningLeftWheel.get_shapes().add(new nape_shape_Circle(gameElements.get_width() * 0.5 - 1,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,3.5,3.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.MiningLeftWheel.graphic = gameElements;
				this.MiningLeftWheel.align();
				Storage.space.get_bodies().add(this.MiningLeftWheel);
				this.MiningLeftWheel.get_userData().gameData = "MiningLeftWheel";
				jointWorldPointMT = new nape_geom_Vec2(elementX,elementY);
				var lineJointMiningLeftWheel = new nape_constraint_LineJoint(this.MiningBody,this.MiningLeftWheel,this.MiningBody.worldPointToLocal(jointWorldPointMT),new nape_geom_Vec2(),new nape_geom_Vec2(0,1),0,20);
				lineJointMiningLeftWheel.set_ignore(true);
				Storage.space.get_constraints().add(lineJointMiningLeftWheel);
				var _g27 = jointWorldPointMT;
				_g27.set_y(_g27.get_y() - 24);
				var DistanceJointMiningLeftWheel = new nape_constraint_DistanceJoint(this.MiningBody,this.MiningLeftWheel,this.MiningBody.worldPointToLocal(jointWorldPointMT),new nape_geom_Vec2(),24,26);
				DistanceJointMiningLeftWheel.set_stiff(false);
				DistanceJointMiningLeftWheel.set_maxForce(15001.0);
				DistanceJointMiningLeftWheel.set_frequency(5);
				DistanceJointMiningLeftWheel.set_damping(21.2);
				Storage.space.get_constraints().add(DistanceJointMiningLeftWheel);
				gameElements = Storage.initSpriteUI("MiningTruckWheel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][14] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][21][14] , nape_geom_Vec2)).get_y());
				this.gameScreen.addChild(gameElements);
				this.MiningRightWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.MiningRightWheel.get_shapes().add(new nape_shape_Circle(gameElements.get_width() * 0.5 - 1,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,3.5,3.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.MiningRightWheel.graphic = gameElements;
				this.MiningRightWheel.align();
				Storage.space.get_bodies().add(this.MiningRightWheel);
				this.MiningRightWheel.get_userData().gameData = "MiningRightWheel";
				jointWorldPointMT = new nape_geom_Vec2(elementX,elementY);
				var pivotJointMiningRightWheel = new nape_constraint_PivotJoint(this.MiningBody,this.MiningRightWheel,this.MiningBody.worldPointToLocal(jointWorldPointMT),new nape_geom_Vec2());
				pivotJointMiningRightWheel.set_ignore(true);
				Storage.space.get_constraints().add(pivotJointMiningRightWheel);
			}
			if(mcName == "TruckLoader") {
				var pivotJointWorldPoint;
				var jointWorldPoint;
				var loaderElementsWeigth = 0.1;
				var mcTruckLoaderBody = Storage.initSpriteUI("LoaderBody");
				this.gameScreen.addChild(mcTruckLoaderBody);
				var lCoordinates = new nape_geom_Vec2List();
				var lPos;
				var _g28 = 1;
				while(_g28 < 7) {
					var tr1 = _g28++;
					lPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][tr1 - 1] , nape_geom_Vec2);
					haxe_Log.trace(lPos,{ fileName : "PlayState.hx", lineNumber : 1613, className : "PlayState", methodName : "createLevel"});
					lCoordinates.push(lPos);
				}
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][6] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][6] , nape_geom_Vec2)).get_y());
				this.truckLoaderBody = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.truckLoaderBody.get_shapes().add(new nape_shape_Polygon(lCoordinates,new nape_phys_Material(0.4,0.1,0.1,0.2),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.truckLoaderBody.graphic = mcTruckLoaderBody;
				this.truckLoaderBody.align();
				this.truckLoaderBody.get_cbTypes().add(this.loaderType);
				Storage.space.get_bodies().add(this.truckLoaderBody);
				this.truckLoaderBody.get_userData().gameData = "truckLoaderBody";
				var loaderSensor = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				loaderSensor.get_shapes().add(new nape_shape_Circle(5,new nape_geom_Vec2(0,0),new nape_phys_Material(0.1,13.5,13.5,0.1),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				loaderSensor.get_cbTypes().add(this.loaderSensorType);
				loaderSensor.align();
				loaderSensor.set_gravMass(0.02);
				Storage.space.get_bodies().add(loaderSensor);
				loaderSensor.get_userData().gameData = "loaderSensor";
				jointWorldPoint = new nape_geom_Vec2(elementX,elementY);
				this.pvLoaderSensor = new nape_constraint_PivotJoint(this.truckLoaderBody,loaderSensor,this.truckLoaderBody.worldPointToLocal(jointWorldPoint),new nape_geom_Vec2(0,-44));
				this.pvLoaderSensor.set_ignore(true);
				Storage.space.get_constraints().add(this.pvLoaderSensor);
				var jointWorldPoint1;
				gameElements = Storage.initSpriteUI("Wheel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][7] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][7] , nape_geom_Vec2)).get_y());
				var anSensor = Storage.initSpriteUI("WheelSensor");
				anSensor.set_x(0);
				anSensor.set_y(0);
				gameElements.sensor = anSensor;
				gameElements.addChild(anSensor);
				anSensor.set_alpha(0.01);
				this.gameScreen.addChild(gameElements);
				this.loaderLeftWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.loaderLeftWheel.get_shapes().add(new nape_shape_Circle(20.85,new nape_geom_Vec2(0,0),new nape_phys_Material(0.1,5.5,5.5,3.5),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.loaderLeftWheel.graphic = gameElements;
				this.loaderLeftWheel.align();
				this.loaderLeftWheel.get_cbTypes().add(this.loaderType);
				Storage.space.get_bodies().add(this.loaderLeftWheel);
				this.loaderLeftWheel.get_userData().gameData = "loaderLeftWheel";
				jointWorldPoint1 = new nape_geom_Vec2(elementX,elementY + 3);
				this.lineJointLoaderLeftWheel = new nape_constraint_LineJoint(this.truckLoaderBody,this.loaderLeftWheel,this.truckLoaderBody.worldPointToLocal(jointWorldPoint1),new nape_geom_Vec2(),new nape_geom_Vec2(0,2),0,4);
				this.lineJointLoaderLeftWheel.set_ignore(true);
				Storage.space.get_constraints().add(this.lineJointLoaderLeftWheel);
				gameElements = Storage.initSpriteUI("Wheel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][8] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][8] , nape_geom_Vec2)).get_y());
				this.gameScreen.addChild(gameElements);
				var anSensor1 = Storage.initSpriteUI("WheelSensor");
				anSensor1.set_x(0);
				anSensor1.set_y(0);
				gameElements.sensor = anSensor1;
				gameElements.addChild(anSensor1);
				anSensor1.set_alpha(0.01);
				this.loaderRightWheel = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.loaderRightWheel.get_shapes().add(new nape_shape_Circle(20.85,new nape_geom_Vec2(0,0),new nape_phys_Material(0.1,5.5,5.5,3.5),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.loaderRightWheel.graphic = gameElements;
				this.loaderRightWheel.align();
				this.loaderRightWheel.get_cbTypes().add(this.loaderType);
				Storage.space.get_bodies().add(this.loaderRightWheel);
				this.loaderLeftWheel.get_userData().gameData = "loaderRightWheel";
				jointWorldPoint1 = new nape_geom_Vec2(elementX,elementY + 3);
				this.lineJointLoaderRightWheel = new nape_constraint_LineJoint(this.truckLoaderBody,this.loaderRightWheel,this.truckLoaderBody.worldPointToLocal(jointWorldPoint1),new nape_geom_Vec2(),new nape_geom_Vec2(0,2),0,4);
				this.lineJointLoaderRightWheel.set_ignore(true);
				Storage.space.get_constraints().add(this.lineJointLoaderRightWheel);
				gameElements = Storage.initSpriteUI("Chain1");
				this.gameScreen.addChild(gameElements);
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][9] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][9] , nape_geom_Vec2)).get_y());
				this.tk1 = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.tk1.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-9.3,-24.325,18.6,48.65),new nape_phys_Material(0.1,0.5,0.5,loaderElementsWeigth),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.tk1.graphic = gameElements;
				this.tk1.align();
				this.tk1.get_cbTypes().add(this.loaderType);
				Storage.space.get_bodies().add(this.tk1);
				this.tk1.get_userData().gameData = "tk1";
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][10] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][10] , nape_geom_Vec2)).get_y());
				pivotJointWorldPoint = new nape_geom_Vec2(elementX,elementY);
				this.groundLoaderJoint = new nape_constraint_PivotJoint(Storage.space.get_world(),this.tk1,Storage.space.get_world().worldPointToLocal(pivotJointWorldPoint),this.tk1.worldPointToLocal(pivotJointWorldPoint));
				this.groundLoaderJoint.set_ignore(true);
				this.groundLoaderJoint.set_stiff(false);
				this.groundLoaderJoint.set_maxForce(25000);
				this.groundLoaderJoint.set_frequency(33.7);
				this.groundLoaderJoint.set_damping(0.3);
				this.groundLoaderJoint.get_cbTypes().add(this.constraintType);
				Storage.space.get_constraints().add(this.groundLoaderJoint);
				this.clawDistance += gameElements.get_height();
				gameElements = Storage.initSpriteUI("Mount");
				this.gameScreen.addChild(gameElements);
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][11] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][11] , nape_geom_Vec2)).get_y());
				this.mount = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.mount.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-11.3,-11.35,gameElements.get_width(),gameElements.get_height()),nape_phys_Material.steel(),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.mount.graphic = gameElements;
				this.mount.align();
				this.mount.set_allowRotation(false);
				Storage.space.get_bodies().add(this.mount);
				pivotJointWorldPoint = new nape_geom_Vec2(elementX,elementY);
				this.mountCons = new nape_constraint_PivotJoint(this.truckLoaderBody,this.mount,this.truckLoaderBody.worldPointToLocal(pivotJointWorldPoint),this.mount.worldPointToLocal(pivotJointWorldPoint));
				this.mountCons.set_ignore(true);
				Storage.space.get_constraints().add(this.mountCons);
				gameElements = Storage.initSpriteUI("Chain2");
				this.gameScreen.addChild(gameElements);
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][12] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][12] , nape_geom_Vec2)).get_y());
				this.tk2 = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.tk2.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-9.275,-26.175,18.55,52.35),new nape_phys_Material(0.1,0.5,0.5,loaderElementsWeigth),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.tk2.graphic = gameElements;
				this.tk2.align();
				this.tk2.get_cbTypes().add(this.loaderType);
				this.tk2.set_gravMass(-0.5);
				Storage.space.get_bodies().add(this.tk2);
				this.tk2.get_userData().gameData = "tk2";
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][13] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][13] , nape_geom_Vec2)).get_y());
				pivotJointWorldPoint = new nape_geom_Vec2(elementX,elementY);
				var tk2Cons = new nape_constraint_PivotJoint(this.tk1,this.tk2,this.tk1.worldPointToLocal(pivotJointWorldPoint),this.tk2.worldPointToLocal(pivotJointWorldPoint));
				tk2Cons.set_ignore(true);
				tk2Cons.set_breakUnderForce(true);
				Storage.space.get_constraints().add(tk2Cons);
				this.clawDistance += gameElements.get_height();
				gameElements = Storage.initSpriteUI("Magnet");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][14] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][14] , nape_geom_Vec2)).get_y());
				this.magnet = new nape_phys_Body(nape_phys_BodyType.get_DYNAMIC(),new nape_geom_Vec2(elementX,elementY));
				this.magnet.get_shapes().add(new nape_shape_Polygon(nape_shape_Polygon.rect(-16.45,-18.525,32.9,37.05),new nape_phys_Material(0.1,0.5,0.5,loaderElementsWeigth),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.magnet.get_shapes().add(this.magnetJointPoint = new nape_shape_Circle(2,new nape_geom_Vec2(-10,-15),nape_phys_Material.wood(),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				this.magnet.get_shapes().add(this.magnetJointPoint2 = new nape_shape_Circle(2,new nape_geom_Vec2(10,-15),nape_phys_Material.wood(),new nape_dynamics_InteractionFilter(this.loaderCollisionGroup,this.loaderCollisionMask)));
				var magn = Storage.initSpriteUI("Magnet");
				this.magnet.graphic = Storage.initSpriteUI("Magnet");
				var light = Storage.initAnimation("TPFXLighting","ui");
				var beam = Storage.initSpriteUI("magneticBeam");
				var magnetic1 = Storage.initSpriteUI("magnetic");
				var magnetic2 = Storage.initSpriteUI("magnetic");
				magnetic1.set_x(-12);
				magnetic1.set_y(-15.4);
				magnetic2.set_x(12);
				magnetic2.set_y(-15.4);
				this.magnet.graphic.beam = beam;
				this.magnet.graphic.magnetic1 = magnetic1;
				this.magnet.graphic.magnetic2 = magnetic2;
				this.magnet.graphic.addChild(magn);
				this.magnet.graphic.magnet = magn;
				light.showBehavior("disable");
				light.set_y(-36);
				light.set_visible(false);
				this.magnet.graphic.light = light;
				this.magnet.graphic.addChild(light);
				beam.set_y(-41.2);
				this.magnet.graphic.addChild(beam);
				this.magnet.graphic.addChild(magnetic1);
				this.magnet.graphic.addChild(magnetic2);
				this.magnet.graphic.mouseChildren = false;
				this.magnet.align();
				this.magnet.get_cbTypes().add(this.loaderType);
				this.magnet.set_gravMass(-0.5);
				Storage.space.get_bodies().add(this.magnet);
				this.magnet.get_userData().gameData = "magnet";
				this.gameScreen.addChild(this.magnet.graphic);
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][15] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][15] , nape_geom_Vec2)).get_y());
				pivotJointWorldPoint = new nape_geom_Vec2(elementX,elementY);
				var magnetCons = new nape_constraint_PivotJoint(this.tk2,this.magnet,this.tk2.worldPointToLocal(pivotJointWorldPoint),this.magnet.worldPointToLocal(pivotJointWorldPoint));
				magnetCons.set_ignore(true);
				magnetCons.set_breakUnderForce(true);
				Storage.space.get_constraints().add(magnetCons);
				this.clawDistance += gameElements.get_height();
			}
			if(mcName == "Truck") {
				this.currentTruck = new GameTruck();
				var truckJointsOffcet = 62;
				var stopSignal;
				var nearTruck = Storage.initSpriteUI("nearTruck");
				this.gameScreen.addChildAt(nearTruck,1);
				gameElements = Storage.initSpriteUI("TruckBody2");
				gameElements.set_alpha(1);
				this.gameScreen.addChild(gameElements);
				stopSignal = Storage.initSpriteUI("TruckStopSignal");
				stopSignal.set_x(-180);
				stopSignal.set_y(57);
				this.currentTruck.stopSignal = stopSignal;
				this.currentTruck.stopSignal.set_visible(false);
				this.currentTruck.stopSignal = stopSignal;
				gameElements.addChild(stopSignal);
				var cargo = Storage.initSpriteUI("cargo");
				cargo.set_x(-97);
				cargo.set_y(-27);
				gameElements.cargo = cargo;
				this.currentTruck.cargo = cargo;
				gameElements.addChild(cargo);
				var truckCoordinates = new nape_geom_Vec2List();
				var truckCoordinates2 = new nape_geom_Vec2List();
				var truckPos;
				var _g29 = 1;
				while(_g29 < 6) {
					var m = _g29++;
					truckPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][m - 1] , nape_geom_Vec2);
					truckCoordinates.push(truckPos);
				}
				var _g210 = 6;
				while(_g210 < 11) {
					var m2 = _g210++;
					truckPos = js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][m2 - 1] , nape_geom_Vec2);
					truckCoordinates2.push(truckPos);
				}
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_x() - 4);
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][1] , nape_geom_Vec2)).get_y());
				nearTruck.set_x(elementX + 62);
				nearTruck.set_y(elementY + 4);
				var tmp1 = nape_phys_BodyType.get_DYNAMIC();
				this.currentTruck.truckBody = new nape_phys_Body(tmp1,new nape_geom_Vec2(elementX,elementY));
				this.currentTruck.truckBody.get_shapes().add(new nape_shape_Polygon(truckCoordinates,new nape_phys_Material(0.2,0.2,0.38,0.7),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.currentTruck.truckBody.get_shapes().add(new nape_shape_Polygon(truckCoordinates2,new nape_phys_Material(0.2,0.2,0.38,0.7),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.currentTruck.truckBody.get_userData().truck = 1;
				this.currentTruck.truckBody.graphic = gameElements;
				this.currentTruck.truckBody.graphic.set_x(this.currentTruck.truckBody.get_position().get_x());
				this.currentTruck.truckBody.graphic.set_y(this.currentTruck.truckBody.get_position().get_y());
				this.currentTruck.truckBody.graphic.set_rotation(this.currentTruck.truckBody.get_rotation() * 180 / Math.PI % 360);
				this.currentTruck.truckBody.align();
				this.currentTruck.truckBody.get_cbTypes().add(this.wallType);
				Storage.space.get_bodies().add(this.currentTruck.truckBody);
				this.currentTruck.truckBody.get_userData().gameData = "truckBody";
				var jointWorldPoint2;
				gameElements = Storage.initSpriteUI("TruckWeel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][10] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][10] , nape_geom_Vec2)).get_y());
				this.gameScreen.addChild(gameElements);
				var tmp2 = nape_phys_BodyType.get_DYNAMIC();
				this.currentTruck.leftWheelTruck = new nape_phys_Body(tmp2,new nape_geom_Vec2(elementX,elementY));
				this.currentTruck.leftWheelTruck.get_shapes().add(new nape_shape_Circle(gameElements.get_width() * 0.5,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,5.5,5.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.currentTruck.leftWheelTruck.graphic = gameElements;
				this.currentTruck.leftWheelTruck.align();
				Storage.space.get_bodies().add(this.currentTruck.leftWheelTruck);
				this.currentTruck.leftWheelTruck.get_userData().gameData = "leftWheelTruck";
				this.currentTruck.leftWheelTruck.get_userData().truck = 1;
				jointWorldPoint2 = new nape_geom_Vec2(elementX,elementY);
				var lineJointTruckLeftWheel = new nape_constraint_LineJoint(this.currentTruck.truckBody,this.currentTruck.leftWheelTruck,this.currentTruck.truckBody.worldPointToLocal(jointWorldPoint2),new nape_geom_Vec2(),new nape_geom_Vec2(0,1),0,4);
				lineJointTruckLeftWheel.set_ignore(true);
				lineJointTruckLeftWheel.set_stiff(false);
				lineJointTruckLeftWheel.set_frequency(5.3);
				lineJointTruckLeftWheel.set_damping(0.4);
				Storage.space.get_constraints().add(lineJointTruckLeftWheel);
				this.currentTruck.leftWheelTruck.set_allowMovement(false);
				this.currentTruck.leftWheelTruck.set_allowRotation(false);
				gameElements = Storage.initSpriteUI("TruckWeel");
				elementX = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][11] , nape_geom_Vec2)).get_x());
				elementY = Storage.roundBy(100,(js_Boot.__cast(this.dataFromJsonForParsing[mcQ - i][9][11] , nape_geom_Vec2)).get_y());
				this.gameScreen.addChild(gameElements);
				var tmp3 = nape_phys_BodyType.get_DYNAMIC();
				this.currentTruck.rightWheelTruck = new nape_phys_Body(tmp3,new nape_geom_Vec2(elementX,elementY));
				this.currentTruck.rightWheelTruck.get_shapes().add(new nape_shape_Circle(gameElements.get_width() * 0.5,new nape_geom_Vec2(0,0),new nape_phys_Material(0.4,5.5,5.5,7.5),new nape_dynamics_InteractionFilter(this.objectsCollisionGroup,this.objectsCollisionMask)));
				this.currentTruck.rightWheelTruck.graphic = gameElements;
				this.currentTruck.rightWheelTruck.align();
				Storage.space.get_bodies().add(this.currentTruck.rightWheelTruck);
				this.currentTruck.rightWheelTruck.get_userData().gameData = "rightWheelTruck";
				jointWorldPoint2 = new nape_geom_Vec2(elementX,elementY);
				var lineJointTruckRightWheel = new nape_constraint_LineJoint(this.currentTruck.truckBody,this.currentTruck.rightWheelTruck,this.currentTruck.truckBody.worldPointToLocal(jointWorldPoint2),new nape_geom_Vec2(),new nape_geom_Vec2(0,1),0,4);
				lineJointTruckRightWheel.set_ignore(true);
				lineJointTruckRightWheel.set_stiff(false);
				lineJointTruckRightWheel.set_frequency(5.3);
				lineJointTruckRightWheel.set_damping(0.4);
				Storage.space.get_constraints().add(lineJointTruckRightWheel);
				this.currentTruck.rightWheelTruck.set_allowMovement(false);
				this.currentTruck.rightWheelTruck.set_allowRotation(false);
				this.currentTruck.rightWheelTruck.get_userData().truck = 1;
				this.trucks.push(this.currentTruck);
			}
		}
		var mouseWorldPoint = new nape_geom_Vec2(this.magnet.get_position().get_x(),this.magnet.get_position().get_y());
		this.mouseJoint = new nape_constraint_PivotJoint(Storage.space.get_world(),this.magnet,Storage.space.get_world().worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint.get_worldCOM().get_x(),this.magnetJointPoint.get_worldCOM().get_y())),this.magnet.worldPointToLocal(new nape_geom_Vec2(this.magnet.get_position().get_x() - 20,this.magnet.get_position().get_y())));
		this.mouseJoint.set_maxForce(472.0);
		this.mouseJoint.set_stiff(false);
		this.mouseJoint.set_frequency(1.6);
		this.mouseJoint.set_damping(0.4);
		Storage.space.get_constraints().add(this.mouseJoint);
		this.mouseJoint2 = new nape_constraint_PivotJoint(Storage.space.get_world(),this.magnet,Storage.space.get_world().worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint.get_worldCOM().get_x(),this.magnetJointPoint.get_worldCOM().get_y())),this.magnet.worldPointToLocal(new nape_geom_Vec2(this.magnet.get_position().get_x() + 20,this.magnet.get_position().get_y())));
		this.mouseJoint2.set_maxForce(472.0);
		this.mouseJoint2.set_stiff(false);
		this.mouseJoint2.set_frequency(1.6);
		this.mouseJoint2.set_damping(0.4);
		Storage.space.get_constraints().add(this.mouseJoint2);
		var _g12 = 0;
		var _g4 = this.elevators.length;
		while(_g12 < _g4) {
			var n = _g12++;
			var _g31 = 0;
			var _g211 = this.elevatorsEnd.length;
			while(_g31 < _g211) {
				var o = _g31++;
				if((js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).EndPoint == Std.string(this.elevatorsEnd[o].get_name())) {
					if(this.elevators[n].get_position().get_y() < this.elevatorsEnd[o].get_y()) {
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Start = this.elevators[n].get_position().get_y();
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).End = this.elevatorsEnd[o].get_y();
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Direction = "down";
					} else {
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Start = this.elevatorsEnd[o].get_y();
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).End = this.elevators[n].get_position().get_y();
						(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Direction = "up";
					}
					if((js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Enabled == false && (js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).AutoChange == false && (js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).ChangeDirection != "") {
						if((js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Direction == "down") {
							(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Direction = "up";
						} else {
							(js_Boot.__cast(this.elevators[n].graphic , spritesheet_AnimatedSprite)).Direction = "down";
						}
					}
				}
			}
		}
		var _g13 = 0;
		var _g5 = this.trucks.length;
		while(_g13 < _g5) {
			var ti = _g13++;
			this.trucks[ti].cargo = new openfl_display_Sprite();
			this.gameScreen.addChild(this.trucks[ti].cargo);
			this.trucks[ti].cargo.set_x(this.trucks[ti].truckBody.get_position().get_x() - 96.5);
			this.trucks[ti].cargo.set_y(this.trucks[ti].truckBody.get_position().get_y() - 27);
			var _g32 = 0;
			var _g212 = this.cargoBox.length;
			while(_g32 < _g212) {
				var b = _g32++;
				if((js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).hitTestObject(this.cargoBox[b])) {
					this.trucks[ti].cargo.addChild(this.cargoBox[b]);
					this.cargoBox[b].set_x(this.cargoBox[b].get_x() - this.trucks[ti].cargo.get_x());
					this.cargoBox[b].set_y(this.cargoBox[b].get_y() - this.trucks[ti].cargo.get_y());
					this.trucks[ti].boxSum++;
				}
			}
		}
		var _g14 = 0;
		var _g6 = this.shadows.length;
		while(_g14 < _g6) {
			var si = _g14++;
		}
		var _g15 = 0;
		var _g7 = this.buttons.length;
		while(_g15 < _g7) {
			var bi = _g15++;
			this.gameScreen.addChild(this.buttons[bi]);
		}
		var _g16 = 0;
		var _g8 = this.elevators.length;
		while(_g16 < _g8) {
			var ei = _g16++;
			this.gameScreen.addChild(this.elevators[ei].graphic);
		}
		var _g17 = 0;
		var _g9 = this.coolers.length;
		while(_g17 < _g9) {
			var ci = _g17++;
			this.gameScreen.addChild(this.coolers[ci]);
		}
		this.gameOver = false;
		this.upKey = false;
		this.downKey = false;
		this.rightKey = false;
		this.leftKey = false;
		this.pastTime = 0;
	}
	,elev1: function(e) {
		(js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Enabled = true;
		if(SoundManager.checkOneSound("SoundLiftOn") == false) {
			SoundManager.play("SoundLiftOn");
		}
		this.elevators[0].get_userData().moving = true;
		haxe_Log.trace("Срабатываение. Попытка " + (js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Try,{ fileName : "PlayState.hx", lineNumber : 2156, className : "PlayState", methodName : "elev1"});
		this.elevatorTimer1.stop();
		if((js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Try == 3) {
			(js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Try = 0;
			this.elevatorTimer1.set_delay((js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).StopTime);
		}
		if((js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Try == 1) {
			(js_Boot.__cast(this.elevators[0].graphic , spritesheet_AnimatedSprite)).Try += 1;
		}
	}
	,elev2: function(e) {
		(js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Enabled = true;
		if(SoundManager.checkOneSound("SoundLiftOn") == false) {
			SoundManager.play("SoundLiftOn");
		}
		this.elevators[1].get_userData().moving = true;
		this.elevatorTimer2.stop();
		if((js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Try == 3) {
			(js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Try = 0;
			this.elevatorTimer2.set_delay((js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).StopTime);
		}
		if((js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Try == 1) {
			(js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Try += 1;
		}
	}
	,elev3: function(e) {
		(js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Enabled = true;
		if(SoundManager.checkOneSound("SoundLiftOn") == false) {
			SoundManager.play("SoundLiftOn");
		}
		this.elevators[2].get_userData().moving = true;
		this.elevatorTimer3.stop();
		if((js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Try == 3) {
			(js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Try = 0;
			this.elevatorTimer3.set_delay((js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).StopTime);
		}
		if((js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Try == 1) {
			(js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Try += 1;
		}
	}
	,startTheGame: function(e) {
		this.removeEventListener("enterFrame",$bind(this,this.updateWorld));
		this.addEventListener("enterFrame",$bind(this,this.updateWorld));
		this.boxListener = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.boxType,this.wallType,$bind(this,this.beginCollisionBoxHandler));
		Storage.space.get_listeners().add(this.boxListener);
		this.boxListenerEnd = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_END(),nape_callbacks_InteractionType.get_COLLISION(),this.boxType,this.wallType,$bind(this,this.endCollisionBoxHandler));
		Storage.space.get_listeners().add(this.boxListenerEnd);
		this.elevatorLoaderListener = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.elevatorType,this.loaderType,$bind(this,this.beginCollisionElevator));
		Storage.space.get_listeners().add(this.elevatorLoaderListener);
		this.elevatorBoxesListener = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.elevatorType,this.boxType,$bind(this,this.beginCollisionElevator));
		Storage.space.get_listeners().add(this.elevatorBoxesListener);
		this.loaderSensorListener = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.loaderSensorType,this.wallType,$bind(this,this.beginCollisionLoaderWallHandler));
		Storage.space.get_listeners().add(this.loaderSensorListener);
		this.loaderSensorListener2 = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.loaderSensorType,this.elevatorType,$bind(this,this.beginCollisionLoaderWallHandler));
		Storage.space.get_listeners().add(this.loaderSensorListener2);
		this.boxSensorListener = new nape_callbacks_InteractionListener(nape_callbacks_CbEvent.get_BEGIN(),nape_callbacks_InteractionType.get_COLLISION(),this.loaderSensorType,this.boxType,$bind(this,this.beginCollisionLoaderWallHandler));
		Storage.space.get_listeners().add(this.boxSensorListener);
		this.consListener = new nape_callbacks_ConstraintListener(nape_callbacks_CbEvent.get_BREAK(),this.constraintType,$bind(this,this.ConstraintBreakHandler));
		Storage.space.get_listeners().add(this.consListener);
		this.boomTimer.addEventListener("timer",$bind(this,this.bah));
		this.stopwatchTimer.addEventListener("timer",$bind(this,this.countSeconds));
		this.endTimer.addEventListener("timer",$bind(this,this.endLevel));
		this.doorTimer.addEventListener("timer",$bind(this,this.doorStiff));
		this.waitTimer.addEventListener("timer",$bind(this,this.waitForEnd));
		Storage.theGame.addEventListener("mouseDown",$bind(this,this.mouseDown));
		Storage.theGame.addEventListener("mouseUp",$bind(this,this.mouseUp));
		if(Storage.isMobileCheck == false) {
			openfl_Lib.get_current().stage.addEventListener("mouseMove",$bind(this,this.mouseMove));
		} else {
			openfl_Lib.get_current().stage.addEventListener("touchMove",$bind(this,this.touchMove));
		}
		if(Storage.isMobileCheck == false) {
			openfl_Lib.get_current().stage.addEventListener("keyDown",$bind(this,this.keyPressed));
			openfl_Lib.get_current().stage.addEventListener("keyUp",$bind(this,this.keyReleased));
		}
		this.addEventListener("enterFrame",$bind(this,this.updateWorld));
		this.stopwatchTimer.start();
		if(this.gameOver) {
			this.endTimer.start();
		}
		var _g1 = 0;
		var _g = this.trucks.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.trucks[i].cargoLoad = false;
		}
	}
	,touchMove: function(e) {
		this.mx = this.get_mouseX();
		this.my = this.get_mouseY();
		if(Storage.isMobileCheck == true && this.my > 420) {
			return;
		}
		if(this.get_mouseX() < -20 || this.get_mouseX() > 720 || this.get_mouseY() < -20 || this.get_mouseY() > 520) {
			this.magnetActivate = false;
			SoundManager.stopOneSound("SoundLoaderMagnet");
			SoundManager.stopOneSound("SoundLoaderMove");
			return;
		}
		this.oldMousePosition.set(nape_geom_Vec2.weak(this.mount.get_position().get_x() - this.mx,this.mount.get_position().get_y() - this.my));
		if(e.target == null) {
			(js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).w1.set_rotation(this.tk1.graphic.get_rotation());
			(js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).w2.set_rotation(-this.tk1.graphic.get_rotation());
		}
	}
	,ConstraintBreakHandler: function(cb) {
		this.loaderDestroy();
	}
	,loaderDestroy: function() {
		this.boomX = this.truckLoaderBody.get_position().get_x();
		this.boomY = this.truckLoaderBody.get_position().get_y();
		this.upKey = false;
		this.leftKey = false;
		this.rightKey = false;
		Storage.theGame.removeEventListener("mouseDown",$bind(this,this.mouseDown));
		Storage.theGame.removeEventListener("mouseUp",$bind(this,this.mouseUp));
		if(Storage.isMobileCheck == false) {
			openfl_Lib.get_current().stage.removeEventListener("mouseMove",$bind(this,this.mouseMove));
		} else {
			openfl_Lib.get_current().stage.removeEventListener("touchMove",$bind(this,this.touchMove));
		}
		Storage.space.get_constraints().remove(this.mouseJoint);
		this.mouseJoint = null;
		Storage.space.get_constraints().remove(this.mouseJoint2);
		this.mouseJoint2 = null;
		Storage.space.get_constraints().remove(this.groundLoaderJoint);
		Storage.space.get_constraints().remove(this.lineJointLoaderLeftWheel);
		Storage.space.get_constraints().remove(this.lineJointLoaderRightWheel);
		Storage.space.get_constraints().remove(this.mountCons);
		Storage.space.get_constraints().remove(this.pvLoaderSensor);
		this.gameScreen.removeChild(this.mount.graphic);
		Storage.space.get_bodies().remove(this.mount);
		this.loaderBoom = true;
		this.tk2.set_gravMass(0.2);
		this.magnet.set_gravMass(0.2);
		this.boomTimer.start();
		this.Boom(this.boomX,this.boomY,false,this.loaderBoom);
		this.gameOver = true;
		this.endTimer.start();
		this.magnetActivate = false;
		(js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.tk1.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.tk2.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.magnet.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.loaderLeftWheel.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.loaderRightWheel.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
		(js_Boot.__cast(this.mount.graphic , spritesheet_AnimatedSprite)).get_transform().set_colorTransform(Utils.setTint(0,0.1));
	}
	,beginCollisionElevator: function(cb) {
		var items;
		this.elevatorForCheck = cb.get_arbiters().at(0).get_body2();
		items = cb.get_arbiters().at(0).get_body1();
		if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "down" && this.elevatorForCheck.get_position().get_y() < items.get_position().get_y() && this.elevatorForCheck.get_position().get_y() < (js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).End - 5) {
			this.elevatorsBlockCheck();
		}
		if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "up" && this.pressure(items) > 3000 && items.get_userData().gameData != "magnet") {
			this.elevatorsBlockCheck();
		}
	}
	,pressure: function(body) {
		var msum = 0.0;
		body.get_arbiters().foreach(function(a) {
			var imp = a.totalImpulse(body).xy();
			msum += imp.get_length();
		});
		body.get_constraints().foreach(function(c) {
			var imp1 = c.bodyImpulse(body).xy();
			msum += imp1.get_length();
		});
		return msum;
	}
	,elevatorsBlockCheck: function() {
		if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Enabled) {
			if(SoundManager.pause == false) {
				if(SoundManager.checkOneSound("SoundBoxHit") == false) {
					SoundManager.play("SoundBoxHit");
				}
				if(SoundManager.checkOneSound("SoundSparks") == false) {
					SoundManager.play("SoundSparks");
				}
				if(this.elevatorForCheck.get_userData().gameData == "elevator0") {
					this.elevators[0].get_userData().moving = false;
				}
				if(this.elevatorForCheck.get_userData().gameData == "elevator1") {
					this.elevators[1].get_userData().moving = false;
				}
				if(this.elevatorForCheck.get_userData().gameData == "elevator2") {
					this.elevators[2].get_userData().moving = false;
				}
			}
			if(this.elevatorForCheck.get_userData().gameData == "elevator0") {
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "up") {
					this.elevatorsCons[0].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() + 7);
				} else {
					this.elevatorsCons[0].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() - 7);
				}
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Enabled = false;
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark1.showBehavior("enable");
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark2.showBehavior("enable");
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try == 0) {
					this.elevatorTimer1.set_delay(1999);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try == 2) {
					if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "down") {
						(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction = "up";
					} else {
						(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction = "down";
					}
					this.elevatorTimer1.set_delay(333);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				this.elevatorTimer1.start();
			}
			if(this.elevatorForCheck.get_userData().gameData == "elevator1") {
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "up") {
					this.elevatorsCons[1].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() + 7);
				} else {
					this.elevatorsCons[1].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() - 7);
				}
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Enabled = false;
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark1.showBehavior("enable");
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark2.showBehavior("enable");
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try == 0) {
					this.elevatorTimer2.set_delay(1999);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				if((js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Try == 2) {
					if((js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Direction == "down") {
						(js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Direction = "up";
					} else {
						(js_Boot.__cast(this.elevators[1].graphic , spritesheet_AnimatedSprite)).Direction = "down";
					}
					this.elevatorTimer2.set_delay(333);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				this.elevatorTimer2.start();
			}
			if(this.elevatorForCheck.get_userData().gameData == "elevator2") {
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Direction == "up") {
					this.elevatorsCons[2].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() + 7);
				} else {
					this.elevatorsCons[2].get_anchor1().set_y(this.elevatorForCheck.get_position().get_y() - 7);
				}
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Enabled = false;
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark1.showBehavior("enable");
				(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).spark2.showBehavior("enable");
				if((js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try == 0) {
					this.elevatorTimer3.set_delay(1999);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				if((js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Try == 2) {
					if((js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Direction == "down") {
						(js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Direction = "up";
					} else {
						(js_Boot.__cast(this.elevators[2].graphic , spritesheet_AnimatedSprite)).Direction = "down";
					}
					this.elevatorTimer3.set_delay(333);
					(js_Boot.__cast(this.elevatorForCheck.graphic , spritesheet_AnimatedSprite)).Try += 1;
				}
				this.elevatorTimer3.start();
			}
		}
	}
	,waitForEnd: function(e) {
		this.waitTimer.stop();
		this.stopTheGame();
		var levelScore = this.scores.getScore(this.pastTime,this.currentLevelNumber);
		this.goToNext(levelScore);
	}
	,stopTheGame: function() {
		Storage.space.get_listeners().remove(this.boxListener);
		Storage.space.get_listeners().remove(this.boxListenerEnd);
		Storage.space.get_listeners().remove(this.elevatorLoaderListener);
		Storage.space.get_listeners().remove(this.elevatorBoxesListener);
		Storage.space.get_listeners().remove(this.loaderSensorListener);
		Storage.space.get_listeners().remove(this.loaderSensorListener2);
		Storage.space.get_listeners().remove(this.boxSensorListener);
		Storage.space.get_listeners().remove(this.consListener);
		var _g1 = 0;
		var _g = this.trucks.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.trucks[i].truckGo.stop();
		}
		this.boomTimer.stop();
		this.endTimer.stop();
		this.doorTimer.stop();
		this.boomTimer.removeEventListener("timer",$bind(this,this.bah));
		this.stopwatchTimer.removeEventListener("timer",$bind(this,this.countSeconds));
		this.endTimer.removeEventListener("timer",$bind(this,this.endLevel));
		this.doorTimer.removeEventListener("timer",$bind(this,this.doorStiff));
		this.waitTimer.removeEventListener("timer",$bind(this,this.waitForEnd));
		if(this.elevators.length > 0) {
			if(this.elevators.length >= 1) {
				this.elevatorTimer1.stop();
			}
			if(this.elevators.length >= 2) {
				this.elevatorTimer2.stop();
			}
			if(this.elevators.length >= 3) {
				this.elevatorTimer3.stop();
			}
		}
		Storage.theGame.removeEventListener("mouseDown",$bind(this,this.mouseDown));
		Storage.theGame.removeEventListener("mouseUp",$bind(this,this.mouseUp));
		if(Storage.isMobileCheck == false) {
			openfl_Lib.get_current().stage.removeEventListener("mouseMove",$bind(this,this.mouseMove));
		} else {
			openfl_Lib.get_current().stage.removeEventListener("touchMove",$bind(this,this.touchMove));
		}
		openfl_Lib.get_current().stage.removeEventListener("keyDown",$bind(this,this.keyPressed));
		openfl_Lib.get_current().stage.removeEventListener("keyUp",$bind(this,this.keyReleased));
		this.removeEventListener("enterFrame",$bind(this,this.updateWorld));
		this.stopwatchTimer.stop();
		this.leftKey = false;
		this.rightKey = false;
		this.upKey = false;
		this.downKey = false;
		var _g11 = 0;
		var _g2 = this.fracArray.length;
		while(_g11 < _g2) {
			var fi = _g11++;
			this.fracArray[fi].fadeTimer.stop();
			if(this.fracArray[fi].fractionBody != null) {
				if(this.gameScreen.contains(this.fracArray[fi].fractionBody.graphic)) {
					this.gameScreen.removeChild(this.fracArray[fi].fractionBody.graphic);
				}
				Storage.space.get_bodies().remove(this.fracArray[fi].fractionBody);
			}
		}
		var childArray = [];
		var _g12 = 0;
		var _g3 = this.gameScreen.get_numChildren();
		while(_g12 < _g3) {
			var mc = _g12++;
			if(Math.abs(this.gameScreen.getChildAt(mc).get_x()) > 800 || Math.abs(this.gameScreen.getChildAt(mc).get_y()) > 800) {
				childArray.push(this.gameScreen.getChildAt(mc));
			}
		}
		var _g4 = 0;
		while(_g4 < childArray.length) {
			var m = childArray[_g4];
			++_g4;
			this.gameScreen.removeChild(m);
			m = null;
		}
		childArray = [];
		this.truckLoaderBody = null;
	}
	,doorStiff: function(e) {
		this.doorTimer.stop();
		var _g1 = 0;
		var _g = this.doors.length;
		while(_g1 < _g) {
			var di = _g1++;
			this.doorsCons[di].set_stiff(true);
		}
	}
	,endLevel: function(e) {
		this.endTimer.stop();
		this.goToRestartSimple(null);
	}
	,countSeconds: function(e) {
		this.pastTime++;
		var tonna = Std["int"](this.pastTime / 1000);
		var sotka = Std["int"]((this.pastTime - tonna * 1000) / 100);
		var tens = Std["int"]((this.pastTime - tonna * 1000 - sotka * 100) / 10);
		this.scoreArray[0].showBehavior(tonna == null ? "null" : "" + tonna);
		this.scoreArray[1].showBehavior(sotka == null ? "null" : "" + sotka);
		this.scoreArray[2].showBehavior(tens == null ? "null" : "" + tens);
		this.scoreArray[3].showBehavior(Std.string(this.pastTime - tonna * 1000 - sotka * 100 - tens * 10));
		var levelStars = this.scores.getStars(this.pastTime,this.currentLevelNumber);
		Storage.starCounter = levelStars;
		this.stars.showBehavior(levelStars == null ? "null" : "" + levelStars);
	}
	,mouseUp: function(e) {
		if(Storage.isMobileCheck == false) {
			this.magnetActivate = false;
		}
		this.craneMagnetActivate = false;
		if(this.craneBody != null) {
			this.magnet.graphic.light.set_visible(false);
			this.magnet.graphic.light.showBehavior("disable");
		}
		haxe_Log.trace("mouseUp",{ fileName : "PlayState.hx", lineNumber : 2898, className : "PlayState", methodName : "mouseUp"});
		SoundManager.stopOneSound("SoundLoaderMagnet");
	}
	,mouseDown: function(e) {
		if(this.currentControl == "loader") {
			if(Storage.isMobileCheck == false) {
				this.magnetActivate = true;
				if(SoundManager.checkOneSound("SoundLoaderMagnet") == false) {
					SoundManager.play("SoundLoaderMagnet",true);
				}
			}
		} else {
			this.craneMagnetActivate = true;
			this.craneMagnetBody.graphic.light.set_visible(true);
			if(this.craneMagnetBody.graphic.light.currentBehavior.name == "disable") {
				this.craneMagnetBody.graphic.light.showBehavior("enable");
			}
		}
		haxe_Log.trace("mouseDown",{ fileName : "PlayState.hx", lineNumber : 2928, className : "PlayState", methodName : "mouseDown"});
	}
	,mouseMove: function(e) {
		this.mx = this.get_mouseX();
		this.my = this.get_mouseY();
		if(Storage.isMobileCheck == true && this.my > 420) {
			return;
		}
		if(this.get_mouseX() < -20 || this.get_mouseX() > 720 || this.get_mouseY() < -20 || this.get_mouseY() > 520) {
			this.magnetActivate = false;
			SoundManager.stopOneSound("SoundLoaderMagnet");
			SoundManager.stopOneSound("SoundLoaderMove");
			return;
		}
		if(this.mouseJoint != null && this.currentControl == "loader") {
			var dx = this.mx - this.mount.get_position().get_x();
			var dy = this.my - this.mount.get_position().get_y();
			var angleTarget = Math.atan2(dx,dy);
			var rast = Math.sqrt(dx * dx + dy * dy);
			var a = this.clawDistance * Math.sin(angleTarget);
			var b = this.clawDistance * Math.cos(angleTarget);
			if(rast > this.clawDistance) {
				this.mouseJoint.get_anchor1().set_x(this.mount.get_position().get_x() + a);
				this.mouseJoint.get_anchor1().set_y(this.mount.get_position().get_y() + b);
				this.mouseJoint2.get_anchor1().set_x(this.mount.get_position().get_x() + a);
				this.mouseJoint2.get_anchor1().set_y(this.mount.get_position().get_y() + b);
				this.tk2.set_gravMass(0.0);
				this.magnet.set_gravMass(0.0);
			} else {
				this.mouseJoint.get_anchor1().set_x(this.mx);
				this.mouseJoint.get_anchor1().set_y(this.my);
				this.mouseJoint2.get_anchor1().set_x(this.mx);
				this.mouseJoint2.get_anchor1().set_y(this.my);
				this.tk2.set_gravMass(-0.5);
				this.magnet.set_gravMass(-0.5);
			}
			dx = this.magnet.get_position().get_x() - this.mount.get_position().get_x();
			dy = this.magnet.get_position().get_y() - this.mount.get_position().get_y();
			rast = Math.sqrt(dx * dx + dy * dy);
			if(rast < 30) {
				this.tk2.set_gravMass(0.0);
				this.magnet.set_gravMass(0.0);
			}
			if(e.target == null) {
				(js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).w1.set_rotation(this.tk1.graphic.get_rotation());
				(js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).w2.set_rotation(-this.tk1.graphic.get_rotation());
			}
		}
	}
	,newJointPosition: function() {
		this.mx = this.mount.get_position().get_x() - this.oldMousePosition.get_x();
		this.my = this.mount.get_position().get_y() - this.oldMousePosition.get_y();
		if(this.mouseJoint != null && this.currentControl == "loader") {
			var dx = this.mx - this.mount.get_position().get_x();
			var dy = this.my - this.mount.get_position().get_y();
			var angleTarget = Math.atan2(dx,dy);
			var rast = Math.sqrt(dx * dx + dy * dy);
			var a = this.clawDistance * Math.sin(angleTarget);
			var b = this.clawDistance * Math.cos(angleTarget);
			if(rast > this.clawDistance) {
				this.mouseJoint.get_anchor1().set_x(this.mount.get_position().get_x() + a);
				this.mouseJoint.get_anchor1().set_y(this.mount.get_position().get_y() + b);
				this.mouseJoint2.get_anchor1().set_x(this.mount.get_position().get_x() + a);
				this.mouseJoint2.get_anchor1().set_y(this.mount.get_position().get_y() + b);
				this.tk2.set_gravMass(0.0);
				this.magnet.set_gravMass(0.0);
			} else {
				this.mouseJoint.get_anchor1().set_x(this.mx);
				this.mouseJoint.get_anchor1().set_y(this.my);
				this.mouseJoint2.get_anchor1().set_x(this.mx);
				this.mouseJoint2.get_anchor1().set_y(this.my);
				this.tk2.set_gravMass(-0.5);
				this.magnet.set_gravMass(-0.5);
			}
			dx = this.magnet.get_position().get_x() - this.mount.get_position().get_x();
			dy = this.magnet.get_position().get_y() - this.mount.get_position().get_y();
			rast = Math.sqrt(dx * dx + dy * dy);
			if(rast < 30) {
				this.tk2.set_gravMass(0.0);
				this.magnet.set_gravMass(0.0);
			}
		}
	}
	,beginCollisionLoaderWallHandler: function(cb) {
		this.loaderJump = true;
		this.loaderWithBox = false;
		if(this.magnetJoint2 != null) {
			if(cb.get_int2().get_userData().gameData == this.magnetJoint2.get_body2().get_userData().gameData) {
				this.loaderWithBox = true;
			}
		}
	}
	,keyReleased: function(e) {
		if(e.keyCode == 37 || e.keyCode == 65) {
			this.leftKey = false;
			if(SoundManager.checkOneSound("SoundLoaderMove") == true) {
				SoundManager.stopOneSound("SoundLoaderMove");
			}
		}
		if(e.keyCode == 39 || e.keyCode == 68) {
			this.rightKey = false;
			if(SoundManager.checkOneSound("SoundLoaderMove") == true) {
				SoundManager.stopOneSound("SoundLoaderMove");
			}
		}
		if(e.keyCode == 38 || e.keyCode == 87 || e.keyCode == 32) {
			this.upKey = false;
		}
		if(e.keyCode == 40 || e.keyCode == 83) {
			this.downKey = false;
		}
	}
	,keyPressed: function(e) {
		var s;
		if(e.keyCode == 82) {
			if(this.gameOver) {
				this.endTimer.stop();
				this.goToRestartSimple(null);
			} else {
				this.loaderDestroy();
			}
		}
		if(!this.gameOver) {
			if(e.keyCode == 69 || e.keyCode == 17) {
				haxe_Log.trace("E or control",{ fileName : "PlayState.hx", lineNumber : 3150, className : "PlayState", methodName : "keyPressed"});
				if(this.magnetActivate) {
					this.magnetActivate = false;
				} else {
					this.magnetActivate = true;
				}
			}
			if(e.keyCode == 37 || e.keyCode == 65) {
				this.leftKey = true;
				if(SoundManager.checkOneSound("SoundLoaderMove") == false) {
					SoundManager.play("SoundLoaderMove",true);
				}
			}
			if(e.keyCode == 39 || e.keyCode == 68) {
				this.rightKey = true;
				if(SoundManager.checkOneSound("SoundLoaderMove") == false) {
					SoundManager.play("SoundLoaderMove",true);
				}
			}
			if(e.keyCode == 38 || e.keyCode == 87 || e.keyCode == 32) {
				this.upKey = true;
			}
			if(e.keyCode == 40 || e.keyCode == 83) {
				this.downKey = true;
			}
		}
		e.preventDefault();
	}
	,addMask: function() {
		var scaleXX = 0;
		var scaleYY = 0;
		if(Storage.maskesAddedM == true) {
			var m1 = Storage.theGame.getChildByName("mask1");
			var m2 = Storage.theGame.getChildByName("mask2");
			var m3 = Storage.theGame.getChildByName("mask3");
			var m4 = Storage.theGame.getChildByName("mask4");
		} else {
			this.mask1 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
			this.mask2 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
			this.mask3 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
			this.mask4 = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/blank.png"));
			this.mask1.set_name("mask1");
			this.mask2.set_name("mask2");
			this.mask3.set_name("mask3");
			this.mask4.set_name("mask4");
			Storage.theGame.addChild(this.mask1);
			Storage.theGame.addChild(this.mask2);
			Storage.theGame.addChild(this.mask3);
			Storage.theGame.addChild(this.mask4);
		}
		if(openfl_Lib.get_current().stage.stageHeight > openfl_Lib.get_current().stage.stageWidth) {
			this.mask1.set_width(700);
			this.mask1.set_height(Storage.offSetY / Storage.W);
			this.mask1.set_y(-Storage.offSetY / Storage.W);
			this.mask1.set_x(0);
			this.mask2.set_width(700);
			this.mask2.set_height(Storage.offSetY / Storage.W);
			this.mask2.set_y(500);
			this.mask2.set_x(0);
			this.mask3.set_width(400);
			this.mask3.set_height(500);
			this.mask3.set_y(0);
			this.mask3.set_x(-400);
			this.mask4.set_width(800);
			this.mask4.set_height(500);
			this.mask4.set_y(0);
			this.mask4.set_x(700);
		} else {
			this.mask1.set_width(Storage.offSetX / Storage.W);
			this.mask1.set_height(500);
			this.mask1.set_y(0);
			this.mask1.set_x(-Storage.offSetX / Storage.W);
			this.mask2.set_width(Storage.offSetX / Storage.W + 100);
			this.mask2.set_height(500);
			this.mask2.set_x(700);
			this.mask2.set_y(0);
			this.mask3.set_width(700);
			this.mask3.set_height(400);
			this.mask3.set_y(-400);
			this.mask3.set_x(0);
			this.mask4.set_width(700);
			this.mask4.set_height(500);
			this.mask4.set_y(500);
			this.mask4.set_x(0);
		}
		Storage.maskesAddedM = true;
	}
	,loadButtonPanel: function() {
		this.sound = Storage.initAnimation("musicMini","ui");
		this.sound.set_buttonMode(true);
		this.sound.addEventListener("mouseDown",$bind(this,this.goToSound));
		this.sound.addEventListener("mouseOver",$bind(this,this.overMouseSound));
		this.sound.addEventListener("mouseOut",$bind(this,this.outMouseSound));
		if(SoundManager.pause == false) {
			this.sound.showBehavior("noSelectEnable");
		} else {
			this.sound.showBehavior("noSelectDisable");
		}
		this.sound.set_x(90);
		this.sound.set_y(20);
		this.sound.set_scaleX(1);
		this.sound.set_scaleY(1);
		this.sound.set_visible(true);
		Storage.theGame.addChild(this.sound);
		this.menu = Storage.initAnimation("menuMaxi","ui");
		Storage.theGame.addChild(this.menu);
		this.menu.showBehavior("out");
		this.menu.set_buttonMode(true);
		this.menu.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.menu.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.menu.addEventListener("mouseDown",$bind(this,this.goToMenu));
		this.menu.set_x(170);
		this.menu.set_y(20);
		this.menu.set_scaleX(1);
		this.menu.set_scaleY(1);
		this.levels = Storage.initAnimation("soundMini","ui");
		Storage.theGame.addChild(this.levels);
		this.levels.showBehavior("out");
		this.levels.set_buttonMode(true);
		this.levels.addEventListener("mouseOver",$bind(this,this.overMouseSoundM));
		this.levels.addEventListener("mouseOut",$bind(this,this.outMouseSoundM));
		this.levels.addEventListener("mouseDown",$bind(this,this.goToLevels));
		if(SoundManager.loopPaused == false) {
			this.levels.showBehavior("noSelectEnable");
		} else {
			this.levels.showBehavior("noSelectDisable");
		}
		this.levels.set_x(130);
		this.levels.set_y(20);
		this.levels.set_scaleX(1);
		this.levels.set_scaleY(1);
		this.restart = Storage.initAnimation("restartMaxi","ui");
		Storage.theGame.addChild(this.restart);
		this.restart.showBehavior("out");
		this.restart.set_buttonMode(true);
		this.restart.addEventListener("mouseOver",$bind(this,this.overMouse));
		this.restart.addEventListener("mouseOut",$bind(this,this.outMouse));
		this.restart.addEventListener("mouseDown",$bind(this,this.goToRestart));
		this.restart.set_x(210);
		this.restart.set_y(20);
		this.restart.set_scaleX(1);
		this.restart.set_scaleY(1);
		if(Storage.isMobileCheck == true) {
			this.leftBtn = Storage.initAnimation("BtnLeft","ui");
			Storage.theGame.addChild(this.leftBtn);
			this.leftBtn.showBehavior("out");
			this.leftBtn.set_buttonMode(true);
			this.leftBtn.addEventListener("touchBegin",$bind(this,this.goToLeft));
			this.leftBtn.addEventListener("touchEnd",$bind(this,this.upLeft));
			this.leftBtn.addEventListener("touchOut",$bind(this,this.upLeft));
			this.leftBtn.addEventListener("touchOver",$bind(this,this.goToLeft));
			this.leftBtn.set_x(40);
			this.leftBtn.set_y(460);
			this.leftBtn.set_scaleX(1.6);
			this.leftBtn.set_scaleY(1.6);
			this.leftBtn.set_alpha(0.5);
			this.rightBtn = Storage.initAnimation("BtnRight","ui");
			Storage.theGame.addChild(this.rightBtn);
			this.rightBtn.showBehavior("out");
			this.rightBtn.set_buttonMode(true);
			this.rightBtn.addEventListener("touchBegin",$bind(this,this.goToRight));
			this.rightBtn.addEventListener("touchEnd",$bind(this,this.upRight));
			this.rightBtn.addEventListener("touchOut",$bind(this,this.upRight));
			this.rightBtn.addEventListener("touchOver",$bind(this,this.goToRight));
			this.rightBtn.set_x(120);
			this.rightBtn.set_y(460);
			this.rightBtn.set_scaleX(1.6);
			this.rightBtn.set_scaleY(1.6);
			this.rightBtn.set_alpha(0.5);
			this.upBtn = Storage.initAnimation("BtnUp","ui");
			Storage.theGame.addChild(this.upBtn);
			this.upBtn.showBehavior("out");
			this.upBtn.set_buttonMode(true);
			this.upBtn.addEventListener("touchBegin",$bind(this,this.goToUp));
			this.upBtn.addEventListener("touchEnd",$bind(this,this.upUp));
			this.upBtn.set_x(560);
			this.upBtn.set_y(460);
			this.upBtn.set_scaleX(1.6);
			this.upBtn.set_scaleY(1.6);
			this.upBtn.set_alpha(0.5);
			this.actBtn = Storage.initAnimation("BtnGoo","ui");
			Storage.theGame.addChild(this.actBtn);
			this.actBtn.showBehavior("out");
			this.actBtn.set_buttonMode(true);
			this.actBtn.addEventListener("mouseOver",$bind(this,this.overMouse));
			this.actBtn.addEventListener("mouseOut",$bind(this,this.outMouse));
			this.actBtn.addEventListener("touchBegin",$bind(this,this.goToAct));
			this.actBtn.addEventListener("touchEnd",$bind(this,this.actUp));
			this.actBtn.set_x(660);
			this.actBtn.set_y(460);
			this.actBtn.set_scaleX(1.6);
			this.actBtn.set_scaleY(1.6);
			this.actBtn.set_alpha(0.5);
		}
		this.timeA = Storage.initSpriteUI("time");
		this.timeA.set_x(580);
		this.timeA.set_y(18);
		this.timeA.set_scaleX(0.4);
		this.timeA.set_scaleY(0.4);
		this.timeA.mouseEnabled = false;
		Storage.theGame.addChild(this.timeA);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.scoreArray[i] = Storage.initAnimation("digit","ui");
			this.scoreArray[i].set_x(630 + i * 18);
			this.scoreArray[i].set_y(18);
			this.scoreArray[i].set_scaleX(0.4);
			this.scoreArray[i].set_scaleY(0.4);
			this.scoreArray[i].mouseEnabled = false;
			this.scoreArray[i].showBehavior("0");
			Storage.theGame.addChild(this.scoreArray[i]);
		}
		this.stars = Storage.initAnimation("star","ui");
		this.stars.showBehavior("3");
		this.stars.set_x(660);
		this.stars.set_y(50);
		this.stars.set_scaleX(0.7);
		this.stars.set_scaleY(0.7);
		this.stars.mouseEnabled = false;
		Storage.theGame.addChild(this.stars);
		this.Score.set_text("something very long");
		this.Score.set_textColor(16777215);
		this.Score.set_width(700);
		this.Score.set_x(40);
		this.Score.set_y(40);
		this.Score2.set_text("something very long");
		this.Score2.set_width(700);
		this.Score2.set_textColor(16777215);
		this.Score2.set_x(100);
		this.Score2.set_y(40);
		this.Score2.mouseEnabled = false;
		this.Score.mouseEnabled = false;
	}
	,upLeft: function(e) {
		this.leftKey = false;
		this.rightKey = false;
		if(SoundManager.checkOneSound("SoundLoaderMove") == true) {
			SoundManager.stopOneSound("SoundLoaderMove");
		}
	}
	,upRight: function(e) {
		this.rightKey = false;
		this.leftKey = false;
		if(SoundManager.checkOneSound("SoundLoaderMove") == true) {
			SoundManager.stopOneSound("SoundLoaderMove");
		}
	}
	,actUp: function(e) {
	}
	,upUp: function(e) {
		this.upKey = false;
		if(SoundManager.checkOneSound("SoundLoaderJump") == true) {
			SoundManager.stopOneSound("SoundLoaderJump");
		}
	}
	,goToRight: function(e) {
		this.rightKey = true;
		this.leftKey = false;
		if(SoundManager.checkOneSound("SoundLoaderMove") == false) {
			SoundManager.play("SoundLoaderMove",true);
		}
	}
	,goToLeft: function(e) {
		this.leftKey = true;
		this.rightKey = false;
		if(SoundManager.checkOneSound("SoundLoaderMove") == false) {
			SoundManager.play("SoundLoaderMove",true);
		}
	}
	,goToUp: function(e) {
		this.upKey = true;
	}
	,goToAct: function(e) {
		if(this.magnetActivate) {
			this.magnetActivate = false;
		} else {
			this.magnetActivate = true;
		}
	}
	,resizeStage: function(e) {
		Storage.setXY(Std["int"](openfl_Lib.get_current().stage.stageWidth),Std["int"](openfl_Lib.get_current().stage.stageHeight));
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
	}
	,loadUI: function() {
		this.mainBackGround = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/ui/menu.png"));
		Storage.theGame.addChild(this.mainBackGround);
		this.back = Storage.initSpriteBack(Std.string(this.cLevel));
		var offSet = new nape_geom_Vec2(Storage.offsetBack[this.cLevel - 1][0],Storage.offsetBack[this.cLevel - 1][1]);
		this.back.set_x(-2 + offSet.get_x());
		this.back.set_y(-2 + offSet.get_y());
		this.back.smoothing = true;
		this.back.set_visible(true);
	}
	,goToRestartSimple: function(e) {
		SoundManager.play("SoundGameButonsClick");
		this.stopTheGame();
		this.refreshWorld();
		this.clearState();
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		SoundManager.play("SoundGameButonsClick");
		var playState = new PlayState(this._parent,this.cLevel);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.theGame.addChild(playState);
		Storage.blackScreenTween(playState);
	}
	,goToRestart: function(e) {
		SoundManager.play("SoundGameButonsClick");
		this.mainBackGround3 = Storage.initSpriteUI("menu");
		var _g = this.mainBackGround3;
		_g.set_x(_g.get_x() + this.mainBackGround3.get_width() / 2);
		var _g1 = this.mainBackGround3;
		_g1.set_y(_g1.get_y() + this.mainBackGround3.get_height() / 2);
		this.mainBackGround3.set_cacheAsBitmap(true);
		Storage.theGame.addChild(this.mainBackGround3);
		this.goToRestartAfter();
	}
	,goToRestartAfter: function() {
		SoundManager.play("SoundGameButonsClick");
		if(this.mainBackGround3 != null) {
			Storage.theGame.removeChild(this.mainBackGround3);
		}
		this.stopTheGame();
		this.refreshWorld();
		this.clearState();
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		SoundManager.play("SoundGameButonsClick");
		var playState = new PlayState(this._parent,this.cLevel);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.theGame.addChild(playState);
		Storage.blackScreenTween(playState);
	}
	,goToLevels: function(e) {
		SoundManager.play("SoundGameButonsClick");
		if(SoundManager.loopPaused == false) {
			this.levels.showBehavior("selectDisable");
			SoundManager.stopLoop();
		} else {
			SoundManager.resumeLoop();
			this.levels.showBehavior("selectEnable");
		}
	}
	,goToNext: function(sc) {
		SoundManager.stopOneSound("SoundLoaderMagnet");
		SoundManager.stopOneSound("SoundFeedGo");
		SoundManager.stopOneSound("SoundLoaderMove");
		if(SoundManager.checkOneSound("SoundTruckEngineOn") == true) {
			SoundManager.stopOneSound("SoundTruckEngineOn");
		}
		Storage.run = false;
		this.stopTheGame();
		this.refreshWorld();
		this.clearState();
		haxe_Log.trace("next",{ fileName : "PlayState.hx", lineNumber : 4019, className : "PlayState", methodName : "goToNext"});
		if(this.cLevel < 31) {
			Storage.levelStateArray[this.cLevel] = 1;
		}
		var complState = new CompletedState(this._parent,this.cLevel,sc);
		Storage.completedState = complState;
		Storage.blackScreenTween(Storage.theGame);
		Storage.resizeGame();
		Storage.resizeStage(Storage.theGame);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.scoresArray[this.cLevel - 1] = sc;
		Storage.starArray[this.cLevel - 1] = Storage.starCounter;
		Storage.updateSaves();
		SoundManager.play("SoundGameButonsClick");
	}
	,goToMenu: function(e) {
		this.stopTheGame();
		this.refreshWorld();
		this.clearState();
		var nextState = new IconsState(this._parent);
		Storage.curSprite = nextState;
		Storage.blackScreenTween(nextState);
		Storage.offsetPage();
		openfl_Lib.trace("windows displayed");
		Storage.resizeGame();
		Storage.resizeStage(Storage.curSprite);
		SoundManager.play("SoundGameButonsClick");
	}
	,elevatorsCheck: function(delta) {
		var _g1 = 0;
		var _g = this.elevators.length;
		while(_g1 < _g) {
			var i = _g1++;
			(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).spark1.update(delta);
			(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).spark2.update(delta);
			if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled) {
				if(Std.string((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction) == "up") {
					if(this.elevators[i].get_position().get_y() < (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Start + 10.1 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed) {
						haxe_Log.trace("direction changed",{ fileName : "PlayState.hx", lineNumber : 4110, className : "PlayState", methodName : "elevatorsCheck"});
						this.elevators[i].get_userData().moving = false;
						(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = false;
						if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).AutoChange) {
							(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction = "down";
							(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = false;
							if(i == 0) {
								this.elevatorTimer1.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer1.start();
							}
							if(i == 1) {
								this.elevatorTimer2.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer2.start();
							}
							if(i == 2) {
								this.elevatorTimer3.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer3.start();
							}
						}
					} else {
						var _g2 = this.elevatorsCons[i].get_anchor1();
						_g2.set_y(_g2.get_y() - (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
						var _g21 = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).w1;
						_g21.set_rotation(_g21.get_rotation() + 3 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
						var _g22 = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).w2;
						_g22.set_rotation(_g22.get_rotation() - 3 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
					}
				}
				if(Std.string((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction) == "down") {
					if(this.elevators[i].get_position().get_y() > (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).End - 10.1 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed) {
						this.elevators[i].get_userData().moving = false;
						(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = false;
						if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).AutoChange) {
							(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction = "up";
							(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = false;
							if(i == 0) {
								this.elevatorTimer1.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer1.start();
							}
							if(i == 1) {
								this.elevatorTimer2.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer2.start();
							}
							if(i == 2) {
								this.elevatorTimer3.set_delay((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).StopTime);
								(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Try = 0;
								this.elevatorTimer3.start();
							}
						}
					} else {
						var _g23 = this.elevatorsCons[i].get_anchor1();
						_g23.set_y(_g23.get_y() + (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
						var _g24 = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).w1;
						_g24.set_rotation(_g24.get_rotation() - 3 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
						var _g25 = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).w2;
						_g25.set_rotation(_g25.get_rotation() + 3 * (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Speed);
					}
				}
			}
		}
	}
	,clearState: function() {
		SoundManager.stopLevelSounds(Storage.currentLevel);
		Storage.clear();
		motion_Actuate.reset();
		Storage.previousLevel = this;
		while(Storage.theGame.get_numChildren() > 0) {
			var spr = Storage.theGame.getChildAt(0);
			Storage.theGame.removeChild(spr);
			spr = null;
		}
		Storage.maskesAddedM = false;
	}
	,overMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("over");
	}
	,outMouse: function(e) {
		(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("out");
	}
	,refreshWorld: function() {
		Storage.space.get_constraints().clear();
		Storage.space.get_bodies().clear();
		while(this.gameScreen.get_numChildren() > 0) {
			var spr = Storage.theGame.getChildAt(0);
			Storage.theGame.removeChild(spr);
			spr = null;
		}
		this.boxArray = [];
		this.fracArray = [];
		this.buttons = [];
		this.coolers = [];
		this.transformators = [];
		this.doors = [];
		this.doorsCons = [];
		this.elevators = [];
		this.elevatorsEnd = [];
		this.elevatorsCons = [];
		this.cargoBox = [];
		this.transporters = [];
		this.lamps = [];
		this.shadows = [];
		this.trucks = [];
		this.gameMovieClips = [];
		this.magnetActivate = false;
		this.craneMagnetActivate = false;
	}
	,endCollisionBoxHandler: function(cb) {
		if(cb.get_int1().get_userData().boxId == this.craneBoxId || cb.get_int2().get_userData().boxId == this.craneBoxId) {
			this.craneMagnetTouch = false;
		}
	}
	,beginCollisionBoxHandler: function(cb) {
		SoundManager.play("SoundBoxHit");
		var testBody;
		var av;
		if(cb.get_arbiters().get_length() > 0) {
			if(cb.get_arbiters().at(0).get_body1().get_userData().gameData == "DangerBox") {
				testBody = cb.get_arbiters().at(0).get_body1();
				av = new nape_geom_Vec2(testBody.normalImpulse(cb.get_arbiters().at(0).get_body2()).get_x(),testBody.normalImpulse(cb.get_arbiters().at(0).get_body2()).get_y());
			} else {
				testBody = cb.get_arbiters().at(0).get_body2();
				av = new nape_geom_Vec2(testBody.normalImpulse(cb.get_arbiters().at(0).get_body1()).get_x(),testBody.normalImpulse(cb.get_arbiters().at(0).get_body1()).get_y());
			}
			if(cb.get_arbiters().at(0).get_body1().get_userData().boxId == this.craneBoxId || cb.get_arbiters().at(0).get_body2().get_userData().boxId == this.craneBoxId) {
				if(this.craneMagnetJoint != null) {
					this.craneMagnetTouch = true;
				}
			}
			var a = Math.sqrt(av.get_x() * av.get_x() + av.get_y() * av.get_y()) / 800 * 255 * 1.5;
			var rot;
			var xStrength = 0;
			xStrength = 65;
			if(Std["int"](a) > xStrength && testBody.get_userData().gameData == "DangerBox") {
				this.magnetActivate = false;
				if(this.magnetJoint != null) {
					Storage.space.get_constraints().remove(this.magnetJoint);
					this.magnetJoint = null;
				}
				if(this.magnetJoint2 != null) {
					Storage.space.get_constraints().remove(this.magnetJoint2);
					this.magnetJoint2 = null;
				}
				if(this.magnetJoint3 != null) {
					Storage.space.get_constraints().remove(this.magnetJoint3);
					this.magnetJoint3 = null;
				}
				this.boomX = testBody.get_position().get_x();
				this.boomY = testBody.get_position().get_y();
				var id = (js_Boot.__cast(testBody.graphic , spritesheet_AnimatedSprite)).BoxId;
				rot = (js_Boot.__cast(testBody.graphic , spritesheet_AnimatedSprite)).get_rotation();
				this.boxVelocity = testBody.get_velocity();
				this.gameScreen.removeChild(testBody.graphic);
				Storage.space.get_bodies().remove(testBody);
				var _g1 = 0;
				var _g = this.boxArray.length;
				while(_g1 < _g) {
					var bi = _g1++;
					if(id == (js_Boot.__cast(this.boxArray[bi].graphic , spritesheet_AnimatedSprite)).BoxId) {
						this.boxArray[bi] = this.boxArray[0];
						this.boxArray.shift();
						break;
					}
				}
				this.loaderBoom = false;
				var _g11 = 0;
				var _g2 = this.transformators.length;
				while(_g11 < _g2) {
					var tra = _g11++;
					var dx = this.transformators[tra].transGraphic.get_x() - this.boomX;
					var dy = this.transformators[tra].transGraphic.get_y() - this.boomY;
					var rast = Math.sqrt(dx * dx + dy * dy);
					if(rast < 70 && this.transformators[tra].transBroken == false) {
						this.transformators[tra].transGraphic.showBehavior("disable");
						this.transformators[tra].transGraphic.update(1);
						this.transformators[tra].transBroken = true;
						this.transformators[tra].sparksTimer.start();
						this.doorsCheck(this.transformators[tra].transSwitch);
						this.rollsSwitch(this.transformators[tra].transSwitch);
						this.lampsSwitch(this.transformators[tra].transSwitch);
					}
				}
				this.boomTimer.start();
				this.Boom(this.boomX,this.boomY,false,false,rot);
			}
		}
	}
	,bah: function(e) {
		this.boomTimer.stop();
		var mcBoom = Storage.initAnimation("TFXBoom","ui");
		mcBoom.showBehavior("enable");
		this.boomSprite.push(mcBoom);
		this.Boom(this.boomX,this.boomY + 10,true,this.loaderBoom);
		this.gameScreen.addChild(mcBoom);
		mcBoom.set_x(this.boomX);
		mcBoom.set_y(this.boomY);
		mcBoom.set_visible(true);
		SoundManager.play("SoundBlast");
		SoundManager.play("SoundBlast");
	}
	,Boom: function(px,py,makeBoom,loader,rotat) {
		if(rotat == null) {
			rotat = 0;
		}
		if(loader == null) {
			loader = false;
		}
		var box;
		if(makeBoom) {
			var _g1 = 0;
			var _g = this.fracArray.length;
			while(_g1 < _g) {
				var i = _g1++;
				var pNext = this.fracArray[i].fractionBody;
				if(pNext == null) {
					continue;
				}
				if(pNext.get_position().get_x() == px && pNext.get_position().get_y() == py) {
					continue;
				}
				var dx = pNext.get_position().get_x() - px;
				var dy = pNext.get_position().get_y() - py;
				var rast = Math.sqrt(dx * dx + dy * dy);
				if(rast < this.bombZone / 2 + 20) {
					dx = this.bombForceDefault / dx;
					dy = this.bombForceDefault / dy;
					pNext.applyImpulse(new nape_geom_Vec2(dx,dy),new nape_geom_Vec2(0,0));
				}
			}
			if(loader) {
				this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-50),new nape_geom_Vec2(0,0));
				this.tk1.applyImpulse(new nape_geom_Vec2(-50,-50),new nape_geom_Vec2(0,0));
				this.loaderLeftWheel.applyImpulse(new nape_geom_Vec2(-600,-450),new nape_geom_Vec2(-10,0));
				this.loaderRightWheel.applyImpulse(new nape_geom_Vec2(600,-450),new nape_geom_Vec2(10,0));
			}
		} else {
			var tmp = loader == false;
		}
	}
	,updateWorld: function(e) {
		if(this.get_mouseX() < -20 || this.get_mouseX() > 720 || this.get_mouseY() < -20 || this.get_mouseY() > 520) {
			this.magnetActivate = false;
			SoundManager.stopOneSound("SoundLoaderMagnet");
			SoundManager.stopOneSound("SoundLoaderMove");
			this.leftKey = false;
			this.rightKey = false;
			this.upKey = false;
		}
		var time = openfl_Lib.getTimer();
		var delta = time - this.lastTime;
		this.sound.update(delta);
		this.menu.update(delta);
		this.levels.update(delta);
		this.restart.update(delta);
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			this.scoreArray[i].update(delta);
		}
		this.stars.update(delta);
		this.Score.set_text(Std.string(Storage.frameRate));
		var b = Storage.space.get_bodies().iterator();
		while(b.hasNext()) {
			var b1 = b.next();
			if(!b1.isStatic() && b1.graphic != null) {
				b1.graphic.set_x(b1.get_position().get_x());
				b1.graphic.set_y(b1.get_position().get_y());
				b1.graphic.set_rotation(b1.get_rotation() * 180 / Math.PI % 360);
			}
		}
		Storage.mousePoint = new nape_geom_Vec2(Std["int"](this.get_mouseX()),Std["int"](this.get_mouseY()));
		if(Storage.run == true) {
			Storage.space.step(1 / Storage.frameRate);
			var _g1 = 0;
			var _g11 = this.shadows;
			while(_g1 < _g11.length) {
				var shadow = _g11[_g1];
				++_g1;
				shadow.update(delta);
			}
			var _g2 = 0;
			var _g12 = this.lamps;
			while(_g2 < _g12.length) {
				var lamp = _g12[_g2];
				++_g2;
				lamp.update(delta);
			}
			var _g3 = 0;
			var _g13 = this.boomSprite;
			while(_g3 < _g13.length) {
				var boomSpr = _g13[_g3];
				++_g3;
				boomSpr.update(delta);
			}
			if(this.magnet != null) {
				this.magnet.graphic.light.update(delta);
			}
		}
		if(delta % 2 == 0) {
			if(this.buttons.length > 0) {
				this.ButtonsCheck(delta);
			}
			this.dxb = this.groundLoaderJoint.get_anchor1().get_x() - this.tk1.get_position().get_x();
			this.dyb = this.groundLoaderJoint.get_anchor1().get_y() - this.tk1.get_position().get_y();
			this.rastb = Math.sqrt(this.dxb * this.dxb + this.dyb * this.dyb);
		}
		if(this.coolers.length > 0) {
			this.coolersCheck();
		}
		if(this.elevators.length > 0) {
			this.elevatorsCheck(delta);
		}
		if(this.transporters.length > 0) {
			this.rollsCheck();
		}
		this.elevatorsMove = false;
		var _g14 = 0;
		var _g4 = this.elevators.length;
		while(_g14 < _g4) {
			var ei = _g14++;
			if(this.elevators[ei].get_userData().moving) {
				this.elevatorsMove = true;
			}
		}
		var tmp = this.elevatorsMove;
		if(this.rastb > 40 && this.gameOver == false) {
			haxe_Log.trace("destroy",{ fileName : "PlayState.hx", lineNumber : 4724, className : "PlayState", methodName : "updateWorld"});
			this.loaderDestroy();
		}
		var _g15 = 0;
		var _g5 = this.trucks.length;
		while(_g15 < _g5) {
			var ti = _g15++;
			this.trucks[ti].stopSignal.update(delta);
			this.trucks[ti].cargo.set_x(this.trucks[ti].truckBody.get_position().get_x() + (js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).cargo.get_x());
			this.trucks[ti].cargo.set_y(this.trucks[ti].truckBody.get_position().get_y() + (js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).cargo.get_y());
			(js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).set_x(this.trucks[ti].truckBody.get_position().get_x() + 13);
			(js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).set_y(this.trucks[ti].truckBody.get_position().get_y() - 12);
			if(delta % 2 == 0 || this.trucks[ti].cargoLoad == true) {
				if((js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).hitTestObject((js_Boot.__cast(this.trucks[ti].truckBody.graphic , spritesheet_AnimatedSprite)).cargo)) {
					this.loaderInCargo = true;
				} else {
					this.loaderInCargo = false;
				}
				this.trucks[ti].boxCount = 0;
				this.checkTruckCargo(ti);
				if(this.trucks[ti].boxCount == this.trucks[ti].boxSum) {
					if(this.trucks[ti].cargoLoad == false) {
						if(SoundManager.checkOneSound("SoundTruckEngineOn") == false) {
							SoundManager.play("SoundTruckEngineOn");
						}
					}
					this.trucks[ti].cargoLoad = true;
					this.trucks[ti].stopSignal.set_visible(true);
					if(this.trucks.length > 1) {
						if(this.outLight != null && (this.trucks[0].cargoLoad || this.trucks[1].cargoLoad)) {
							if(this.outLight.currentBehavior.name != "enable") {
								this.outLight.showBehavior("enable");
							}
						}
					} else if(this.outLight != null) {
						if(this.outLight.currentBehavior.name != "enable") {
							this.outLight.showBehavior("enable");
						}
					}
				} else {
					if(this.trucks[ti].cargoLoad) {
						if(SoundManager.checkOneSound("SoundTruckEngineOn") == true) {
							SoundManager.stopOneSound("SoundTruckEngineOn");
						}
					}
					this.trucks[ti].cargoLoad = false;
					this.trucks[ti].stopSignal.set_visible(false);
					if(this.trucks.length > 1) {
						if(this.outLight != null && this.trucks[0].cargoLoad == false && this.trucks[1].cargoLoad == false) {
							this.outLight.showBehavior("disable");
						}
					} else if(this.outLight != null) {
						this.outLight.showBehavior("disable");
					}
				}
				this.outLight.update(delta);
				if(this.trucks[ti].cargoLoad && !this.loaderInCargo && !this.craneMagnetInCargo) {
					if(this.trucks[ti].leftWheelTruck.get_allowMovement() == false) {
						if(SoundManager.checkOneSound("SoundTruckSignal") == false) {
							SoundManager.play("SoundTruckSignal");
						}
					}
					this.trucks[ti].leftWheelTruck.set_allowMovement(true);
					this.trucks[ti].rightWheelTruck.set_allowMovement(true);
					this.trucks[ti].leftWheelTruck.set_allowRotation(true);
					this.trucks[ti].rightWheelTruck.set_allowRotation(true);
					this.trucks[ti].stopSignal.set_visible(false);
					if(this.outLight != null) {
						this.outLight.showBehavior("disable");
					}
					this.trucks[ti].truckGo.start();
					var _g31 = 0;
					var _g21 = this.boxArray.length;
					while(_g31 < _g21) {
						var boxi = _g31++;
						if(this.boxArray[boxi].get_userData().isCargo) {
							this.boxArray[boxi].set_gravMass(14.0);
						}
					}
				}
				if(this.checkTrucksPosition() && !this.gameOver) {
					this.waitTimer.start();
				}
			}
		}
		this.groundLoaderJoint.get_anchor1().set_x(this.mount.get_position().get_x());
		this.groundLoaderJoint.get_anchor1().set_y(this.mount.get_position().get_y());
		if(this.rightKey) {
			this.loaderLeftWheel.set_angularVel(this.loaderSpeed - 1);
			this.loaderRightWheel.set_angularVel(this.loaderSpeed - 1);
		} else if(this.leftKey) {
			this.loaderLeftWheel.set_angularVel(-this.loaderSpeed + 1);
			this.loaderRightWheel.set_angularVel(-this.loaderSpeed + 1);
		} else {
			this.stopLoaderWheelsRotation();
		}
		if(Storage.isMobileCheck == true && delta % 2 == 0) {
			this.newJointPosition();
		}
		if(this.upKey && this.loaderJump && this.loaderWithBox == false) {
			this.loaderJump = false;
			SoundManager.play("SoundLoaderJump");
			if(this.leftKey) {
				if(Math.abs((js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).get_rotation()) < 90) {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(-9,-1)));
				} else if(this.loaderRightWheel.get_position().get_y() > this.loaderLeftWheel.get_position().get_y() && Math.abs((js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).get_rotation()) < 120) {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(500,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(10,0)));
				} else {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(9,-1)));
				}
			} else if(this.rightKey) {
				if(Math.abs((js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).get_rotation()) < 90) {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(9,-1)));
				} else if(this.loaderRightWheel.get_position().get_y() < this.loaderLeftWheel.get_position().get_y() && Math.abs((js_Boot.__cast(this.truckLoaderBody.graphic , spritesheet_AnimatedSprite)).get_rotation()) < 120) {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(500,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(-10,0)));
				} else {
					this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(-9,-1)));
				}
			} else {
				this.truckLoaderBody.applyImpulse(new nape_geom_Vec2(0,-2300),this.truckLoaderBody.localPointToWorld(new nape_geom_Vec2(-1.5,0)));
			}
			this.upKey = false;
		}
		if(this.magnetActivate) {
			if(this.magnetJoint == null && this.magnetJoint2 == null) {
				this.magnet.graphic.light.set_visible(true);
				if(this.magnet.graphic.light.currentBehavior.name == "disable") {
					this.magnet.graphic.light.showBehavior("enable");
				}
				var _g16 = 0;
				var _g6 = this.boxArray.length;
				while(_g16 < _g6) {
					var mg = _g16++;
					if(this.magnet.graphic.beam.hitTestObject(this.boxArray[mg].graphic)) {
						this.magnetJoint = new nape_constraint_PivotJoint(this.magnet,this.boxArray[mg],this.magnet.worldPointToLocal(new nape_geom_Vec2(this.magnet.get_position().get_x(),this.magnet.get_position().get_y())),this.boxArray[mg].worldPointToLocal(new nape_geom_Vec2(this.boxArray[mg].get_position().get_x(),this.boxArray[mg].get_position().get_y())));
						this.magnetJoint.set_stiff(false);
						this.magnetJoint.set_maxForce(901);
						if(Storage.currentLevel == 7) {
							if(this.boxArray[mg].get_allowRotation() == false) {
								this.boxArray[mg].set_allowRotation(true);
							}
						}
						this.magnetJoint.set_damping(0.3);
						Storage.space.get_constraints().add(this.magnetJoint);
						break;
					}
				}
			}
		}
		if(this.magnetJoint != null) {
			if(!this.magnet.graphic.beam.hitTestObject(this.magnetJoint.get_body2().graphic)) {
				Storage.space.get_constraints().remove(this.magnetJoint);
				this.magnetJoint = null;
			}
		}
		if(this.magnetJoint != null) {
			if(this.magnet.graphic.magnetic1.hitTestObject(this.magnetJoint.get_body2().graphic) && this.magnet.graphic.magnetic2.hitTestObject(this.magnetJoint.get_body2().graphic)) {
				this.magnet.graphic.light.set_visible(false);
				this.magnet.graphic.light.showBehavior("disable");
				this.magnetJoint2 = new nape_constraint_PivotJoint(this.magnet,this.magnetJoint.get_body2(),this.magnet.worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint.get_worldCOM().get_x(),this.magnetJointPoint.get_worldCOM().get_y())),this.magnetJoint.get_body2().worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint.get_worldCOM().get_x(),this.magnetJointPoint.get_worldCOM().get_y())));
				this.magnetJoint2.set_maxForce(5000);
				Storage.space.get_constraints().add(this.magnetJoint2);
				this.magnetJoint3 = new nape_constraint_PivotJoint(this.magnet,this.magnetJoint.get_body2(),this.magnet.worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint2.get_worldCOM().get_x(),this.magnetJointPoint2.get_worldCOM().get_y())),this.magnetJoint.get_body2().worldPointToLocal(new nape_geom_Vec2(this.magnetJointPoint2.get_worldCOM().get_x(),this.magnetJointPoint2.get_worldCOM().get_y())));
				this.magnetJoint3.set_maxForce(5000);
				Storage.space.get_constraints().add(this.magnetJoint3);
				Storage.space.get_constraints().remove(this.magnetJoint);
				this.magnetJoint = null;
				SoundManager.stopOneSound("SoundLoaderMagnet");
			}
		}
		if(!this.magnetActivate) {
			this.magnet.graphic.light.set_visible(false);
			this.magnet.graphic.light.showBehavior("disable");
			if(this.magnetJoint != null) {
				Storage.space.get_constraints().remove(this.magnetJoint);
				this.magnetJoint = null;
			}
			if(this.magnetJoint2 != null) {
				Storage.space.get_constraints().remove(this.magnetJoint2);
				this.magnetJoint2 = null;
			}
			if(this.magnetJoint3 != null) {
				Storage.space.get_constraints().remove(this.magnetJoint3);
				this.magnetJoint3 = null;
			}
		}
		if(this.truckLoaderBody.get_position().get_y() > 700) {
			this.goToRestartSimple(null);
		}
		this.lastTime = time;
	}
	,coolersCheck: function() {
		var _g1 = 0;
		var _g = this.coolers.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = this.coolers[i].blades;
			_g2.set_rotation(_g2.get_rotation() + 10);
		}
	}
	,stopLoaderWheelsRotation: function() {
		this.loaderLeftWheel.set_angularVel(0);
		this.loaderRightWheel.set_angularVel(0);
	}
	,checkTrucksPosition: function() {
		var trucksGo = true;
		var _g1 = 0;
		var _g = this.trucks.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.trucks[i].leftWheelTruck.get_position().get_x() < 810) {
				trucksGo = false;
			}
		}
		return trucksGo;
	}
	,doorsCheck: function(switchName) {
		var coef = 2;
		var additKoef = Storage.addKoef;
		var _g1 = 0;
		var _g = this.doors.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((js_Boot.__cast(this.doors[i].graphic , spritesheet_AnimatedSprite)).Switch == switchName) {
				this.doorTimer.stop();
				this.doorsCons[i].set_stiff(false);
				this.doorTimer.start();
				SoundManager.play("SoundDoor");
				if(this.doors[i].graphic.Closed == true) {
					if((js_Boot.__cast(this.doors[i].graphic , spritesheet_AnimatedSprite)).OpenDirection == "down") {
						var _g2 = this.doorsCons[i].get_anchor1();
						_g2.set_y(_g2.get_y() + ((js_Boot.__cast(this.doors[i].graphic , spritesheet_AnimatedSprite)).get_height() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "up") {
						var _g21 = this.doorsCons[i].get_anchor1();
						_g21.set_y(_g21.get_y() - (this.doors[i].graphic.get_height() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "left") {
						var _g22 = this.doorsCons[i].get_anchor1();
						_g22.set_x(_g22.get_x() - (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "right") {
						var _g23 = this.doorsCons[i].get_anchor1();
						_g23.set_x(_g23.get_x() + (this.doors[i].graphic.get_width() + additKoef - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "upright") {
						var _g24 = this.doorsCons[i].get_anchor1();
						_g24.set_y(_g24.get_y() - (this.doors[i].graphic.get_height() - coef));
						var _g25 = this.doorsCons[i].get_anchor1();
						_g25.set_x(_g25.get_x() + (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "downleft") {
						var _g26 = this.doorsCons[i].get_anchor1();
						_g26.set_y(_g26.get_y() + (this.doors[i].graphic.get_height() - coef));
						var _g27 = this.doorsCons[i].get_anchor1();
						_g27.set_x(_g27.get_x() - (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "upleft") {
						var _g28 = this.doorsCons[i].get_anchor1();
						_g28.set_y(_g28.get_y() - (this.doors[i].graphic.get_height() - coef));
						var _g29 = this.doorsCons[i].get_anchor1();
						_g29.set_x(_g29.get_x() - (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "downright") {
						var _g210 = this.doorsCons[i].get_anchor1();
						_g210.set_y(_g210.get_y() + (this.doors[i].graphic.get_height() - coef));
						var _g211 = this.doorsCons[i].get_anchor1();
						_g211.set_x(_g211.get_x() + (this.doors[i].graphic.get_width() - coef));
					}
					this.doors[i].graphic.Closed = false;
				} else {
					if(this.doors[i].graphic.OpenDirection == "down") {
						var _g212 = this.doorsCons[i].get_anchor1();
						_g212.set_y(_g212.get_y() - (this.doors[i].graphic.get_height() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "up") {
						var _g213 = this.doorsCons[i].get_anchor1();
						_g213.set_y(_g213.get_y() + (this.doors[i].graphic.get_height() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "left") {
						var _g214 = this.doorsCons[i].get_anchor1();
						_g214.set_x(_g214.get_x() + (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "right") {
						var _g215 = this.doorsCons[i].get_anchor1();
						_g215.set_x(_g215.get_x() - (this.doors[i].graphic.get_width() + additKoef - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "upright") {
						var _g216 = this.doorsCons[i].get_anchor1();
						_g216.set_y(_g216.get_y() + (this.doors[i].graphic.get_height() - coef));
						var _g217 = this.doorsCons[i].get_anchor1();
						_g217.set_x(_g217.get_x() - (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "downleft") {
						var _g218 = this.doorsCons[i].get_anchor1();
						_g218.set_y(_g218.get_y() - (this.doors[i].graphic.get_height() - coef));
						var _g219 = this.doorsCons[i].get_anchor1();
						_g219.set_x(_g219.get_x() + (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "upleft") {
						var _g220 = this.doorsCons[i].get_anchor1();
						_g220.set_y(_g220.get_y() + (this.doors[i].graphic.get_height() - coef));
						var _g221 = this.doorsCons[i].get_anchor1();
						_g221.set_x(_g221.get_x() + (this.doors[i].graphic.get_width() - coef));
					}
					if(this.doors[i].graphic.OpenDirection == "downright") {
						var _g222 = this.doorsCons[i].get_anchor1();
						_g222.set_y(_g222.get_y() - (this.doors[i].graphic.get_height() - coef));
						var _g223 = this.doorsCons[i].get_anchor1();
						_g223.set_x(_g223.get_x() - (this.doors[i].graphic.get_width() - coef));
					}
					this.doors[i].graphic.Closed = true;
				}
			}
		}
	}
	,checkTruckCargo: function(truckNumber) {
		var _g1 = 0;
		var _g = this.trucks[truckNumber].cargo.get_numChildren();
		while(_g1 < _g) {
			var b = _g1++;
			var _g3 = 0;
			var _g2 = this.boxArray.length;
			while(_g3 < _g2) {
				var l = _g3++;
				this.cargoString = Std.string((js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).get_name()).substring(0,Std.string((js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).get_name()).length - 1);
				if(this.cargoString == "SquareBox" || this.cargoString == "VerticalBox" || this.cargoString == "BigBo") {
					var cargoX = this.trucks[truckNumber].cargo.get_x() + this.trucks[truckNumber].cargo.getChildAt(b).get_x();
					var cargoY = this.trucks[truckNumber].cargo.get_y() + this.trucks[truckNumber].cargo.getChildAt(b).get_y();
					var newColorTransform = this.trucks[truckNumber].cargo.getChildAt(b).get_transform().get_colorTransform();
					if(Math.abs(this.boxArray[l].get_position().get_x() - cargoX) <= 3 && Math.abs(this.boxArray[l].get_position().get_y() - cargoY) <= 3 && this.boxArray[l].get_userData().gameData == this.cargoString) {
						this.trucks[truckNumber].boxCount++;
						this.boxArray[l].setShapeMaterials(new nape_phys_Material(0.2,0.2,0.38,0.7));
						this.boxArray[l].get_userData().isCargo = true;
						(js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).showBehavior("2");
						(js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).update(1);
						break;
					} else {
						this.boxArray[l].get_userData().isCargo = false;
						(js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).showBehavior("1");
						(js_Boot.__cast(this.trucks[truckNumber].cargo.getChildAt(b) , spritesheet_AnimatedSprite)).update(1);
					}
				}
			}
		}
	}
	,elevatorsSwitch: function(switchName) {
		var _g1 = 0;
		var _g = this.elevators.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Activate == switchName) {
				if(i == 0) {
					if(this.elevatorTimer1.running) {
						this.elevatorTimer1.stop();
					} else {
						(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = !(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						this.elevators[i].get_userData().started = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled) {
							if(SoundManager.checkOneSound("SoundLiftOn") == false) {
								SoundManager.play("SoundLiftOn");
							}
							this.elevators[i].get_userData().moving = true;
						} else {
							if(SoundManager.checkOneSound("SoundLiftOff") == true) {
								SoundManager.stopOneSound("SoundLiftOff");
							}
							this.elevators[i].get_userData().moving = false;
						}
					}
				}
				if(i == 1) {
					if(this.elevatorTimer2.running) {
						this.elevatorTimer2.stop();
					} else {
						(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = !(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						this.elevators[i].get_userData().started = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled) {
							if(SoundManager.checkOneSound("SoundLiftOn") == false) {
								SoundManager.play("SoundLiftOn");
							}
							this.elevators[i].get_userData().moving = true;
						} else {
							if(SoundManager.checkOneSound("SoundLiftOff") == true) {
								SoundManager.stopOneSound("SoundLiftOff");
							}
							this.elevators[i].get_userData().moving = false;
						}
					}
				}
				if(i == 2) {
					if(this.elevatorTimer3.running) {
						this.elevatorTimer3.stop();
					} else {
						(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = !(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						this.elevators[i].get_userData().started = (js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled;
						if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled) {
							if(SoundManager.checkOneSound("SoundLiftOn") == false) {
								SoundManager.play("SoundLiftOn");
							}
							this.elevators[i].get_userData().moving = true;
						} else {
							if(SoundManager.checkOneSound("SoundLiftOff") == true) {
								SoundManager.stopOneSound("SoundLiftOff");
							}
							this.elevators[i].get_userData().moving = false;
						}
					}
				}
			}
			if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).ChangeDirection == switchName) {
				if(i == 0) {
					this.elevatorTimer1.stop();
				}
				if(i == 1) {
					this.elevatorTimer2.stop();
				}
				if(i == 2) {
					this.elevatorTimer3.stop();
				}
				if((js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction == "down") {
					(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction = "up";
				} else {
					(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Direction = "down";
				}
				(js_Boot.__cast(this.elevators[i].graphic , spritesheet_AnimatedSprite)).Enabled = true;
			}
		}
	}
	,rollsSwitch: function(switchName) {
		var _g1 = 0;
		var _g = this.transporters.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Activate == switchName) {
				(js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Enabled = !(js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Enabled;
			}
			if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).ChangeDirection == switchName) {
				if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction == "left") {
					(js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction = "right";
				} else {
					(js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction = "left";
				}
			}
		}
	}
	,ButtonsCheck: function(delta) {
		var _g1 = 0;
		var _g = this.buttons.length;
		while(_g1 < _g) {
			var i = _g1++;
			(js_Boot.__cast(this.buttons[i] , CButton)).hitPoints = 0;
			var _g3 = 0;
			var _g2 = this.boxArray.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if((js_Boot.__cast(this.boxArray[j].graphic , spritesheet_AnimatedSprite)).hitTestObject(js_Boot.__cast(this.buttons[i].animB , spritesheet_AnimatedSprite))) {
					(js_Boot.__cast(this.buttons[i] , CButton)).hitPoints++;
					if(this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].colorB == "GreenButton" && this.buttons[i].animB.currentBehavior.name == "off") {
						this.buttons[i].animB.showBehavior("on");
						this.doorsCheck(this.buttons[i].sw);
						this.elevatorsSwitch(this.buttons[i].sw);
						this.rollsSwitch(this.buttons[i].sw);
						this.lampsSwitch(this.buttons[i].sw);
					}
					if((this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].animB.currentBehavior.name == "on" || this.buttons[i].animB.currentFrameIndex == 9 && this.buttons[i].animB.currentBehavior.name == "offon") && this.buttons[i].colorB == "OrangeButton") {
						this.buttons[i].animB.showBehavior("active");
						this.doorsCheck(this.buttons[i].sw);
						this.elevatorsSwitch(this.buttons[i].sw);
						this.rollsSwitch(this.buttons[i].sw);
						this.lampsSwitch(this.buttons[i].sw);
					}
					if(this.buttons[i].animB.currentFrameIndex >= 10 && this.buttons[i].colorB == "OrangeButton") {
						this.buttons[i].animB.showBehavior("off");
					}
					if((this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].animB.currentBehavior.name == "on" || this.buttons[i].animB.currentFrameIndex == 9 && this.buttons[i].animB.currentBehavior.name == "offon") && this.buttons[i].colorB == "BlueButton") {
						this.buttons[i].animB.showBehavior("active");
						this.doorsCheck(this.buttons[i].sw);
						this.elevatorsSwitch(this.buttons[i].sw);
						this.rollsSwitch(this.buttons[i].sw);
						this.lampsSwitch(this.buttons[i].sw);
					}
					if(this.buttons[i].animB.currentFrameIndex >= 10 && this.buttons[i].colorB == "BlueButton") {
						this.buttons[i].animB.showBehavior("off");
					}
				}
			}
			if((js_Boot.__cast(this.loaderLeftWheel.graphic , spritesheet_AnimatedSprite)).sensor.hitTestObject(this.buttons[i].animB) || (js_Boot.__cast(this.loaderRightWheel.graphic , spritesheet_AnimatedSprite)).sensor.hitTestObject(this.buttons[i].animB) || (js_Boot.__cast(this.magnet.graphic.magnet , spritesheet_AnimatedSprite)).hitTestObject(this.buttons[i].animB) || this.truckLoaderBody.graphic.hitTestObject(this.buttons[i].animB) || this.MiningLeftWheel.graphic.hitTestObject(this.buttons[i].animB) || this.MiningRightWheel.graphic.hitTestObject(this.buttons[i].animB) || this.MiningBody.graphic.hitTestObject(this.buttons[i].animB)) {
				(js_Boot.__cast(this.buttons[i] , CButton)).hitPoints++;
				if(this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].colorB == "GreenButton" && this.buttons[i].animB.currentBehavior.name == "off") {
					this.buttons[i].animB.showBehavior("on");
					this.doorsCheck(this.buttons[i].sw);
					this.elevatorsSwitch(this.buttons[i].sw);
					this.rollsSwitch(this.buttons[i].sw);
					this.lampsSwitch(this.buttons[i].sw);
				}
				if((this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].animB.currentBehavior.name == "on" || this.buttons[i].animB.currentFrameIndex == 9 && this.buttons[i].animB.currentBehavior.name == "offon") && this.buttons[i].colorB == "OrangeButton") {
					this.buttons[i].animB.showBehavior("active");
					this.doorsCheck(this.buttons[i].sw);
					this.elevatorsSwitch(this.buttons[i].sw);
					this.rollsSwitch(this.buttons[i].sw);
					this.lampsSwitch(this.buttons[i].sw);
				}
				if(this.buttons[i].animB.currentFrameIndex >= 10 && this.buttons[i].colorB == "OrangeButton") {
					this.buttons[i].animB.showBehavior("off");
				}
				if((this.buttons[i].animB.currentFrameIndex == 0 && this.buttons[i].animB.currentBehavior.name == "on" || this.buttons[i].animB.currentFrameIndex == 9 && this.buttons[i].animB.currentBehavior.name == "offon") && this.buttons[i].colorB == "BlueButton") {
					this.buttons[i].animB.showBehavior("active");
					this.doorsCheck(this.buttons[i].sw);
					this.elevatorsSwitch(this.buttons[i].sw);
					this.rollsSwitch(this.buttons[i].sw);
					this.lampsSwitch(this.buttons[i].sw);
				}
				if(this.buttons[i].animB.currentFrameIndex >= 10 && this.buttons[i].colorB == "BlueButton") {
					this.buttons[i].animB.showBehavior("off");
				}
			}
			if((js_Boot.__cast(this.buttons[i] , CButton)).hitPoints == 0) {
				if(this.buttons[i].animB.currentBehavior.name == "off" && this.buttons[i].colorB == "OrangeButton") {
					this.buttons[i].animB.showBehavior("offon");
					this.doorsCheck(this.buttons[i].sw);
					this.elevatorsSwitch(this.buttons[i].sw);
					this.rollsSwitch(this.buttons[i].sw);
					this.lampsSwitch(this.buttons[i].sw);
				}
				if(this.buttons[i].animB.currentBehavior.name == "off" && this.buttons[i].colorB == "BlueButton") {
					this.buttons[i].animB.showBehavior("offon");
				}
				if(this.buttons[i].animB.currentBehavior.name == "active" && this.buttons[i].animB.currentFrameIndex >= 19 && this.buttons[i].colorB == "OrangeButton") {
					this.buttons[i].animB.showBehavior("on");
					this.doorsCheck(this.buttons[i].sw);
					this.elevatorsSwitch(this.buttons[i].sw);
					this.rollsSwitch(this.buttons[i].sw);
					this.lampsSwitch(this.buttons[i].sw);
				}
				if(this.buttons[i].animB.currentBehavior.name == "active" && this.buttons[i].animB.currentFrameIndex >= 19 && this.buttons[i].colorB == "BlueButton") {
					this.buttons[i].animB.showBehavior("on");
				}
			}
			this.buttons[i].glowB.update(delta);
			this.buttons[i].animB.update(delta);
		}
	}
	,rollsCheck: function() {
		var _g1 = 0;
		var _g = this.transporters.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Enabled) {
				var _g3 = 0;
				var _g2 = this.transporters[i].transporterRolls.length;
				while(_g3 < _g2) {
					var j = _g3++;
					if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction == "right") {
						if(this.transporters[i].transporterRolls[j].get_angularVel() < 2) {
							var _g4 = this.transporters[i].transporterRolls[j];
							_g4.set_angularVel(_g4.get_angularVel() + (js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Speed);
						}
					}
					if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction == "left") {
						if(this.transporters[i].transporterRolls[j].get_angularVel() > -2) {
							var _g41 = this.transporters[i].transporterRolls[j];
							_g41.set_angularVel(_g41.get_angularVel() - (js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Speed);
						}
					}
				}
				if(SoundManager.checkOneSound("SoundFeedGo") == false) {
					SoundManager.play("SoundFeedGo");
				}
			} else {
				var _g31 = 0;
				var _g21 = this.transporters[i].transporterRolls.length;
				while(_g31 < _g21) {
					var js = _g31++;
					if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction == "right") {
						if(this.transporters[i].transporterRolls[js].get_angularVel() > 0) {
							var _g42 = this.transporters[i].transporterRolls[js];
							_g42.set_angularVel(_g42.get_angularVel() - 0.005);
						}
					}
					if((js_Boot.__cast(this.transporters[i].base.graphic , spritesheet_AnimatedSprite)).Direction == "left") {
						if(this.transporters[i].transporterRolls[js].get_angularVel() < 0) {
							var _g43 = this.transporters[i].transporterRolls[js];
							_g43.set_angularVel(_g43.get_angularVel() + 0.005);
						}
					}
				}
				if(SoundManager.checkOneSound("SoundFeedGo") == true) {
					SoundManager.stopOneSound("SoundFeedGo");
				}
			}
		}
	}
	,lampsSwitch: function(switchName) {
		var _g1 = 0;
		var _g = this.lamps.length;
		while(_g1 < _g) {
			var s = _g1++;
			if(this.lamps[s].Activate == switchName) {
				this.lamps[s].Enabled = !this.lamps[s].Enabled;
				if(this.lamps[s].Enabled) {
					this.lamps[s].showBehavior("enable");
				} else {
					this.lamps[s].showBehavior("disable");
				}
			}
		}
		var _g11 = 0;
		var _g2 = this.shadows.length;
		while(_g11 < _g2) {
			var s1 = _g11++;
			if(this.shadows[s1].Switch == switchName) {
				if(this.shadows[s1].currentBehavior.name == "enable" || this.shadows[s1].currentBehavior.name == "off") {
					this.shadows[s1].showBehavior("on");
				} else if(this.shadows[s1].currentBehavior.name == "disable" || this.shadows[s1].currentBehavior.name == "on") {
					this.shadows[s1].showBehavior("off");
				}
			}
		}
	}
	,overMouseSound: function(e) {
		if(SoundManager.pause == true) {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("selectDisable");
		} else {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("selectEnable");
		}
	}
	,outMouseSound: function(e) {
		if(SoundManager.pause == true) {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("noSelectDisable");
		} else {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("noSelectEnable");
		}
	}
	,overMouseSoundM: function(e) {
		if(SoundManager.loopPaused == true) {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("selectDisable");
		} else {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("selectEnable");
		}
	}
	,outMouseSoundM: function(e) {
		if(SoundManager.loopPaused == true) {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("noSelectDisable");
		} else {
			(js_Boot.__cast(e.currentTarget , spritesheet_AnimatedSprite)).showBehavior("noSelectEnable");
		}
	}
	,goToSound: function(e) {
		if(SoundManager.pause == false) {
			this.sound.showBehavior("selectDisable");
			SoundManager.stopSound();
		} else {
			this.sound.showBehavior("selectEnable");
			SoundManager.playSound();
		}
		SoundManager.play("SoundGameButonsClick");
	}
	,__class__: PlayState
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(js_Boot.isClass(f) || js_Boot.isEnum(f));
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Reflect.hasField(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var SoundManager = $hx_exports["SoundManager"] = function() { };
$hxClasses["SoundManager"] = SoundManager;
SoundManager.__name__ = ["SoundManager"];
SoundManager.init = function() {
	SoundManager.sounds = new haxe_ds_StringMap();
	SoundManager.pause = false;
	SoundManager.audioArray = ["SoundBlast","SoundBoxHit","SoundDoor","SoundFeedGo","SoundGameButonsClick","SoundGameButtonsRelease","SoundGameMusic","SoundLiftGo","SoundLiftOff","SoundLiftOn","SoundLoaderJump","SoundLoaderMagnet","SoundLoaderMove","SoundMenuMusic","SoundPress","SoundRollver","SoundSparks","SoundTruckEngineOff","SoundTruckEngineOn","SoundTruckEngineWorking","SoundTruckSignal","SoundWagonMove"];
	SoundManager.addSoundsOgg(SoundManager.audioArray);
};
SoundManager.addSoundsOgg = function(audioArray) {
	var _g1 = 0;
	var _g = audioArray.length;
	while(_g1 < _g) {
		var i = _g1++;
		SoundManager.addSound(audioArray[i]);
	}
};
SoundManager.setLevelSounds = function(level) {
	if(SoundManager.pause == false) {
		haxe_Log.trace("no sound",{ fileName : "SoundManager.hx", lineNumber : 112, className : "SoundManager", methodName : "setLevelSounds"});
	}
};
SoundManager.stopLevelSounds = function(level) {
	haxe_Log.trace("no sound",{ fileName : "SoundManager.hx", lineNumber : 179, className : "SoundManager", methodName : "stopLevelSounds"});
};
SoundManager.addSound = function(fn,name) {
	if(name == null) {
		name = fn;
	}
	var snd = new Howl({ src : ["sounds/" + fn + ".mp3","sounds/" + fn + ".ogg"]});
	snd.volume(0.3);
	SoundManager.sounds.set(name,snd);
};
SoundManager.play = function(key,looped) {
	if(looped == null) {
		looped = false;
	}
	if(SoundManager.pause == false) {
		if(key == "SoundGameMusic") {
			(js_Boot.__cast(SoundManager.sounds.get(key) , Howl)).play();
			SoundManager.sounds.get("SoundGameMusic").pos(SoundManager.position);
			SoundManager.sounds.get("SoundGameMusic").volume(0.2);
			SoundManager.sounds.get("SoundGameMusic").loop(true);
		} else {
			(js_Boot.__cast(SoundManager.sounds.get(key) , Howl)).play();
			if(looped == true) {
				SoundManager.sounds.get(key).loop(true);
			}
		}
		SoundManager.pause = false;
	}
};
SoundManager.stopSound = function(loop) {
	if(loop == null) {
		loop = false;
	}
	if(SoundManager.pause == false) {
		if(loop == true) {
			SoundManager.position = SoundManager.sounds.get("SoundGameMusic").pos;
			(js_Boot.__cast(SoundManager.sounds.get("SoundGameMusic") , Howl)).pause();
			SoundManager.loopPaused = true;
		}
		SoundManager.pause = true;
		SoundManager.stopLevelSounds(Storage.currentLevel);
	}
};
SoundManager.resumeLoop = function() {
	SoundManager.sounds.get("SoundGameMusic").pos(SoundManager.position);
	SoundManager.sounds.get("SoundGameMusic").volume(0.2);
	SoundManager.sounds.get("SoundGameMusic").loop(true);
	(js_Boot.__cast(SoundManager.sounds.get("SoundGameMusic") , Howl)).play();
	SoundManager.loopPaused = false;
};
SoundManager.stopOneSound = function(key) {
	(js_Boot.__cast(SoundManager.sounds.get(key) , Howl)).stop();
};
SoundManager.checkOneSound = function(key) {
	return (js_Boot.__cast(SoundManager.sounds.get(key) , Howl)).playing();
};
SoundManager.stopLoop = function() {
	SoundManager.position = SoundManager.sounds.get("SoundGameMusic").pos;
	(js_Boot.__cast(SoundManager.sounds.get("SoundGameMusic") , Howl)).pause();
	SoundManager.loopPaused = true;
};
SoundManager.playSound = function(loop) {
	if(loop == null) {
		loop = false;
	}
	if(SoundManager.pause == true && SoundManager.adsPause == false) {
		if(loop == true) {
			SoundManager.sounds.get("SoundGameMusic").pos(SoundManager.position);
			SoundManager.sounds.get("SoundGameMusic").volume(0.2);
			SoundManager.sounds.get("SoundGameMusic").loop(true);
			(js_Boot.__cast(SoundManager.sounds.get("SoundGameMusic") , Howl)).play();
			SoundManager.loopPaused = false;
		} else {
			SoundManager.sounds.get("SoundGameMusic").volume(0.3);
		}
		SoundManager.pause = false;
		SoundManager.setLevelSounds(Storage.currentLevel);
		Storage.resumeGame();
	}
};
var StarsAndScores = function() {
	this.starsCoefArray = [1,1.5,2];
	this.timeArray = [50,50,80,65,120,50,56,65,65,50,140,120,105,105,150,55,105,105,120,170,65,50,85,110,170,280,230,320,140,400,220];
};
$hxClasses["StarsAndScores"] = StarsAndScores;
StarsAndScores.__name__ = ["StarsAndScores"];
StarsAndScores.prototype = {
	timeArray: null
	,starsCoefArray: null
	,getScore: function(time,level) {
		return Std["int"](this.timeArray[level - 1] * 3 + 1 - time);
	}
	,getStars: function(time,level) {
		if(time <= this.timeArray[level - 1] * this.starsCoefArray[0]) {
			return 3;
		} else if(time <= this.timeArray[level - 1] * this.starsCoefArray[1]) {
			return 2;
		} else if(time <= this.timeArray[level - 1] * this.starsCoefArray[2]) {
			return 1;
		}
		return 0;
	}
	,__class__: StarsAndScores
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + Std["int"](this.tx) + ", " + Std["int"](this.ty) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = this.__transformX(px,py);
		point.y = this.__transformY(px,py);
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = this.__transformX(px,py);
		this.ty = this.__transformY(px,py);
	}
	,__class__: openfl_geom_Matrix
};
var nape_geom_Vec2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2"] = nape_geom_Vec2;
nape_geom_Vec2.__name__ = ["nape","geom","Vec2"];
nape_geom_Vec2.weak = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	return nape_geom_Vec2.get(x,y,true);
};
nape_geom_Vec2.get = function(x,y,weak) {
	if(weak == null) {
		weak = false;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec2 == null) {
		ret = new nape_geom_Vec2();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_$nape_geom_ZPP_$Vec2.get(x,y);
		ret.zpp_inner.outer = ret;
	} else {
		ret.setxy(x,y);
	}
	ret.zpp_inner.weak = weak;
	return ret;
};
nape_geom_Vec2.prototype = {
	zpp_inner: null
	,zpp_pool: null
	,dispose: function() {
		this.zpp_inner.immutable();
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec2;
		zpp_$nape_util_ZPP_$PubPool.poolVec2 = o;
		var o1 = inner;
		o1.free();
		o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
	}
	,copy: function(weak) {
		if(weak == null) {
			weak = false;
		}
		return nape_geom_Vec2.get(this.get_x(),this.get_y(),weak);
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		this.zpp_inner.immutable();
		if(this.get_x() != x) {
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		return this.get_x();
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		this.zpp_inner.immutable();
		if(this.get_y() != y) {
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this.get_y();
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y());
	}
	,lsq: function() {
		return this.get_x() * this.get_x() + this.get_y() * this.get_y();
	}
	,set: function(vector) {
		this.zpp_inner.immutable();
		var ret = this.setxy(vector.get_x(),vector.get_y());
		if(vector.zpp_inner.weak) {
			vector.dispose();
		}
		return ret;
	}
	,setxy: function(x,y) {
		this.zpp_inner.immutable();
		if(!(this.get_x() == x && this.get_y() == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,mul: function(scalar,weak) {
		if(weak == null) {
			weak = false;
		}
		return nape_geom_Vec2.get(this.get_x() * scalar,this.get_y() * scalar,weak);
	}
	,subeq: function(vector) {
		this.zpp_inner.immutable();
		this.setxy(this.get_x() - vector.get_x(),this.get_y() - vector.get_y());
		if(vector.zpp_inner.weak) {
			vector.dispose();
		}
		return this;
	}
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_Vec2
	,__properties__: {get_length:"get_length",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var zpp_$nape_util_ZPP_$PubPool = function() { };
$hxClasses["zpp_nape.util.ZPP_PubPool"] = zpp_$nape_util_ZPP_$PubPool;
zpp_$nape_util_ZPP_$PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
var zpp_$nape_geom_ZPP_$Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec2"] = zpp_$nape_geom_ZPP_$Vec2;
zpp_$nape_geom_ZPP_$Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_$nape_geom_ZPP_$Vec2.get = function(x,y,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret;
	if(zpp_$nape_geom_ZPP_$Vec2.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Vec2();
	} else {
		ret = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$Vec2.prototype = {
	_invalidate: null
	,_validate: null
	,validate: function() {
		if(this._validate != null) {
			this._validate();
		}
	}
	,invalidate: function() {
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,_immutable: null
	,_isimmutable: null
	,immutable: function() {
	}
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_geom_Vec2();
			var o = this.outer.zpp_inner;
			o.free();
			o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
			zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,weak: null
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,alloc: function() {
		this.weak = false;
	}
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.begin();
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		o._inuse = true;
		var temp = o;
		if(cur == null) {
			temp.next = this.begin();
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.next = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old.elem()._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.begin();
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,size: function() {
		return this.length;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,x: null
	,y: null
	,toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec2
};
var nape_dynamics_InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) {
		fluidMask = -1;
	}
	if(fluidGroup == null) {
		fluidGroup = 1;
	}
	if(sensorMask == null) {
		sensorMask = -1;
	}
	if(sensorGroup == null) {
		sensorGroup = 1;
	}
	if(collisionMask == null) {
		collisionMask = -1;
	}
	if(collisionGroup == null) {
		collisionGroup = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
	} else {
		this.zpp_inner = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.alloc();
	this.zpp_inner.outer = this;
	this.set_collisionGroup(collisionGroup);
	this.set_collisionMask(collisionMask);
	this.set_sensorGroup(sensorGroup);
	this.set_sensorMask(sensorMask);
	this.set_fluidGroup(fluidGroup);
	this.set_fluidMask(fluidMask);
};
$hxClasses["nape.dynamics.InteractionFilter"] = nape_dynamics_InteractionFilter;
nape_dynamics_InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape_dynamics_InteractionFilter.prototype = {
	zpp_inner: null
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.get_collisionGroup() != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.get_collisionGroup();
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.get_collisionMask() != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.get_collisionMask();
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.get_sensorGroup() != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.get_sensorGroup();
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.get_sensorMask() != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.get_sensorMask();
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.get_fluidGroup() != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.get_fluidGroup();
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidMask: function(fluidMask) {
		if(this.get_fluidMask() != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.get_fluidMask();
	}
	,__class__: nape_dynamics_InteractionFilter
	,__properties__: {set_fluidMask:"set_fluidMask",get_fluidMask:"get_fluidMask",set_fluidGroup:"set_fluidGroup",get_fluidGroup:"get_fluidGroup",set_sensorMask:"set_sensorMask",get_sensorMask:"get_sensorMask",set_sensorGroup:"set_sensorGroup",get_sensorGroup:"get_sensorGroup",set_collisionMask:"set_collisionMask",get_collisionMask:"get_collisionMask",set_collisionGroup:"set_collisionGroup",get_collisionGroup:"get_collisionGroup"}
};
var zpp_$nape_dynamics_ZPP_$InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.feature_cons();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionFilter"] = zpp_$nape_dynamics_ZPP_$InteractionFilter;
zpp_$nape_dynamics_ZPP_$InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_$nape_dynamics_ZPP_$InteractionFilter.prototype = {
	next: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_dynamics_InteractionFilter();
			var o = this.outer.zpp_inner;
			o.free();
			o.next = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,collisionGroup: null
	,collisionMask: null
	,shouldCollide: function(x) {
		if((this.collisionMask & x.collisionGroup) != 0) {
			return (x.collisionMask & this.collisionGroup) != 0;
		} else {
			return false;
		}
	}
	,sensorGroup: null
	,sensorMask: null
	,shouldSense: function(x) {
		if((this.sensorMask & x.sensorGroup) != 0) {
			return (x.sensorMask & this.sensorGroup) != 0;
		} else {
			return false;
		}
	}
	,fluidGroup: null
	,fluidMask: null
	,shouldFlow: function(x) {
		if((this.fluidMask & x.fluidGroup) != 0) {
			return (x.fluidMask & this.fluidGroup) != 0;
		} else {
			return false;
		}
	}
	,invalidate: function() {
		var cx_ite = this.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionFilter
};
var Storage = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["Storage"] = Storage;
Storage.__name__ = ["Storage"];
Storage.init = function(obj,_w,_h,_fr) {
	Storage.XX = _w;
	Storage.YY = _h;
	if(Storage.isMobileCheck == true) {
		var apple = isMobile.apple.device;
		if(apple) {
			Storage.frameRate = _fr - 5;
		} else {
			Storage.frameRate = _fr - 5;
		}
	} else {
		Storage.frameRate = _fr;
	}
	openfl_Lib.get_current().stage.set_frameRate(Storage.frameRate);
	Storage.creatorArray = [];
	Storage.decorArray = [];
	Storage.animationArray = [];
	Storage.gameSpace = obj;
	Storage.dynamicCbt = new nape_callbacks_CbType();
	Storage.balloonsCbt = new nape_callbacks_CbType();
	Storage.rocketCbt = new nape_callbacks_CbType();
	Storage.magnetCbt = new nape_callbacks_CbType();
	Storage.staticCbt = new nape_callbacks_CbType();
	Storage.waterCbt = new nape_callbacks_CbType();
	Storage.pigCbt = new nape_callbacks_CbType();
	Storage.starCbt = new nape_callbacks_CbType();
	Storage.kinematicCbt = new nape_callbacks_CbType();
	Storage.sensorCbt = new nape_callbacks_CbType();
	Storage.spikeCbt = new nape_callbacks_CbType();
	Storage.buttonCbt = new nape_callbacks_CbType();
	Storage.teleportCbt = new nape_callbacks_CbType();
	Storage.catcherCbt = new nape_callbacks_CbType();
	Storage.iceCbt = new nape_callbacks_CbType();
	Storage.saves = openfl_net_SharedObject.getLocal("loader5_math","/");
	Storage.InitialX = 700;
	Storage.InitialY = 500;
	openfl_Lib.trace("InitialX= " + Storage.InitialX + " InitialY= " + Storage.InitialY);
	Storage.initSaves();
};
Storage.blackScreenTween = function(p) {
	Storage.blackScreen = Storage.initSpriteUI("blank");
	Storage.blackScreen.set_width(720);
	Storage.blackScreen.set_height(500);
	Storage.blackScreen.set_x(350);
	Storage.blackScreen.set_y(250);
	Storage.theGame.addChild(Storage.blackScreen);
	Storage.blackScreen.mouseEnabled = false;
	motion_Actuate.tween(Storage.blackScreen,3,{ alpha : 0.01},true);
};
Storage.offsetPage = function() {
	Storage.theGame.set_x(0);
	Storage.theGame.set_y(0);
	var _g = Storage.theGame;
	_g.set_x(_g.get_x() + Storage.offSetX);
	var _g1 = Storage.theGame;
	_g1.set_y(_g1.get_y() + Storage.offSetY);
	Storage.theMenu.set_x(0);
	Storage.theMenu.set_y(0);
	var _g2 = Storage.theMenu;
	_g2.set_x(_g2.get_x() + Storage.offSetX);
	var _g3 = Storage.theMenu;
	_g3.set_y(_g3.get_y() + Storage.offSetY);
};
Storage.resizeGame = function() {
	if(Storage.XX > Storage.YY) {
		Storage.H = Storage.YY / 500;
		Storage.W = Storage.YY / 500;
		Storage.offSetX = Std["int"]((Storage.XX - 700 * Storage.H) / 2);
		Storage.offSetY = 0;
		if(Storage.offSetX < 0) {
			Storage.H = Storage.XX / 700;
			Storage.W = Storage.XX / 700;
			Storage.offSetX = Std["int"]((Storage.XX - 700 * Storage.H) / 2);
			Storage.offSetY = Std["int"]((Storage.YY - 500 * Storage.H) / 2);
		}
	} else {
		Storage.H = Storage.XX / 700;
		Storage.W = Storage.XX / 700;
		Storage.offSetY = Std["int"]((Storage.YY - 500 * Storage.H) / 2);
		Storage.offSetX = 0;
	}
};
Storage.initLevel = function(cSpr) {
	Storage.currentSprite = cSpr;
	Storage.InitialX = 700;
	Storage.InitialY = 500;
	Storage.levelState = "started";
	Storage.run = true;
	Storage.currentHintNumber = 0;
	Storage.starCounter = 0;
	Storage.ballonPushed = 0;
	Storage.balkaPushed = 0;
	Storage.currentDigitInPassword = 0;
	Storage.tweenCompleted = 0;
};
Storage.setXY = function(_x,_y) {
	Storage.XX = _x;
	Storage.YY = _y;
};
Storage.setSpace = function(_space) {
	Storage.space = _space;
};
Storage.clear = function() {
	Storage.space.clear();
	Storage.arrowCounter = 0;
	Storage.rayCastArray = [];
	Storage.rayForDelete = [];
	Storage.animationArray = [];
	Storage.decorArray = [];
	Storage.currentHintNumber = 0;
};
Storage.initSpriteUI = function(animStr) {
	var sprSheet = new spritesheet_Spritesheet();
	var currentBitmapData = openfl_utils_Assets.getBitmapData("img/ui/" + animStr + ".png");
	var animSprite;
	var dx = new nape_geom_Vec2(0,0);
	sprSheet = spritesheet_importers_BitmapImporter.create(currentBitmapData,1,1,currentBitmapData.width,currentBitmapData.height);
	animSprite = new spritesheet_AnimatedSprite(sprSheet,true);
	switch(animStr) {
	case "TruckBody2":
		dx.set_x(-42.5);
		dx.set_y(5.5);
		break;
	case "boardWall":
		dx.set_x(-20);
		dx.set_y(0);
		break;
	}
	sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],false,1,currentBitmapData.width / 2 - dx.get_x(),currentBitmapData.height / 2 - dx.get_y()));
	animSprite.showBehavior("normal");
	animSprite.set_name(animStr);
	return animSprite;
};
Storage.initSpriteBack = function(animStr) {
	var sprSheet = new spritesheet_Spritesheet();
	var currentBitmapData = openfl_utils_Assets.getBitmapData("img/play/ba" + animStr + ".png");
	var animSprite;
	sprSheet = spritesheet_importers_BitmapImporter.create(currentBitmapData,1,1,currentBitmapData.width,currentBitmapData.height);
	animSprite = new spritesheet_AnimatedSprite(sprSheet,true);
	sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],false,1,0,0));
	animSprite.showBehavior("normal");
	return animSprite;
};
Storage.initSaves = function() {
	Storage.levelStateArray = [];
	Storage.starArray = [];
	Storage.scoresArray = [];
	if(Storage.saves.data.levelStates == null) {
		var _g = 0;
		while(_g < 30) {
			var i = _g++;
			Storage.levelStateArray.push(0);
			Storage.starArray.push(0);
			Storage.scoresArray.push(0);
		}
		Storage.levelStateArray[0] = 1;
	} else {
		Storage.loadSaves();
	}
};
Storage.loadSaves = function() {
	Storage.levelStateArray = [];
	Storage.starArray = [];
	Storage.scoresArray = [];
	Storage.levelStateArray = Storage.saves.data.levelStates;
	Storage.starArray = Storage.saves.data.starArray;
	Storage.scoresArray = Storage.saves.data.scoresArray;
};
Storage.updateSaves = function() {
	Storage.saves.data.levelStates = Storage.levelStateArray;
	Storage.saves.data.starArray = Storage.starArray;
	Storage.saves.data.scoresArray = Storage.scoresArray;
	Storage.saves.flush();
};
Storage.initAnimation = function(animStr,from,_offSet) {
	if(_offSet == null) {
		_offSet = false;
	}
	if(from == null) {
		from = "";
	}
	var jsonData;
	var dxy = nape_geom_Vec2.weak(0,0);
	var destination = "";
	var jsonArray = [];
	var frameSprite;
	var sprSheet = new spritesheet_Spritesheet();
	var currentBitmapData = null;
	if(from != "ui") {
		if(Storage.checkSpriteForCommon(animStr) == false) {
			jsonData = tjson_TJSON.parse(openfl_utils_Assets.getText("json/level" + Std.string(Storage.currentLevel) + "/" + animStr + ".json"));
			currentBitmapData = openfl_utils_Assets.getBitmapData("json/level" + Std.string(Storage.currentLevel) + "/" + animStr + "Animation.png");
		} else {
			jsonData = tjson_TJSON.parse(openfl_utils_Assets.getText("json/common/" + animStr + ".json"));
			currentBitmapData = openfl_utils_Assets.getBitmapData("json/common/" + animStr + "Animation.png");
		}
	} else {
		jsonData = tjson_TJSON.parse(openfl_utils_Assets.getText("img/ui/" + animStr + ".json"));
		currentBitmapData = openfl_utils_Assets.getBitmapData("img/ui/" + animStr + "Animation.png");
	}
	jsonArray = jsonData.frames;
	var animSprite;
	sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],false,1));
	sprSheet.updateImage(currentBitmapData);
	var _g1 = 0;
	var _g = jsonArray.length;
	while(_g1 < _g) {
		var i = _g1++;
		frameSprite = new spritesheet_data_SpritesheetFrame();
		frameSprite.x = Std["int"](jsonArray[i].frame.x);
		frameSprite.y = Std["int"](jsonArray[i].frame.y);
		frameSprite.width = Std["int"](jsonArray[i].frame.w);
		frameSprite.height = Std["int"](jsonArray[i].frame.h);
		if(jsonArray[i].trimmed == false) {
			frameSprite.offsetX = -Std["int"](jsonArray[i].sourceSize.w / 2);
			frameSprite.offsetY = -Std["int"](jsonArray[i].sourceSize.h / 2);
		} else {
			switch(animStr) {
			case "Lamp":
				dxy.set_x(0);
				dxy.set_y(jsonArray[i].frame.h / 2);
				break;
			case "halfShadow":
				dxy.set_x(-50);
				dxy.set_y(-50);
				break;
			case "on_off":
				dxy.set_x(22);
				dxy.set_y(31);
				break;
			}
			if(_offSet == false) {
				frameSprite.offsetX = Std["int"](jsonArray[i].spriteSourceSize.x - dxy.get_x());
				frameSprite.offsetY = Std["int"](jsonArray[i].spriteSourceSize.y - dxy.get_y());
			} else {
				frameSprite.offsetX -= Std["int"](jsonArray[i].frame.w / 2 - dxy.get_x());
				frameSprite.offsetY -= Std["int"](jsonArray[i].frame.h / 2 - dxy.get_y());
			}
		}
		sprSheet.addFrame(frameSprite);
	}
	switch(animStr) {
	case "BtnGoo":case "BtnLeft":case "BtnRight":case "BtnUp":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "Button_silver":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],false,20));
		break;
	case "Creature2_Animation7":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],false,20,0,0));
		break;
	case "DangerBox1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		break;
	case "LEVEL":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[11],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[22],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[24],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("4",[25],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("5",[26],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("6",[27],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("7",[28],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("8",[29],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("9",[1],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("10",[2],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("11",[3],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("12",[4],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("13",[5],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("14",[6],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("15",[7],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("16",[8],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("17",[9],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("18",[10],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("19",[12],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("20",[13],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("21",[14],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("22",[15],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("23",[16],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("24",[17],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("25",[18],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("26",[19],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("27",[20],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("28",[21],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("29",[23],false,20));
		break;
	case "Lamp":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],false,20));
		break;
	case "LevelBtn":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],false,20,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],false,20,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("lock",[2],false,20,0,0));
		break;
	case "HalfShadow":case "Shadow":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("on",[0,1,2,3,4,5,6,7,8,9],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("off",[9,8,7,6,5,4,3,2,1,0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[9],false,20));
		break;
	case "TFXBoom":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,0],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,30));
		break;
	case "TFXSpark":case "TFXSparkL":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,0],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,30));
		break;
	case "TPFXLighting":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],true,30));
		break;
	case "TransformerVault":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[1],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("off",[2],false,30));
		break;
	case "BigBox":case "SquareBox1":case "SquareBox2":case "SquareBox3":case "VerticalBox1":case "VerticalBox2":case "VerticalBox3":case "VerticalBox4":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],false,20));
		break;
	case "acIcons":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "acorns":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "attraction":case "attraction2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("above",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[2],true,1,0,0));
		break;
	case "back":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		break;
	case "blueLightB":case "orangeLightB":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("active",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("off",[9],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("on",[0],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("offon",[10,11,12,13,14,15,16,17,18,19],false,30));
		break;
	case "boom":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12],false,10,0,0));
		break;
	case "btn_candy":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],false,20));
		break;
	case "creator":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("above",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[2],true,1,0,0));
		break;
	case "digit":
		var _g2 = 0;
		while(_g2 < 10) {
			var i1 = _g2++;
			sprSheet.addBehavior(new spritesheet_data_BehaviorData(i1 == null ? "null" : "" + i1,[i1],false,30));
		}
		break;
	case "egg":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],false,20,0,0));
		break;
	case "ftc_w_gfx_Candy":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "ftc_w_gfx_Fly":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2],true,20));
		break;
	case "ftc_w_gfx_GraySquare":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8],true,20));
		break;
	case "ftc_w_gfx_GraySquareIdle":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6],true,20));
		break;
	case "ftc_w_gfx_Lock3":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],false,20));
		break;
	case "ftc_w_gfx_Redball":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158],true,60));
		break;
	case "ftc_w_gfx_SnailBob":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1],false,20));
		break;
	case "ftc_w_gfx_hedgehog":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],true,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,1,0,0));
		break;
	case "ftc_w_gfx_hint0":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "ftc_w_gfx_hint2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "ftc_w_gfx_hint4":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "ftc_w_gfx_hint5":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "gfx_btnGameMenuSlider":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "gfx_ftc_CandyCollect_Effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11],false,20));
		break;
	case "gfx_ftc_Creature2_Animation2_Reverse":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],false,20));
		break;
	case "gfx_ftc_GiftCollect_Effect1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11],false,20));
		break;
	case "gfx_ftc_ItemHint_Effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7],false,20));
		break;
	case "gfx_ftc_StarCollect_Effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11],false,20));
		break;
	case "gfx_ftc_Star_Effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11],false,20));
		break;
	case "gfx_ftc_k_landscape":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],false,20));
		break;
	case "gfx_ftc_k_lever":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],false,20));
		break;
	case "gfx_ftc_k_lvl14_3hit_box":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],false,20));
		break;
	case "gfx_ftc_k_lvl14_box_Effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],false,20));
		break;
	case "gfx_ftc_k_lvl16_toy_magnet_button":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		break;
	case "gfx_ftc_k_lvl17_Creature2_AnimationJump":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],false,30,0,0));
		break;
	case "gfx_ftc_k_lvl18_box":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3],false,20));
		break;
	case "gfx_ftc_k_lvl18_flasher":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "gfx_ftc_k_lvl18_fur2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("4",[4],false,20));
		break;
	case "gfx_ftc_k_lvl18_oven":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11],true,20));
		break;
	case "gfx_ftc_k_lvl1_boom_effect":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10],false,20));
		break;
	case "gfx_ftc_k_lvl3_candy_sun":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234],true,60));
		break;
	case "gfx_ftc_k_lvl4_Creature3_Animation":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],false,20));
		break;
	case "gfx_ftc_k_lvl4_stone_1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],false,30));
		break;
	case "gfx_ftc_k_lvl4_stone_2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],false,30));
		break;
	case "gfx_ftc_k_lvl4_stone_3":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],false,30));
		break;
	case "gfx_ftc_k_lvl4_stone_4":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],false,30));
		break;
	case "gfx_ftc_k_no_paint":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,20));
		break;
	case "gfx_ftc_lvl10_Spider":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		break;
	case "gfx_ftc_lvl10_TvBtn":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "gfx_ftc_lvl10_WhiteNoise1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],true,20));
		break;
	case "gfx_ftc_lvl10_WhiteNoise2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[1],false,20));
		break;
	case "gfx_ftc_lvl13_PipeBtn01":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "gfx_ftc_lvl14_Lock3":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[1],true,1,0,0));
		break;
	case "gfx_ftc_lvl14_WoodenLockerDoor1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],false,20,0,0));
		break;
	case "gfx_ftc_lvl14_WoodenLockerDoor2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],false,20,0,0));
		break;
	case "gfx_ftc_lvl15_BigLamp":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],false,20));
		break;
	case "gfx_ftc_lvl15_CatPicturePart1_1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10],false,20));
		break;
	case "gfx_ftc_lvl15_CatPicturePart5":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10],false,20));
		break;
	case "gfx_ftc_lvl17_LevelItem_GreenBoxPart2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[3],true,20));
		break;
	case "gfx_ftc_lvl18_Door":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],false,20));
		break;
	case "gfx_ftc_lvl20_Btn":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		break;
	case "gfx_ftc_lvl20_PumpedBalloonAnimations":case "gfx_ftc_lvl20_PumpedBalloonAnimations2":case "gfx_ftc_lvl20_PumpedBalloonAnimations3":case "gfx_ftc_lvl20_PumpedBalloonAnimations4":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,0,1,1,2,2,3,3,4],false,20));
		break;
	case "gfx_ftc_lvl3_iMacBtn":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[1],false,20));
		break;
	case "gfx_ftc_lvl7_CandyBox":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],false,20));
		break;
	case "gfx_ftc_lvl7_Spring":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4],true,20));
		break;
	case "gfx_ftc_star":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],false,20));
		break;
	case "gfx_hint3":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4],false,20));
		break;
	case "gfx_hint7":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4],false,20));
		break;
	case "gfx_hintCandy":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "gfx_hintFingerPush":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],true,20));
		break;
	case "gfx_hintFingerSwipe1_X":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],true,20));
		break;
	case "gfx_hintFingerSwipe1_Y":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],true,20));
		break;
	case "gfx_hintReplay":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5],false,20));
		break;
	case "gfx_level10_LevelItem_Spider_Animation1":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],true,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],false,20));
		break;
	case "gfx_level10_LevelItem_Spider_Animation2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],false,20));
		break;
	case "greenLightB":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("on",[0,1,2,3,4,5,6,7,8,9],false,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("off",[0],false,30));
		break;
	case "hand":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6],true,15,0,0));
		break;
	case "hideZone":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,30,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13],false,30,0,0));
		break;
	case "hook":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("above",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[2],true,1,0,0));
		break;
	case "ice11":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,0,1,1,2,2,3,3,4,4],false,20));
		break;
	case "ice12":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,0,1,1,2,2,3,3,4,4],false,20));
		break;
	case "ice14":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,0,1,1,2,2,3,3,4,4,5,5],false,20));
		break;
	case "invader_blue":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "invader_green":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "invader_orange":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "invader_red":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "invader_violet":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],true,20));
		break;
	case "killer":case "killer2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("above",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[1],true,1,0,0));
		break;
	case "lIcons":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("4",[4],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("5",[5],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("6",[6],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("7",[7],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("8",[8],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("9",[9],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("10",[10],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("11",[11],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("12",[12],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("13",[13],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("14",[14],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("15",[15],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("16",[16],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("17",[17],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("18",[18],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("19",[19],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("20",[20],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("21",[21],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("22",[22],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("23",[23],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("24",[24],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("25",[25],true,1,0,0));
		break;
	case "levelNumbers":
		var _g3 = 0;
		while(_g3 < 60) {
			var i2 = _g3++;
			sprSheet.addBehavior(new spritesheet_data_BehaviorData(i2 == null ? "null" : "" + i2,[i2],false,30));
		}
		break;
	case "lightBlue":case "lightGreen":case "lightOrange":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],true,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],true,30));
		break;
	case "levels":case "lmenu":case "replay":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		break;
	case "menuMaxi":case "menuMini":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		break;
	case "musicMini":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("selectEnable",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("noSelectEnable",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("selectDisable",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("noSelectDisable",[3],true,1,0,0));
		break;
	case "next":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		break;
	case "outLight":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],true,30));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("disable",[0],true,30));
		break;
	case "pig":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normalBox",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("jumpBox",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("failBox",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("toastBox",[3],true,1,0,0));
		break;
	case "play":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],false,20));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],false,20));
		break;
	case "repulsion":case "repulsion2":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("normal",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("above",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[2],true,1,0,0));
		break;
	case "restartMaxi":case "restartMini":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("out",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("over",[1],true,1,0,0));
		break;
	case "roomNumber":
		var _g4 = 0;
		while(_g4 < 20) {
			var i3 = _g4++;
			sprSheet.addBehavior(new spritesheet_data_BehaviorData(i3 == null ? "null" : "" + i3,[i3],true,1,0,0));
		}
		break;
	case "soundMini":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("selectEnable",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("noSelectEnable",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("selectDisable",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("noSelectDisable",[3],true,1,0,0));
		break;
	case "splash":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7],false,15,0,0));
		break;
	case "complAcorn":case "star":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	case "timer16":
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("0",[0],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("1",[1],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("2",[2],true,1,0,0));
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("3",[3],true,1,0,0));
		break;
	default:
		sprSheet.addBehavior(new spritesheet_data_BehaviorData("enable",[0,1,2,3,4,5,6,7,8,9],false,1,24,24));
	}
	animSprite = new spritesheet_AnimatedSprite(sprSheet,true);
	animSprite.set_name(animStr);
	return animSprite;
};
Storage.resizeStage = function(st) {
	haxe_Log.trace("resize stage",{ fileName : "Storage.hx", lineNumber : 1275, className : "Storage", methodName : "resizeStage"});
	Storage.theMenu.set_scaleX(Storage.W);
	Storage.theGame.set_scaleX(Storage.W);
	Storage.theMenu.set_scaleY(Storage.H);
	Storage.theGame.set_scaleY(Storage.H);
};
Storage.checkUrl = function(a) {
	var url = js_Browser.get_location().host;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((js_Boot.__cast(url , String)).indexOf(a[i]) != -1) {
			return true;
		}
	}
	return false;
};
Storage.resumeGame = function() {
	haxe_Log.trace("resumeGame " + Storage.resumeType,{ fileName : "Storage.hx", lineNumber : 1445, className : "Storage", methodName : "resumeGame"});
	var _g = Storage.resumeType;
	switch(_g) {
	case "icons":
		Storage.iconsState.goToIcon();
		break;
	case "menu":
		Storage.menuState.goToPlay();
		break;
	case "restart":
		Storage.completedState.afterAdsRestart();
		break;
	case "restartPlay":
		Storage.playState.goToRestartAfter();
		break;
	default:
		Storage.completedState.afterAdsNext();
	}
};
Storage.checkSpriteForCommon = function(beh) {
	var n = Storage.commonSpriteArray.indexOf(beh);
	if(n != -1) {
		return true;
	} else {
		return false;
	}
};
Storage.roundBy = function(by,num) {
	var result = 0;
	result = Math.ceil(num * by) / by;
	return result;
};
Storage.__super__ = openfl_display_Sprite;
Storage.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: Storage
});
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,add: function(x) {
		this.b += Std.string(x);
	}
	,addChar: function(c) {
		this.b += String.fromCharCode(c);
	}
	,toString: function() {
		return this.b;
	}
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
var TransporterLine = function() {
	this.transporterRolls = [];
};
$hxClasses["TransporterLine"] = TransporterLine;
TransporterLine.__name__ = ["TransporterLine"];
TransporterLine.prototype = {
	transporterRolls: null
	,base: null
	,__class__: TransporterLine
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !js_Boot.isClass(cl)) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !js_Boot.isEnum(e)) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return Reflect.callMethod(e,f,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(js_Boot.isClass(v) || js_Boot.isEnum(v)) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumIndex = function(e) {
	return e[1];
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var $int = this1;
	if($int < 0) {
		return 4294967296.0 + $int;
	} else {
		return $int + 0.0;
	}
};
var Utils = function() { };
$hxClasses["Utils"] = Utils;
Utils.__name__ = ["Utils"];
Utils.setTint = function(tintColor,tintMultiplier) {
	var r = Std["int"](tintColor >> 16) & 255;
	var g = Std["int"](tintColor >> 8) & 255;
	var b = tintColor & 255;
	var redOffset = Math.round(r * tintMultiplier);
	var greenOffset = Math.round(g * tintMultiplier);
	var blueOffset = Math.round(b * tintMultiplier);
	var col = new openfl_geom_ColorTransform(tintMultiplier,tintMultiplier,tintMultiplier,1,redOffset,greenOffset,blueOffset,0);
	return col;
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.add("\nCalled from ");
		haxe_CallStack.itemToString(b,s);
	}
	return b.toString();
};
haxe_CallStack.itemToString = function(b,s) {
	switch(Type.enumIndex(s)) {
	case 0:
		b.add("a C function");
		break;
	case 1:
		var m = s[2];
		b.add("module ");
		b.add(m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.add(" (");
		}
		b.add(file);
		b.add(" line ");
		b.add(line);
		if(s1 != null) {
			b.add(")");
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.add(cname);
		b.add(".");
		b.add(meth);
		break;
	case 4:
		var n = s[2];
		b.add("local function #");
		b.add(n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.toString();
	}
	,serializeString: function(s) {
		var x = this.shash.get(s);
		if(x != null) {
			this.buf.add("R");
			this.buf.add(x);
			return;
		}
		this.shash.set(s,this.scount++);
		this.buf.add("y");
		s = StringTools.urlEncode(s);
		this.buf.add(s.length);
		this.buf.add(":");
		this.buf.add(s);
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.add("r");
				this.buf.add(i);
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.add("g");
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(Type.enumIndex(_g)) {
		case 0:
			this.buf.add("n");
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.add("z");
				return;
			}
			this.buf.add("i");
			this.buf.add(v1);
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.add("k");
			} else if(!isFinite(v2)) {
				this.buf.add(v2 < 0 ? "m" : "p");
			} else {
				this.buf.add("d");
				this.buf.add(v2);
			}
			break;
		case 3:
			this.buf.add(v ? "t" : "f");
			break;
		case 4:
			if(Std["is"](v,Class)) {
				var className = Type.getClassName(v);
				this.buf.add("A");
				this.serializeString(className);
			} else if(Std["is"](v,Enum)) {
				this.buf.add("B");
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.add("o");
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.add("a");
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.add("n");
							} else {
								this.buf.add("u");
								this.buf.add(ucount);
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.add("n");
					} else {
						this.buf.add("u");
						this.buf.add(ucount);
					}
				}
				this.buf.add("h");
				break;
			case Date:
				var d = v;
				this.buf.add("v");
				this.buf.add(d.getTime());
				break;
			case List:
				this.buf.add("l");
				var v3 = v;
				var i1 = v3.iterator();
				while(i1.hasNext()) {
					var i2 = i1.next();
					this.serialize(i2);
				}
				this.buf.add("h");
				break;
			case haxe_ds_IntMap:
				this.buf.add("q");
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.add(":");
					this.buf.add(k1);
					this.serialize(v4.get(k1));
				}
				this.buf.add("h");
				break;
			case haxe_ds_ObjectMap:
				this.buf.add("M");
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					Reflect.setField(k3,"__id__",id);
					this.serialize(v5.get(k3));
				}
				this.buf.add("h");
				break;
			case haxe_ds_StringMap:
				this.buf.add("b");
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(v6.get(k5));
				}
				this.buf.add("h");
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.add("s");
				this.buf.add(Math.ceil(v7.length * 8 / 6));
				this.buf.add(":");
				var i3 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i4 = _g11++;
						b64[i4] = HxOverrides.cca(haxe_Serializer.BASE64,i4);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i3 < max) {
					var b1 = v7.get(i3++);
					var b2 = v7.get(i3++);
					var b3 = v7.get(i3++);
					this.buf.addChar(b64[b1 >> 2]);
					this.buf.addChar(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.addChar(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.addChar(b64[b3 & 63]);
				}
				if(i3 == max) {
					var b11 = v7.get(i3++);
					var b21 = v7.get(i3++);
					this.buf.addChar(b64[b11 >> 2]);
					this.buf.addChar(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.addChar(b64[b21 << 2 & 63]);
				} else if(i3 == max + 1) {
					var b12 = v7.get(i3++);
					this.buf.addChar(b64[b12 >> 2]);
					this.buf.addChar(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.add("C");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.add("g");
				} else {
					this.buf.add("c");
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.add(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.add(":");
				this.buf.add(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.add(":");
			var l1 = v["length"];
			this.buf.add(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i5 = _g12++;
				this.serialize(v[i5]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[StringTools.fastCodeAt(haxe_Unserializer.BASE64,i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			this.resolver = haxe__$Unserializer_NullResolver.get_instance();
		} else {
			this.resolver = r;
		}
	}
	,get: function(p) {
		return StringTools.fastCodeAt(this.buf,p);
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.get(this.pos);
			if(StringTools.isEof(c)) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return Std.parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.get(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			Reflect.setField(o,k,v);
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.get(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.get(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.get(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.get(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.get(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.get(this.pos) != 104) {
				var s1 = this.unserialize();
				h1.set(s1,this.unserialize());
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = Type.getEnumConstructs(edecl)[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.get(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.get(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				h2.set(i,this.unserialize());
				c1 = this.get(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.get(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = haxe_io_Bytes.alloc(size);
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c2 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c11 << 2 | c2 >> 4);
				var c3 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c2 << 4 | c3 >> 2);
				var c4 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c3 << 6 | c4);
			}
			if(rest >= 2) {
				var c12 = codes[StringTools.fastCodeAt(buf5,i1++)];
				var c21 = codes[StringTools.fastCodeAt(buf5,i1++)];
				bytes.set(bpos++,c12 << 2 | c21 >> 4);
				if(rest == 3) {
					var c31 = codes[StringTools.fastCodeAt(buf5,i1++)];
					bytes.set(bpos++,c21 << 4 | c31 >> 2);
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.get(this.pos) >= 48 && this.get(this.pos) <= 57 && this.get(this.pos + 1) >= 48 && this.get(this.pos + 1) <= 57 && this.get(this.pos + 2) >= 48 && this.get(this.pos + 2) <= 57 && this.get(this.pos + 3) >= 48 && this.get(this.pos + 3) <= 57 && this.get(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.get(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = StringTools.urlDecode(s2);
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.__properties__ = {get_instance:"get_instance"};
haxe__$Unserializer_NullResolver.get_instance = function() {
	if(haxe__$Unserializer_NullResolver.instance == null) {
		haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
	}
	return haxe__$Unserializer_NullResolver.instance;
};
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.sub = function(s,pos,len) {
	return HxOverrides.substr(s,pos,len);
};
haxe_Utf8.prototype = {
	__b: null
	,addChar: function(c) {
		this.__b += String.fromCharCode(c);
	}
	,toString: function() {
		return this.__b;
	}
	,__class__: haxe_Utf8
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = StringTools.fastCodeAt(s,i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | StringTools.fastCodeAt(s,i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,get: function(pos) {
		return this.b[pos];
	}
	,set: function(pos,v) {
		this.b[pos] = v & 255;
	}
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,getData: function() {
		return this.b.bufferValue;
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		var _g = bytes.length % 3;
		switch(_g) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = Std["int"](b.length * 8 / nbits);
		var out = haxe_io_Bytes.alloc(size + (b.length * 8 % nbits == 0 ? 0 : 1));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.get(pin++);
			}
			curbits -= nbits;
			out.set(pout++,base.get(buf >> curbits & mask));
		}
		if(curbits > 0) {
			out.set(pout++,base.get(buf << nbits - curbits & mask));
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.get(i1)] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = haxe_io_Bytes.alloc(size);
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.get(pin++)];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.set(pout++,buf >> curbits & 255);
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		return this.map.get(this.keys[this.index++]);
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,isReserved: function(key) {
		return __map_reserved[key] != null;
	}
	,set: function(key,value) {
		if(this.isReserved(key)) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(this.isReserved(key)) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(this.isReserved(key)) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(this.isReserved(key)) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = Std["int"](sig);
		var sig_h = Std["int"](sig / 4294967296.0);
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,__class__: haxe_io_Path
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.isClass = function(o) {
	return o.__name__;
};
js_Boot.isEnum = function(e) {
	return e.__ename__;
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (js_Boot.isClass(o) || js_Boot.isEnum(o))) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.__properties__ = {get_supported:"get_supported",get_navigator:"get_navigator",get_location:"get_location",get_document:"get_document",get_window:"get_window"};
js_Browser.get_window = function() {
	return window;
};
js_Browser.get_document = function() {
	return window.document;
};
js_Browser.get_location = function() {
	return window.location;
};
js_Browser.get_navigator = function() {
	return window.navigator;
};
js_Browser.get_supported = function() {
	return typeof(js_Browser.get_window()) != "undefined";
};
js_Browser.getLocalStorage = function() {
	try {
		var s = js_Browser.get_window().localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
var js_Lib = function() { };
$hxClasses["js.Lib"] = js_Lib;
js_Lib.__name__ = ["js","Lib"];
js_Lib.__properties__ = {get_undefined:"get_undefined"};
js_Lib.get_undefined = function() {
	return undefined;
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(Std["is"](arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(Std["is"](arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = ["lime","_internal","backend","html5","GameDeviceData"];
lime__$internal_backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = ["lime","_internal","backend","html5","HTML5AudioSource"];
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	completed: null
	,gain: null
	,id: null
	,length: null
	,loops: null
	,parent: null
	,playing: null
	,position: null
	,dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = Std["int"](this.parent.buffer.__srcHowl.seek(this.id) * 1000) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return Std["int"](this.parent.buffer.__srcHowl.duration() * 1000);
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && ($_=this.parent.buffer.__srcHowl,$bind($_,$_.pos)) != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(js_Browser.get_window().navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = ["lime","_internal","backend","html5","HTML5HTTPRequest"];
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE"});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		var _g = queueItem.type;
		switch(_g) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = js_Browser.get_document().createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(js_Browser.get_location().hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(js_Browser.get_location().protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(js_Browser.get_location().port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || StringTools.startsWith(uri,"data:")) {
		image.addEventListener("load",function(event) {
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event1) {
			promise.progress(event1.loaded,event1.total);
		},false);
		image.addEventListener("error",function(event2) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event2.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img1) {
				promise.complete(img1);
			});
		};
		request.onerror = function(event3) {
			promise.error(event3.message);
		};
		request.onprogress = function(event4) {
			if(event4.lengthComputable) {
				promise.progress(event4.loaded,event4.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	binary: null
	,parent: null
	,request: null
	,validStatus0: null
	,init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var key = this.parent.formData.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				if(query.length > 0) {
					query += "&";
				}
				query += StringTools.urlEncode(key1) + "=" + StringTools.urlEncode(Std.string(this.parent.formData.get(key1)));
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.getData());
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY"});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT"});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event1) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Reflect.hasField(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Reflect.hasField(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	attributes.context.type = "dom";
	attributes.context.version = "";
	if(Reflect.hasField(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = js_Browser.get_window().devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Reflect.hasField(attributes,"width") ? attributes.width : 0;
	this.setHeight = Reflect.hasField(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(Std["is"](element,HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = js_Browser.get_document().createElement("div");
	} else {
		this.canvas = js_Browser.get_document().createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style1 = this.div.style;
		style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style1.setProperty("transform","translate3D(0,0,0)",null);
		style1.position = "relative";
		style1.overflow = "hidden";
		style1.setProperty("-webkit-user-select","none",null);
		style1.setProperty("-moz-user-select","none",null);
		style1.setProperty("-ms-user-select","none",null);
		style1.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = js_Browser.get_window().innerWidth;
			parent.__height = js_Browser.get_window().innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Reflect.hasField(attributes,"resizable") && attributes.resizable || !Reflect.hasField(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		js_Browser.get_document().addEventListener("dragstart",function(e) {
			if(e.target.nodeName.toLowerCase() == "img") {
				e.preventDefault();
				return false;
			}
			return true;
		},false);
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = ["lime","_internal","backend","html5","HTML5Window"];
lime__$internal_backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,cacheElementHeight: null
	,cacheElementWidth: null
	,cacheMouseX: null
	,cacheMouseY: null
	,cursor: null
	,currentTouches: null
	,parent: null
	,primaryTouch: null
	,renderType: null
	,resizeElement: null
	,scale: null
	,setHeight: null
	,setWidth: null
	,textInputEnabled: null
	,unusedTouchesPool: null
	,close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Reflect.hasField(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Reflect.hasField(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Reflect.hasField(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Reflect.hasField(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = { alpha : transparentBackground || colorDepth > 16, antialias : Reflect.hasField(contextAttributes,"antialiasing"), depth : Reflect.hasField(contextAttributes,"depth") ? contextAttributes.depth : true, premultipliedAlpha : true, stencil : Reflect.hasField(contextAttributes,"stencil") && contextAttributes.stencil, preserveDrawingBuffer : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,handleContextEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if(this.parent.onMouseUp.canceled) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		event.preventDefault();
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					js_Browser.get_window().addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if(this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				js_Browser.get_window().removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			var _g1 = event.deltaMode;
			switch(_g1) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			event.preventDefault();
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.set(data.identifier,touch);
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.get(data.identifier);
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					var _g2 = event.type;
					switch(_g2) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,setClipboard: function(value) {
		var inputEnabled = this.textInputEnabled;
		this.setTextInputEnabled(true);
		var cacheText = lime__$internal_backend_html5_HTML5Window.textInput.value;
		lime__$internal_backend_html5_HTML5Window.textInput.value = value;
		lime__$internal_backend_html5_HTML5Window.textInput.select();
		if(js_Browser.get_document().queryCommandEnabled("copy")) {
			js_Browser.get_document().execCommand("copy");
		}
		lime__$internal_backend_html5_HTML5Window.textInput.value = cacheText;
		this.setTextInputEnabled(inputEnabled);
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = null;
			} else {
				var tmp;
				switch(Type.enumIndex(value)) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setFrameRate: function(value) {
		if(this.parent.application != null) {
			if(value >= 60) {
				if(this.parent == this.parent.application.get_window()) {
					this.parent.application.__backend.framePeriod = -1;
				}
			} else if(value > 0) {
				if(this.parent == this.parent.application.get_window()) {
					this.parent.application.__backend.framePeriod = 1000 / value;
				}
			} else if(this.parent == this.parent.application.get_window()) {
				this.parent.application.__backend.framePeriod = 1000;
			}
		}
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = js_Browser.get_document().createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(js_Browser.get_window().navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = js_Browser.get_window().innerWidth;
			elementHeight = js_Browser.get_window().innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = ["lime","_internal","graphics","ImageCanvasUtil"];
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),Std["int"](sourceRect.x + sourceImage.offsetX),Std["int"](sourceRect.y + sourceImage.offsetY),Std["int"](sourceRect.width),Std["int"](sourceRect.height),Std["int"](destPoint.x + image.offsetX),Std["int"](destPoint.y + image.offsetY),Std["int"](sourceRect.width),Std["int"](sourceRect.height));
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = js_Browser.get_document().createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = ["lime","_internal","graphics","ImageDataUtil"];
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.row(y);
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(Type.enumIndex(destChannel)) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(Type.enumIndex(sourceChannel)) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.row(y);
		destPosition = destView.row(y);
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel;
		var destPixel;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = Std["int"](sourceImage.buffer.bitsPerPixel / 8);
		var destBytesPerPixel = Std["int"](image.buffer.bitsPerPixel / 8);
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g1 = 0;
				var _g = destView.height;
				while(_g1 < _g) {
					var y = _g1++;
					sourcePosition = sourceView.row(y);
					destPosition = destView.row(y);
					var _g3 = 0;
					var _g2 = destView.width;
					while(_g3 < _g2) {
						var x = _g3++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						if(destPremultiplied) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g11 = 0;
				var _g4 = destView.height;
				while(_g11 < _g4) {
					var y1 = _g11++;
					sourcePosition = sourceView.row(y1);
					destPosition = destView.row(y1);
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g12 = 0;
				var _g5 = destView.height;
				while(_g12 < _g5) {
					var y2 = _g12++;
					sourcePosition = sourceView.row(y2);
					destPosition = destView.row(y2);
					var _g31 = 0;
					var _g21 = destView.width;
					while(_g31 < _g21) {
						var x1 = _g31++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,alphaImage.width,alphaImage.height));
			alphaView.offset(sourceView.x,sourceView.y);
			destView.clip(Std["int"](destPoint.x),Std["int"](destPoint.y),alphaView.width,alphaView.height);
			if(blend) {
				var _g13 = 0;
				var _g6 = destView.height;
				while(_g13 < _g6) {
					var y3 = _g13++;
					sourcePosition = sourceView.row(y3);
					destPosition = destView.row(y3);
					alphaPosition = alphaView.row(y3);
					var _g32 = 0;
					var _g22 = destView.width;
					while(_g32 < _g22) {
						var x2 = _g32++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(destPremultiplied) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value4 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value4 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value5 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value6 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
							var value7 = lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value7 & 255;
							if(destPremultiplied) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(destFormat) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g14 = 0;
				var _g7 = destView.height;
				while(_g14 < _g7) {
					var y4 = _g14++;
					sourcePosition = sourceView.row(y4);
					destPosition = destView.row(y4);
					alphaPosition = alphaView.row(y4);
					var _g33 = 0;
					var _g23 = destView.width;
					while(_g33 < _g23) {
						var x3 = _g33++;
						switch(sourceFormat) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(sourcePremultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(alphaFormat) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						var value8 = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value8 & 255;
						if(destPremultiplied) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(destFormat) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this2 = 0;
		var rgba1 = this2;
		rgba1 = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.row(y);
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	var sourceImagePremultiplied = sourceImage.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	if(sourceImagePremultiplied) {
		sourceImage.set_premultiplied(false);
	}
	var boxesForGauss = function(sigma,n) {
		var wIdeal = Math.sqrt(12 * sigma * sigma / n + 1);
		var wl = Math.floor(wIdeal);
		if(wl % 2 == 0) {
			--wl;
		}
		var wu = wl + 2;
		var mIdeal = (12 * sigma * sigma - n * wl * wl - 4 * n * wl - 3 * n) / (-4 * wl - 4);
		var m = Math.round(mIdeal);
		var sizes = [];
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			sizes.push(i < m ? wl : wu);
		}
		return sizes;
	};
	var boxBlurH = function(imgA,imgB,w,h,r,off) {
		var iarr = 1 / (r + r + 1);
		var _g11 = 0;
		var _g2 = h;
		while(_g11 < _g2) {
			var i1 = _g11++;
			var ti = i1 * w;
			var li = ti;
			var ri = ti + r;
			var fv = imgA[ti * 4 + off];
			var lv = imgA[(ti + w - 1) * 4 + off];
			var val = (r + 1) * fv;
			var _g3 = 0;
			var _g21 = r;
			while(_g3 < _g21) {
				var j = _g3++;
				val = val + imgA[(ti + j) * 4 + off];
			}
			var _g31 = 0;
			var _g22 = r + 1;
			while(_g31 < _g22) {
				var j1 = _g31++;
				val = val + (imgA[ri * 4 + off] - fv);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++ti;
			}
			var _g32 = r + 1;
			var _g23 = w - r;
			while(_g32 < _g23) {
				var j2 = _g32++;
				val = val + (imgA[ri * 4 + off] - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++ri;
				++li;
				++ti;
			}
			var _g33 = w - r;
			var _g24 = w;
			while(_g33 < _g24) {
				var j3 = _g33++;
				val = val + (lv - imgA[li * 4 + off]);
				imgB[ti * 4 + off] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val) * iarr);
				++li;
				++ti;
			}
		}
	};
	var boxBlurT = function(imgA1,imgB1,w1,h1,r1,off1) {
		var iarr1 = 1 / (r1 + r1 + 1);
		var ws = w1 * 4;
		var _g12 = 0;
		var _g4 = w1;
		while(_g12 < _g4) {
			var i2 = _g12++;
			var ti1 = i2 * 4 + off1;
			var li1 = ti1;
			var ri1 = ti1 + r1 * ws;
			var fv1 = imgA1[ti1];
			var lv1 = imgA1[ti1 + ws * (h1 - 1)];
			var val1 = (r1 + 1) * fv1;
			var _g34 = 0;
			var _g25 = r1;
			while(_g34 < _g25) {
				var j4 = _g34++;
				val1 = val1 + imgA1[ti1 + j4 * ws];
			}
			var _g35 = 0;
			var _g26 = r1 + 1;
			while(_g35 < _g26) {
				var j5 = _g35++;
				val1 = val1 + (imgA1[ri1] - fv1);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				ri1 += ws;
				ti1 += ws;
			}
			var _g36 = r1 + 1;
			var _g27 = h1 - r1;
			while(_g36 < _g27) {
				var j6 = _g36++;
				val1 = val1 + (imgA1[ri1] - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ri1 += ws;
				ti1 += ws;
			}
			var _g37 = h1 - r1;
			var _g28 = h1;
			while(_g37 < _g28) {
				var j7 = _g37++;
				val1 = val1 + (lv1 - imgA1[li1]);
				imgB1[ti1] = Math.round(_$UInt_UInt_$Impl_$.toFloat(val1) * iarr1);
				li1 += ws;
				ti1 += ws;
			}
		}
	};
	var boxBlur = function(imgA2,imgB2,w2,h2,bx,by) {
		var _g13 = 0;
		var _g5 = imgA2.length;
		while(_g13 < _g5) {
			var i3 = _g13++;
			imgB2[i3] = imgA2[i3];
		}
		var boxBlur1 = Std["int"](bx);
		boxBlurH(imgB2,imgA2,w2,h2,boxBlur1,0);
		var boxBlur2 = Std["int"](bx);
		boxBlurH(imgB2,imgA2,w2,h2,boxBlur2,1);
		var boxBlur3 = Std["int"](bx);
		boxBlurH(imgB2,imgA2,w2,h2,boxBlur3,2);
		var boxBlur4 = Std["int"](bx);
		boxBlurH(imgB2,imgA2,w2,h2,boxBlur4,3);
		var boxBlur5 = Std["int"](by);
		boxBlurT(imgA2,imgB2,w2,h2,boxBlur5,0);
		var boxBlur6 = Std["int"](by);
		boxBlurT(imgA2,imgB2,w2,h2,boxBlur6,1);
		var boxBlur7 = Std["int"](by);
		boxBlurT(imgA2,imgB2,w2,h2,boxBlur7,2);
		var boxBlur8 = Std["int"](by);
		boxBlurT(imgA2,imgB2,w2,h2,boxBlur8,3);
	};
	var imgB3 = image.get_data();
	var imgA3 = sourceImage.get_data();
	var w3 = Std["int"](sourceRect.width);
	var h3 = Std["int"](sourceRect.height);
	var bx1 = Std["int"](blurX);
	var by1 = Std["int"](blurY);
	var oX = Std["int"](destPoint.x);
	var oY = Std["int"](destPoint.y);
	var n1 = quality * 2 - 1;
	var rng = Math.pow(2,quality) * 0.125;
	var bxs = boxesForGauss(bx1 * rng,n1);
	var bys = boxesForGauss(by1 * rng,n1);
	var offset = Std["int"]((w3 * oY + oX) * 4);
	boxBlur(imgA3,imgB3,w3,h3,(bxs[0] - 1) / 2,(bys[0] - 1) / 2);
	var bIndex = 1;
	var _g14 = 0;
	var _g6 = Std["int"](n1 / 2);
	while(_g14 < _g6) {
		var i4 = _g14++;
		boxBlur(imgB3,imgA3,w3,h3,(bxs[bIndex] - 1) / 2,(bys[bIndex] - 1) / 2);
		boxBlur(imgA3,imgB3,w3,h3,(bxs[bIndex + 1] - 1) / 2,(bys[bIndex + 1] - 1) / 2);
		bIndex += 2;
	}
	var x;
	var y;
	if(offset <= 0) {
		y = 0;
		while(y < h3) {
			x = 0;
			while(x < w3) {
				lime__$internal_graphics_ImageDataUtil.translatePixel(imgB3,sourceImage.get_rect(),image.get_rect(),destPoint,x,y,strength);
				++x;
			}
			++y;
		}
	} else {
		y = h3 - 1;
		while(y >= 0) {
			x = w3 - 1;
			while(x >= 0) {
				lime__$internal_graphics_ImageDataUtil.translatePixel(imgB3,sourceImage.get_rect(),image.get_rect(),destPoint,x,y,strength);
				--x;
			}
			--y;
		}
	}
	image.dirty = true;
	image.version++;
	sourceImage.dirty = true;
	sourceImage.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	if(sourceImagePremultiplied) {
		sourceImage.set_premultiplied(true);
	}
	if(imgB3 == image.get_data()) {
		return image;
	}
	return sourceImage;
};
lime__$internal_graphics_ImageDataUtil.calculateSourceOffset = function(sourceRect,destPoint,destX,destY) {
	var sourceX = destX - Std["int"](destPoint.x);
	var sourceY = destY - Std["int"](destPoint.y);
	if(sourceX < 0 || sourceY < 0 || sourceX >= sourceRect.width || sourceY >= sourceRect.height) {
		return -1;
	} else {
		return 4 * (sourceY * Std["int"](sourceRect.width) + sourceX);
	}
};
lime__$internal_graphics_ImageDataUtil.translatePixel = function(imgB,sourceRect,destRect,destPoint,destX,destY,strength) {
	var d = 4 * (destY * Std["int"](destRect.width) + destX);
	var s = lime__$internal_graphics_ImageDataUtil.calculateSourceOffset(sourceRect,destPoint,destX,destY);
	if(s < 0) {
		imgB[d] = imgB[d + 1] = imgB[d + 2] = imgB[d + 3] = 0;
	} else {
		imgB[d] = imgB[s];
		imgB[d + 1] = imgB[s + 1];
		imgB[d + 2] = imgB[s + 2];
		var a = Std["int"](_$UInt_UInt_$Impl_$.toFloat(imgB[s + 3]) * strength);
		imgB[d + 3] = a < 0 ? 0 : a > 255 ? 255 : a;
	}
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = Std["int"](data.length / 4);
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = Std["int"](data.length / 4);
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	var _g = image.get_format();
	switch(_g) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	var _g1 = length;
	while(_g2 < _g1) {
		var i = _g2++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = Std["int"](data.length / 4);
	var pixel;
	var _g1 = 0;
	var _g = length;
	while(_g1 < _g) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = ["lime","_internal","graphics","_ImageDataUtil","ImageDataView"];
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,byteOffset: null
	,image: null
	,rect: null
	,stride: null
	,tempRect: null
	,clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,offset: function(x,y) {
		if(x < 0) {
			this.rect.x += x;
			if(this.rect.x < 0) {
				this.rect.x = 0;
			}
		} else {
			this.rect.x += x;
			this.rect.width -= x;
		}
		if(y < 0) {
			this.rect.y += y;
			if(this.rect.y < 0) {
				this.rect.y = 0;
			}
		} else {
			this.rect.y += y;
			this.rect.height -= y;
		}
		this.__update();
	}
	,row: function(y) {
		return this.byteOffset + this.stride * y;
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_unifill_Exception = function() {
};
$hxClasses["lime._internal.unifill.Exception"] = lime__$internal_unifill_Exception;
lime__$internal_unifill_Exception.__name__ = ["lime","_internal","unifill","Exception"];
lime__$internal_unifill_Exception.prototype = {
	__class__: lime__$internal_unifill_Exception
};
var lime__$internal_unifill_InvalidCodeUnitSequence = function(index) {
	lime__$internal_unifill_Exception.call(this);
	this.index = index;
};
$hxClasses["lime._internal.unifill.InvalidCodeUnitSequence"] = lime__$internal_unifill_InvalidCodeUnitSequence;
lime__$internal_unifill_InvalidCodeUnitSequence.__name__ = ["lime","_internal","unifill","InvalidCodeUnitSequence"];
lime__$internal_unifill_InvalidCodeUnitSequence.__super__ = lime__$internal_unifill_Exception;
lime__$internal_unifill_InvalidCodeUnitSequence.prototype = $extend(lime__$internal_unifill_Exception.prototype,{
	index: null
	,toString: function() {
		return "InvalidCodeUnitSequence(index: " + this.index + ")";
	}
	,__class__: lime__$internal_unifill_InvalidCodeUnitSequence
});
var lime__$internal_unifill_InternalEncoding = function() { };
$hxClasses["lime._internal.unifill.InternalEncoding"] = lime__$internal_unifill_InternalEncoding;
lime__$internal_unifill_InternalEncoding.__name__ = ["lime","_internal","unifill","InternalEncoding"];
lime__$internal_unifill_InternalEncoding.codePointAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt(this2,index);
};
lime__$internal_unifill_InternalEncoding.charAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	var c = StringTools.fastCodeAt(this3,index);
	var this4 = HxOverrides.substr(this3,index,lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width(c));
	var this5 = this4;
	return this5;
};
lime__$internal_unifill_InternalEncoding.codePointCount = function(s,beginIndex,endIndex) {
	var this1 = s;
	var this2 = this1;
	return lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount(this2,beginIndex,endIndex);
};
lime__$internal_unifill_InternalEncoding.codePointWidthAt = function(s,index) {
	var this1 = s;
	var this2 = this1;
	var c = StringTools.fastCodeAt(this2,index);
	return lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width(c);
};
lime__$internal_unifill_InternalEncoding.offsetByCodePoints = function(s,index,codePointOffset) {
	var this1 = s;
	var this2 = this1;
	var this3 = this2;
	if(codePointOffset >= 0) {
		var index1 = index;
		var len = this3.length;
		var i = 0;
		while(i < codePointOffset && index1 < len) {
			var c = StringTools.fastCodeAt(this3,index1);
			index1 += lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width(c);
			++i;
		}
		return index1;
	} else {
		var index2 = index;
		var count = 0;
		while(count < -codePointOffset && 0 < index2) {
			index2 -= lime__$internal_unifill__$Utf16_Utf16Impl.find_prev_code_point((function(this4) {
				return function(i1) {
					return StringTools.fastCodeAt(this4[0],i1);
				};
			})([this3]),index2);
			++count;
		}
		return index2;
	}
};
var lime__$internal_unifill_InternalEncodingIter = function(s,beginIndex,endIndex) {
	this.i = 0;
	this.string = s;
	this.index = beginIndex;
	this.endIndex = endIndex;
};
$hxClasses["lime._internal.unifill.InternalEncodingIter"] = lime__$internal_unifill_InternalEncodingIter;
lime__$internal_unifill_InternalEncodingIter.__name__ = ["lime","_internal","unifill","InternalEncodingIter"];
lime__$internal_unifill_InternalEncodingIter.prototype = {
	string: null
	,index: null
	,endIndex: null
	,hasNext: function() {
		return this.index < this.endIndex;
	}
	,i: null
	,next: function() {
		this.i = this.index;
		this.index += lime__$internal_unifill_InternalEncoding.codePointWidthAt(this.string,this.index);
		return this.i;
	}
	,__class__: lime__$internal_unifill_InternalEncodingIter
};
var lime__$internal_unifill_Unicode = function() { };
$hxClasses["lime._internal.unifill.Unicode"] = lime__$internal_unifill_Unicode;
lime__$internal_unifill_Unicode.__name__ = ["lime","_internal","unifill","Unicode"];
lime__$internal_unifill_Unicode.decodeSurrogate = function(hi,lo) {
	return hi - 55232 << 10 | lo & 1023;
};
lime__$internal_unifill_Unicode.isHighSurrogate = function(code) {
	if(55296 <= code) {
		return code <= 56319;
	} else {
		return false;
	}
};
lime__$internal_unifill_Unicode.isLowSurrogate = function(code) {
	if(56320 <= code) {
		return code <= 57343;
	} else {
		return false;
	}
};
var lime__$internal_unifill_Unifill = function() { };
$hxClasses["lime._internal.unifill.Unifill"] = lime__$internal_unifill_Unifill;
lime__$internal_unifill_Unifill.__name__ = ["lime","_internal","unifill","Unifill"];
lime__$internal_unifill_Unifill.uLength = function(s) {
	return lime__$internal_unifill_InternalEncoding.codePointCount(s,0,s.length);
};
lime__$internal_unifill_Unifill.uCharAt = function(s,index) {
	var i = lime__$internal_unifill_InternalEncoding.offsetByCodePoints(s,0,index);
	return lime__$internal_unifill_InternalEncoding.charAt(s,i);
};
lime__$internal_unifill_Unifill.uCharCodeAt = function(s,index) {
	var i = lime__$internal_unifill_InternalEncoding.offsetByCodePoints(s,0,index);
	return lime__$internal_unifill_InternalEncoding.codePointAt(s,i);
};
lime__$internal_unifill_Unifill.uIndexOf = function(s,value,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	var index = s.indexOf(value,lime__$internal_unifill_InternalEncoding.offsetByCodePoints(s,0,startIndex));
	if(index >= 0) {
		return lime__$internal_unifill_InternalEncoding.codePointCount(s,0,index);
	} else {
		return -1;
	}
};
lime__$internal_unifill_Unifill.uSubstring = function(s,startIndex,endIndex) {
	var si = startIndex < 0 ? 0 : lime__$internal_unifill_InternalEncoding.offsetByCodePoints(s,0,startIndex);
	var ei = endIndex == null ? s.length : endIndex < 0 ? 0 : lime__$internal_unifill_InternalEncoding.offsetByCodePoints(s,0,endIndex);
	return s.substring(si,ei);
};
lime__$internal_unifill_Unifill.uCompare = function(a,b) {
	var aiter = new lime__$internal_unifill_InternalEncodingIter(a,0,a.length);
	var biter = new lime__$internal_unifill_InternalEncodingIter(b,0,b.length);
	while(aiter.hasNext() && biter.hasNext()) {
		var acode = lime__$internal_unifill_InternalEncoding.codePointAt(a,aiter.next());
		var bcode = lime__$internal_unifill_InternalEncoding.codePointAt(b,biter.next());
		if(acode < bcode) {
			return -1;
		}
		if(acode > bcode) {
			return 1;
		}
	}
	if(biter.hasNext()) {
		return -1;
	}
	if(aiter.hasNext()) {
		return 1;
	}
	return 0;
};
var lime__$internal_unifill__$Utf16_Utf16_$Impl_$ = {};
$hxClasses["lime._internal.unifill._Utf16.Utf16_Impl_"] = lime__$internal_unifill__$Utf16_Utf16_$Impl_$;
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.__name__ = ["lime","_internal","unifill","_Utf16","Utf16_Impl_"];
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointAt = function(this1,index) {
	return lime__$internal_unifill__$Utf16_Utf16Impl.decode_code_point(this1.length,function(i) {
		return StringTools.fastCodeAt(this1,i);
	},index);
};
lime__$internal_unifill__$Utf16_Utf16_$Impl_$.codePointCount = function(this1,beginIndex,endIndex) {
	var index = beginIndex;
	var i = 0;
	while(index < endIndex) {
		var c = StringTools.fastCodeAt(this1,index);
		index += lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width(c);
		++i;
	}
	return i;
};
var lime__$internal_unifill__$Utf16_Utf16Impl = function() { };
$hxClasses["lime._internal.unifill._Utf16.Utf16Impl"] = lime__$internal_unifill__$Utf16_Utf16Impl;
lime__$internal_unifill__$Utf16_Utf16Impl.__name__ = ["lime","_internal","unifill","_Utf16","Utf16Impl"];
lime__$internal_unifill__$Utf16_Utf16Impl.code_point_width = function(c) {
	if(!lime__$internal_unifill_Unicode.isHighSurrogate(c)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16Impl.find_prev_code_point = function(accessor,index) {
	var c = accessor(index - 1);
	if(!lime__$internal_unifill_Unicode.isLowSurrogate(c)) {
		return 1;
	} else {
		return 2;
	}
};
lime__$internal_unifill__$Utf16_Utf16Impl.decode_code_point = function(len,accessor,index) {
	if(index < 0 || len <= index) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
	}
	var hi = accessor(index);
	if(lime__$internal_unifill_Unicode.isHighSurrogate(hi)) {
		if(index + 1 < 0 || len <= index + 1) {
			throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
		}
		var lo = accessor(index + 1);
		if(lime__$internal_unifill_Unicode.isLowSurrogate(lo)) {
			return lime__$internal_unifill_Unicode.decodeSurrogate(hi,lo);
		} else {
			throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
		}
	} else if(lime__$internal_unifill_Unicode.isLowSurrogate(hi)) {
		throw new js__$Boot_HaxeError(new lime__$internal_unifill_InvalidCodeUnitSequence(index));
	} else {
		return hi;
	}
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if (e instanceof js__$Boot_HaxeError) e = e.val;
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	error: null
	,isComplete: null
	,isError: null
	,value: null
	,__completeListeners: null
	,__errorListeners: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = ["lime","app","_Future","FutureWork"];
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","_Event_Float_Float_Int_Void"];
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Float_Float_Void"];
lime_app__$Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = ["lime","app","_Event_Float_Float_lime_ui_MouseButton_Void"];
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = ["lime","app","_Event_Float_Float_lime_ui_MouseWheelMode_Void"];
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Float_Void"];
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = ["lime","app","_Event_Int_Float_Void"];
lime_app__$Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = ["lime","app","_Event_Int_Int_Void"];
lime_app__$Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = ["lime","app","_Event_Int_Void"];
lime_app__$Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","_Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","_Event_String_Int_Int_Void"];
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = ["lime","app","_Event_String_Void"];
lime_app__$Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = ["lime","app","_Event_Void_Void"];
lime_app__$Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$haxe_$Function_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_haxe_Function_Void"] = lime_app__$Event_$haxe_$Function_$Void;
lime_app__$Event_$haxe_$Function_$Void.__name__ = ["lime","app","_Event_haxe_Function_Void"];
lime_app__$Event_$haxe_$Function_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$haxe_$Function_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","_Event_lime_graphics_RenderContext_Void"];
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadAxis_Float_Void"];
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","_Event_lime_ui_GamepadButton_Void"];
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","_Event_lime_ui_Gamepad_Void"];
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","_Event_lime_ui_Joystick_Void"];
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","_Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","_Event_lime_ui_Touch_Void"];
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = ["lime","app","_Event_lime_ui_Window_Void"];
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g = this.type;
			switch(Type.enumIndex(_g)) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.fromBase64 = function(base64,type) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromFile(path);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	var _image = new lime_graphics_Image(buffer);
	_image.type = lime_graphics_ImageType.CANVAS;
	return _image;
};
lime_graphics_Image.loadFromBase64 = function(base64,type) {
	if(base64 == null || type == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + base64);
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime_graphics_Image.loadFromBase64(lime_graphics_Image.__base64Encode(bytes),type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.get(0) == 255 && bytes.get(1) == 216 && bytes.get(bytes.length - 2) == 255) {
		return bytes.get(bytes.length - 1) == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.get(0) == 137 && bytes.get(1) == 80 && bytes.get(2) == 78 && bytes.get(3) == 71 && bytes.get(4) == 13 && bytes.get(5) == 10 && bytes.get(6) == 26) {
		return bytes.get(7) == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,type: null
	,version: null
	,width: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(Type.enumIndex(_g)) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		var _g = this.type;
		switch(Type.enumIndex(_g)) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(Type.enumIndex(sourceChannel)) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(Type.enumIndex(destChannel)) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		var _g = this.type;
		switch(Type.enumIndex(_g)) {
		case 0:
			if(alphaImage != null || sourceImage.type != lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(Type.enumIndex(_g)) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this2 = 0;
					var argb2 = this2;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var this3 = 0;
					var argb3 = this3;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >>> 24 & 255 & 255) << 16 | (rgba1 >>> 16 & 255 & 255) << 8 | rgba1 >>> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return;
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			var _g = this.type;
			if(Type.enumIndex(_g) == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			var _g = this.type;
			switch(Type.enumIndex(_g)) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			var _g1 = this.type;
			if(Type.enumIndex(_g1) == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {get_rect:"get_rect",set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_format:"set_format",get_format:"get_format",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = js_Browser.get_document().createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = js_Browser.get_document().createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(Std["is"](value,Image)) {
			this.__srcImage = value;
		} else if(Std["is"](value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = ["lime","graphics","RenderContext"];
lime_graphics_RenderContext.prototype = {
	attributes: null
	,canvas2D: null
	,dom: null
	,type: null
	,version: null
	,webgl: null
	,webgl2: null
	,window: null
	,__class__: lime_graphics_RenderContext
};
var lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGL2RenderContext.WebGL2RenderContext_Impl_"] = lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$;
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.__name__ = ["lime","graphics","_WebGL2RenderContext","WebGL2RenderContext_Impl_"];
lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
var lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$ = {};
$hxClasses["lime.graphics._WebGLRenderContext.WebGLRenderContext_Impl_"] = lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$;
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.__name__ = ["lime","graphics","_WebGLRenderContext","WebGLRenderContext_Impl_"];
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData = function(this1,target,srcData,usage) {
	this1.bufferData(target,srcData,usage);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv = function(this1,location,transpose,v) {
	this1.uniformMatrix2fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv = function(this1,location,transpose,v) {
	this1.uniformMatrix3fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv = function(this1,location,transpose,v) {
	this1.uniformMatrix4fv(location,transpose,v);
};
lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.fromWebGL2RenderContext = function(gl) {
	return gl;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.prototype = {
	clip: function() {
	}
	,identityMatrix: function() {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,rectangle: function(x,y,width,height) {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,set_matrix: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_matrix:"set_matrix"}
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = ["lime","graphics","opengl","ext","KHR_debug"];
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	DEBUG_OUTPUT_SYNCHRONOUS: null
	,DEBUG_NEXT_LOGGED_MESSAGE_LENGTH: null
	,DEBUG_CALLBACK_FUNCTION: null
	,DEBUG_CALLBACK_USER_PARAM: null
	,DEBUG_SOURCE_API: null
	,DEBUG_SOURCE_WINDOW_SYSTEM: null
	,DEBUG_SOURCE_SHADER_COMPILER: null
	,DEBUG_SOURCE_THIRD_PARTY: null
	,DEBUG_SOURCE_APPLICATION: null
	,DEBUG_SOURCE_OTHER: null
	,DEBUG_TYPE_ERROR: null
	,DEBUG_TYPE_DEPRECATED_BEHAVIOR: null
	,DEBUG_TYPE_UNDEFINED_BEHAVIOR: null
	,DEBUG_TYPE_PORTABILITY: null
	,DEBUG_TYPE_PERFORMANCE: null
	,DEBUG_TYPE_OTHER: null
	,DEBUG_TYPE_MARKER: null
	,DEBUG_TYPE_PUSH_GROUP: null
	,DEBUG_TYPE_POP_GROUP: null
	,DEBUG_SEVERITY_NOTIFICATION: null
	,MAX_DEBUG_GROUP_STACK_DEPTH: null
	,DEBUG_GROUP_STACK_DEPTH: null
	,BUFFER: null
	,SHADER: null
	,PROGRAM: null
	,QUERY: null
	,SAMPLER: null
	,MAX_LABEL_LENGTH: null
	,MAX_DEBUG_MESSAGE_LENGTH: null
	,MAX_DEBUG_LOGGED_MESSAGES: null
	,DEBUG_LOGGED_MESSAGES: null
	,DEBUG_SEVERITY_HIGH: null
	,DEBUG_SEVERITY_MEDIUM: null
	,DEBUG_SEVERITY_LOW: null
	,DEBUG_OUTPUT: null
	,CONTEXT_FLAG_DEBUG_BIT: null
	,STACK_OVERFLOW: null
	,STACK_UNDERFLOW: null
	,__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable = this2;
	}
	var value;
	lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__alphaTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__blueTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__greenTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	if(lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable == null) {
		var this2 = new Uint8Array(256);
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable[i] = value;
	}
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__redTable;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		var this2;
		if(array != null) {
			this2 = new Float32Array(array);
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math._RGBA.RGBA_Impl_"] = lime_math__$RGBA_RGBA_$Impl_$;
lime_math__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","_RGBA","RGBA_Impl_"];
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: lime_math_Rectangle
	,__properties__: {get_right:"get_right",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.prototype = {
	w: null
	,x: null
	,y: null
	,z: null
	,__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = ["lime","media","AudioBuffer"];
lime_media_AudioBuffer.fromBase64 = function(base64String) {
	if(base64String == null) {
		return null;
	}
	if(base64String.indexOf(",") == -1) {
		base64String = "data:" + lime_media_AudioBuffer.__getCodec(haxe_crypto_Base64.decode(base64String)) + ";base64," + base64String;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : [base64String], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + haxe_crypto_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromVorbisFile = function(vorbisFile) {
	return null;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.get(2);
			var _g1 = bytes.get(1);
			var _g2 = bytes.get(0);
			switch(_g2) {
			case 73:
				if(_g1 == 68) {
					if(_g == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g1) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g3 = bytes.get(2);
		var _g11 = bytes.get(1);
		var _g21 = bytes.get(0);
		switch(_g21) {
		case 73:
			if(_g11 == 68) {
				if(_g3 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g11) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "AudioBuffer.hx", lineNumber : 443, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	__srcHowl: null
	,set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = ["lime","media","AudioContext"];
lime_media_AudioContext.prototype = {
	html5: null
	,openal: null
	,type: null
	,web: null
	,__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = ["lime","media","AudioManager"];
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = ["lime","media","AudioSource"];
lime_media_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,__backend: null
	,dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_position:"set_position",get_position:"get_position",set_loops:"set_loops",set_length:"set_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = ["lime","media","HTML5AudioContext"];
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = ["lime","media","OpenALAudioContext"];
lime_media_OpenALAudioContext.prototype = {
	createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = ["lime","media","openal","ALC"];
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.processContext = function(context) {
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = ["lime","net","_IHTTPRequest"];
lime_net__$IHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = ["lime","net","_HTTPRequest","AbstractHTTPRequest"];
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	contentType: null
	,data: null
	,enableResponseHeaders: null
	,followRedirects: null
	,formData: null
	,headers: null
	,method: null
	,responseData: null
	,responseHeaders: null
	,responseStatus: null
	,timeout: null
	,uri: null
	,userAgent: null
	,withCredentials: null
	,__backend: null
	,__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = ["lime","net","_HTTPRequest_Bytes"];
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = ["lime","net","_HTTPRequest_String"];
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = ["lime","net","HTTPRequestHeader"];
lime_net_HTTPRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = ["lime","net","_HTTPRequest_lime_utils_Bytes"];
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils__$Bytes_Bytes_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = ["lime","net","_HTTPRequest_openfl_utils_ByteArray"];
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.get_window();
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_DisplayMode = function() { };
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = ["lime","system","Sensor"];
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.set(id,sensor);
	return sensor;
};
lime_system_Sensor.prototype = {
	id: null
	,onUpdate: null
	,type: null
	,__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxClasses["lime.system.SensorType"] = { __ename__ : ["lime","system","SensorType"], __constructs__ : ["ACCELEROMETER"] };
lime_system_SensorType.ACCELEROMETER = ["ACCELEROMETER",0];
lime_system_SensorType.ACCELEROMETER.toString = $estr;
lime_system_SensorType.ACCELEROMETER.__enum__ = lime_system_SensorType;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_endianness:"get_endianness"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(lime_system_System.__applicationEntryPoint.exists(projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = js_Browser.get_document().getElementById(element);
		} else if(element == null) {
			htmlElement = js_Browser.get_document().createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			js_Browser.get_window().console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Reflect.hasField(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		(lime_system_System.__applicationEntryPoint.get(projectName))(config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getTimer = function() {
	return Std["int"](js_Browser.get_window().performance.now());
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		js_Browser.get_window().open(url,target);
	}
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.set(projectName,entryPoint);
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var this1;
		if(arrayBuffer != null) {
			this1 = new Uint8Array(arrayBuffer,0);
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var this2;
		if(arrayBuffer != null) {
			this2 = new Uint16Array(arrayBuffer,0);
		} else {
			this2 = null;
		}
		var uint16array = this2;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$haxe_$Function_$Void();
	this.onError = new lime_app__$Event_$haxe_$Function_$Void();
	this.onComplete = new lime_app__$Event_$haxe_$Function_$Void();
	this.doWork = new lime_app__$Event_$haxe_$Function_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onRun: null
	,queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	this.ascender = 0;
	this.descender = 0;
	this.height = 0;
	this.numGlyphs = 0;
	this.underlinePosition = 0;
	this.underlineThickness = 0;
	this.unitsPerEM = 0;
	if(this.__fontID != null) {
		if(lime_utils_Assets.isLocal(this.__fontID)) {
			this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
		}
	} else if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = js_Browser.get_document().createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = js_Browser.get_document().createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	js_Browser.get_document().body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontID: null
	,__fontPath: null
	,__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = js_Browser.get_navigator().userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (js_Browser.get_document().fonts && ($_=js_Browser.get_document().fonts,$bind($_,$_.load)))) {
			js_Browser.get_document().fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_1) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 538, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				if(node1.offsetWidth == width1) {
					loaded = node2.offsetWidth != width2;
				} else {
					loaded = true;
				}
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					js_Browser.get_window().clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "Font.hx", lineNumber : 574, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = js_Browser.get_window().setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var lime_text__$UTF8String_UTF8String_$Impl_$ = {};
$hxClasses["lime.text._UTF8String.UTF8String_Impl_"] = lime_text__$UTF8String_UTF8String_$Impl_$;
lime_text__$UTF8String_UTF8String_$Impl_$.__name__ = ["lime","text","_UTF8String","UTF8String_Impl_"];
lime_text__$UTF8String_UTF8String_$Impl_$.__properties__ = {get_length:"get_length"};
lime_text__$UTF8String_UTF8String_$Impl_$.charAt = function(this1,index) {
	return lime__$internal_unifill_Unifill.uCharAt(this1,index);
};
lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt = function(this1,index) {
	if(index < 0 || index >= lime__$internal_unifill_Unifill.uLength(this1)) {
		return null;
	}
	return lime__$internal_unifill_Unifill.uCharCodeAt(this1,index);
};
lime_text__$UTF8String_UTF8String_$Impl_$.indexOf = function(this1,str,startIndex) {
	if(startIndex == null) {
		startIndex = 0;
	}
	return lime__$internal_unifill_Unifill.uIndexOf(this1,str,startIndex);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substr = function(this1,pos,len) {
	if(len == null) {
		len = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this1) - pos;
	}
	return haxe_Utf8.sub(this1,pos,len);
};
lime_text__$UTF8String_UTF8String_$Impl_$.substring = function(this1,startIndex,endIndex) {
	return lime__$internal_unifill_Unifill.uSubstring(this1,startIndex,endIndex);
};
lime_text__$UTF8String_UTF8String_$Impl_$.equals = function(a,b) {
	if(a == null || b == null) {
		return a == b;
	}
	return lime__$internal_unifill_Unifill.uCompare(a,b) == 0;
};
lime_text__$UTF8String_UTF8String_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return lime__$internal_unifill_Unifill.uLength(this1);
	}
};
var lime_text_harfbuzz_HBSegmentProperties = function() { };
$hxClasses["lime.text.harfbuzz.HBSegmentProperties"] = lime_text_harfbuzz_HBSegmentProperties;
lime_text_harfbuzz_HBSegmentProperties.__name__ = ["lime","text","harfbuzz","HBSegmentProperties"];
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.exists(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.set(id,gamepad);
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.get(id);
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,get_name: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		return devices[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.exists(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.set(id,joystick);
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.get(id);
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,__class__: lime_ui_Joystick
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_MouseWheelMode = $hxClasses["lime.ui.MouseWheelMode"] = { __ename__ : ["lime","ui","MouseWheelMode"], __constructs__ : ["PIXELS","LINES","PAGES","UNKNOWN"] };
lime_ui_MouseWheelMode.PIXELS = ["PIXELS",0];
lime_ui_MouseWheelMode.PIXELS.toString = $estr;
lime_ui_MouseWheelMode.PIXELS.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.LINES = ["LINES",1];
lime_ui_MouseWheelMode.LINES.toString = $estr;
lime_ui_MouseWheelMode.LINES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.PAGES = ["PAGES",2];
lime_ui_MouseWheelMode.PAGES.toString = $estr;
lime_ui_MouseWheelMode.PAGES.__enum__ = lime_ui_MouseWheelMode;
lime_ui_MouseWheelMode.UNKNOWN = ["UNKNOWN",3];
lime_ui_MouseWheelMode.UNKNOWN.toString = $estr;
lime_ui_MouseWheelMode.UNKNOWN.__enum__ = lime_ui_MouseWheelMode;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Reflect.hasField(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,context: null
	,element: null
	,id: null
	,onActivate: null
	,onClose: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onExpose: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onRender: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,parameters: null
	,stage: null
	,__attributes: null
	,__backend: null
	,__fullscreen: null
	,__height: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.__backend.close();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,get_frameRate: function() {
		return this.__backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.__backend.setFrameRate(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,get_height: function() {
		return this.__height;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,set_textInputEnabled: function(value) {
		return this.__backend.setTextInputEnabled(value);
	}
	,get_width: function() {
		return this.__width;
	}
	,__class__: lime_ui_Window
	,__properties__: {get_scale:"get_scale",get_width:"get_width",set_textInputEnabled:"set_textInputEnabled",get_height:"get_height",get_fullscreen:"get_fullscreen",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_cursor:"set_cursor"}
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 182790;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = ["lime","utils","AssetCache"];
lime_utils_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(this.image.exists(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(this.font.exists(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(this.audio.exists(id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.set(id,asset);
			break;
		case "IMAGE":
			if(!Std["is"](asset,lime_graphics_Image)) {
				throw new js__$Boot_HaxeError("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.set(id,asset);
			break;
		case "MUSIC":case "SOUND":
			if(!Std["is"](asset,lime_media_AudioBuffer)) {
				throw new js__$Boot_HaxeError("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.set(id,asset);
			break;
		default:
			throw new js__$Boot_HaxeError(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			var key = keys;
			while(key.hasNext()) {
				var key1 = key.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.audio.remove(key1);
				}
			}
			var keys1 = this.font.keys();
			var key2 = keys1;
			while(key2.hasNext()) {
				var key3 = key2.next();
				if(StringTools.startsWith(key3,prefix)) {
					this.font.remove(key3);
				}
			}
			var keys2 = this.image.keys();
			var key4 = keys2;
			while(key4.hasNext()) {
				var key5 = key4.next();
				if(StringTools.startsWith(key5,prefix)) {
					this.image.remove(key5);
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = ["lime","utils","AssetLibrary"];
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var libraryClass = Type.resolveClass(manifest.libraryType);
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "AssetLibrary.hx", lineNumber : 140, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	onChange: null
	,assetsLoaded: null
	,assetsTotal: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesTotal: null
	,cachedAudioBuffers: null
	,cachedBytes: null
	,cachedFonts: null
	,cachedImages: null
	,cachedText: null
	,classTypes: null
	,loaded: null
	,pathGroups: null
	,paths: null
	,preload: null
	,promise: null
	,sizes: null
	,types: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.get(id);
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		case "TEXT":
			return this.getText(id);
		default:
			throw new js__$Boot_HaxeError("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) {
			return this.cachedAudioBuffers.get(id);
		} else if(this.classTypes.exists(id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.get(id));
		}
	}
	,getBytes: function(id) {
		if(this.cachedBytes.exists(id)) {
			return this.cachedBytes.get(id);
		} else if(this.cachedText.exists(id)) {
			var bytes = lime_utils__$Bytes_Bytes_$Impl_$.ofString(this.cachedText.get(id));
			this.cachedBytes.set(id,bytes);
			return bytes;
		} else if(this.classTypes.exists(id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , haxe_io_Bytes);
		} else {
			return lime_utils__$Bytes_Bytes_$Impl_$.fromFile(this.paths.get(id));
		}
	}
	,getFont: function(id) {
		if(this.cachedFonts.exists(id)) {
			return this.cachedFonts.get(id);
		} else if(this.classTypes.exists(id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.get(id));
		}
	}
	,getImage: function(id) {
		if(this.cachedImages.exists(id)) {
			return this.cachedImages.get(id);
		} else if(this.classTypes.exists(id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.get(id),[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.get(id));
		}
	}
	,getText: function(id) {
		if(this.cachedText.exists(id)) {
			return this.cachedText.get(id);
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(this.classTypes.exists(id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		switch(requestedType) {
		case "FONT":
			return this.cachedFonts.exists(id);
		case "IMAGE":
			return this.cachedImages.exists(id);
		case "MUSIC":case "SOUND":
			return this.cachedAudioBuffers.exists(id);
		default:
			if(!this.cachedBytes.exists(id)) {
				return this.cachedText.exists(id);
			} else {
				return true;
			}
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var id = this.preload.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				if(!this.preload.get(id1)) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id1 + " [" + this.types.get(id1) + "]",{ fileName : "AssetLibrary.hx", lineNumber : 452, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.get(id1);
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id1);
						future.onProgress((function(id2,f) {
							return function(a1,a2) {
								f[0](id2[0],a1,a2);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future.onError((function(id3,f1) {
							return function(a11) {
								f1[0](id3[0],a11);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future.onComplete((function(id4,f2) {
							return function(a12) {
								f2[0](id4[0],a12);
							};
						})([id1],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id1);
						future1.onProgress((function(id5,f3) {
							return function(a13,a21) {
								f3[0](id5[0],a13,a21);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id6,f4) {
							return function(a14) {
								f4[0](id6[0],a14);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id7,f5) {
							return function(a15) {
								f5[0](id7[0],a15);
							};
						})([id1],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id1);
						future2.onProgress((function(id8,f6) {
							return function(a16,a22) {
								f6[0](id8[0],a16,a22);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id9,f7) {
							return function(a17) {
								f7[0](id9[0],a17);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id10,f8) {
							return function(a18) {
								f8[0](id10[0],a18);
							};
						})([id1],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id1);
						future3.onProgress((function(id11,f9) {
							return function(a19,a23) {
								f9[0](id11[0],a19,a23);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id12,f10) {
							return function(a110) {
								f10[0](id12[0],a110);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id13,f11) {
							return function(a111) {
								f11[0](id13[0],a111);
							};
						})([id1],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id1);
						future4.onProgress((function(id14,f12) {
							return function(a112,a24) {
								f12[0](id14[0],a112,a24);
							};
						})([id1],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id15,f13) {
							return function(a113) {
								f13[0](id15[0],a113);
							};
						})([id1],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id16,f14) {
							return function(a114) {
								f14[0](id16[0],a114);
							};
						})([id1],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(this.cachedAudioBuffers.exists(id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.get(id));
		} else if(this.classTypes.exists(id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[]));
		} else if(this.pathGroups.exists(id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.get(id));
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.get(id));
		}
	}
	,loadBytes: function(id) {
		if(this.cachedBytes.exists(id)) {
			return lime_app_Future.withValue(this.cachedBytes.get(id));
		} else if(this.classTypes.exists(id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[]));
		} else {
			return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(this.paths.get(id));
		}
	}
	,loadFont: function(id) {
		if(this.cachedFonts.exists(id)) {
			return lime_app_Future.withValue(this.cachedFonts.get(id));
		} else if(this.classTypes.exists(id)) {
			var font = Type.createInstance(this.classTypes.get(id),[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.get(id));
		}
	}
	,loadImage: function(id) {
		if(this.cachedImages.exists(id)) {
			return lime_app_Future.withValue(this.cachedImages.get(id));
		} else if(this.classTypes.exists(id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.get(id),[]));
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.get(id));
		}
	}
	,loadText: function(id) {
		if(this.cachedText.exists(id)) {
			return lime_app_Future.withValue(this.cachedText.get(id));
		} else if(this.cachedBytes.exists(id) || this.classTypes.exists(id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.set(id,text);
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.get(id));
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.get(id) + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "AssetLibrary.hx", lineNumber : 698, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = this.sizes.get(id);
			if(!this.bytesLoadedCache.exists(id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.get(id);
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.set(id,size);
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
		return path;
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			if(hasSize && Reflect.hasField(asset,"size")) {
				size = asset.size;
			} else {
				size = 100;
			}
			id = asset.id;
			if(Reflect.hasField(asset,"path")) {
				this.paths.set(id,this.__cacheBreak(basePath + Std.string(Reflect.field(asset,"path"))));
			}
			if(Reflect.hasField(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g3 = 0;
				var _g2 = pathGroup.length;
				while(_g3 < _g2) {
					var i = _g3++;
					pathGroup[i] = this.__cacheBreak(basePath + pathGroup[i]);
				}
				this.pathGroups.set(id,pathGroup);
			}
			this.sizes.set(id,size);
			this.types.set(id,asset.type);
			if(Reflect.hasField(asset,"preload")) {
				this.preload.set(id,Reflect.field(asset,"preload"));
			}
			if(Reflect.hasField(asset,"className")) {
				classRef = Type.resolveClass(Reflect.field(asset,"className"));
				this.classTypes.set(id,classRef);
			}
		}
		this.bytesTotal = 0;
		var _g4 = 0;
		var _g11 = manifest.assets;
		while(_g4 < _g11.length) {
			var asset1 = _g11[_g4];
			++_g4;
			id = asset1.id;
			if(this.preload.exists(id) && this.preload.get(id)) {
				this.bytesTotal += this.sizes.get(id);
			}
		}
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.set(id,audioBuffer);
		if(this.pathGroups.exists(id)) {
			var pathGroup = this.pathGroups.get(id);
			var otherID = this.pathGroups.keys();
			while(otherID.hasNext()) {
				var otherID1 = otherID.next();
				if(otherID1 == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.get(otherID1).indexOf(path) > -1) {
						this.cachedAudioBuffers.set(otherID1,audioBuffer);
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "AssetLibrary.hx", lineNumber : 883, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "AssetLibrary.hx", lineNumber : 887, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.set(id,bytes);
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.set(id,font);
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.set(id,image);
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.set(id,text);
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.get(id);
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(this.bytesLoadedCache.exists(id)) {
				var cache = this.bytesLoadedCache.get(id);
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.set(id,bytesLoaded);
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = ["lime","utils","AssetManifest"];
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.fromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_AssetManifest.fromBytes(lime_utils__$Bytes_Bytes_$Impl_$.fromFile(path),rootPath);
};
lime_utils_AssetManifest.loadFromBytes = function(bytes,rootPath) {
	return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	manifest.name = manifestData.name;
	manifest.libraryType = manifestData.libraryType;
	manifest.libraryArgs = manifestData.libraryArgs;
	manifest.assets = haxe_Unserializer.run(manifestData.assets);
	if(Reflect.hasField(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	assets: null
	,libraryArgs: null
	,libraryType: null
	,name: null
	,rootPath: null
	,version: null
	,__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = ["lime","utils","Assets"];
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		return symbol.exists(type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.get(id);
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.get(id);
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.get(id);
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw new js__$Boot_HaxeError("Not sure how to get template: " + id);
			break;
		default:
			return null;
		}
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		if(symbol.exists(type)) {
			if(symbol.isLocal(type)) {
				var asset = symbol.library.getAsset(symbol.symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 160, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 166, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol.libraryName),{ fileName : "Assets.hx", lineNumber : 172, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.get(name);
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var symbol = new lime_utils__$Assets_LibrarySymbol(id);
	if(symbol.library != null) {
		return symbol.isLocal(type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(lime_utils_Assets.libraryPaths.exists(id)) {
		path = lime_utils_Assets.libraryPaths.get(id);
		rootPath = lime_utils_Assets.defaultRootPath;
	} else if(StringTools.endsWith(path,".bundle")) {
		path += "/library.json";
	}
	lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
		if(manifest == null) {
			promise.error("Cannot parse asset manifest for library \"" + id + "\"");
			return;
		}
		var library1 = lime_utils_AssetLibrary.fromManifest(manifest);
		if(library1 == null) {
			promise.error("Cannot open library \"" + id + "\"");
		} else {
			lime_utils_Assets.libraries.set(id,library1);
			library1.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
			var tmp = library1.load();
			promise.completeWith(tmp);
		}
	}).onError(function(_) {
		promise.error("There is no asset library with an ID of \"" + id + "\"");
	});
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(lime_utils_Assets.libraries.exists(name)) {
		if(lime_utils_Assets.libraries.get(name) == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.set(name,library);
};
lime_utils_Assets.unloadLibrary = function(name) {
	var library = lime_utils_Assets.libraries.get(name);
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	lime_utils_Assets.libraries.remove(name);
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.get_preloader() != null && !lime_app_Application.current.get_preloader().complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils__$Assets_LibrarySymbol = function(id) {
	var colonIndex = id.indexOf(":");
	this.libraryName = id.substring(0,colonIndex);
	this.symbolName = id.substring(colonIndex + 1);
	this.library = lime_utils_Assets.getLibrary(this.libraryName);
};
$hxClasses["lime.utils._Assets.LibrarySymbol"] = lime_utils__$Assets_LibrarySymbol;
lime_utils__$Assets_LibrarySymbol.__name__ = ["lime","utils","_Assets","LibrarySymbol"];
lime_utils__$Assets_LibrarySymbol.prototype = {
	library: null
	,libraryName: null
	,symbolName: null
	,isLocal: function(type) {
		return this.library.isLocal(this.symbolName,type);
	}
	,exists: function(type) {
		return this.library.exists(this.symbolName,type);
	}
	,__class__: lime_utils__$Assets_LibrarySymbol
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = ["lime","utils","BytePointerData"];
lime_utils_BytePointerData.prototype = {
	bytes: null
	,offset: null
	,__class__: lime_utils_BytePointerData
};
var lime_utils__$Bytes_Bytes_$Impl_$ = {};
$hxClasses["lime.utils._Bytes.Bytes_Impl_"] = lime_utils__$Bytes_Bytes_$Impl_$;
lime_utils__$Bytes_Bytes_$Impl_$.__name__ = ["lime","utils","_Bytes","Bytes_Impl_"];
lime_utils__$Bytes_Bytes_$Impl_$._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils__$Bytes_Bytes_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.getData());
};
lime_utils__$Bytes_Bytes_$Impl_$.fromFile = function(path) {
	return null;
};
lime_utils__$Bytes_Bytes_$Impl_$.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils__$Bytes_Bytes_$Impl_$.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils__$Bytes_Bytes_$Impl_$._new(bytes.length,bytes.getData());
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = ["lime","utils","Log"];
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw new js__$Boot_HaxeError(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.println = function(message) {
	console.log(message);
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		lime_utils_Log.println("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = ["lime","utils","Preloader"];
lime_utils_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,bytesLoaded: null
	,bytesLoadedCache: null
	,bytesLoadedCache2: null
	,bytesTotal: null
	,bytesTotalCache: null
	,initLibraryNames: null
	,libraries: null
	,libraryNames: null
	,loadedLibraries: null
	,preloadComplete: null
	,preloadStarted: null
	,simulateProgress: null
	,addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g2 = 0;
		var _g11 = this.libraries;
		while(_g2 < _g11.length) {
			var library1 = [_g11[_g2]];
			++_g2;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "Preloader.hx", lineNumber : 150, className : "lime.utils.Preloader", methodName : "load"});
			library1[0].load().onProgress((function(library2) {
				return function(loaded,total) {
					if(!_gthis.bytesLoadedCache.exists(library2[0])) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.get(library2[0]);
					}
					_gthis.bytesLoadedCache.set(library2[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library1)).onComplete((function(library3) {
				return function(_) {
					if(!_gthis.bytesLoadedCache.exists(library3[0])) {
						_gthis.bytesLoaded += library3[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library3[0].bytesTotal - _gthis.bytesLoadedCache.get(library3[0]);
					}
					_gthis.loadedAssetLibrary();
				};
			})(library1)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 188, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g3 = 0;
		var _g12 = this.libraryNames;
		while(_g3 < _g12.length) {
			var name = _g12[_g3];
			++_g3;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 220, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "Preloader.hx", lineNumber : 224, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "Preloader.hx", lineNumber : 273, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name1) {
					return function(loaded,total) {
						if(total > 0) {
							if(!_gthis.bytesTotalCache.exists(name1[0])) {
								_gthis.bytesTotalCache.set(name1[0],total);
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!_gthis.bytesLoadedCache2.exists(name1[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.get(name1[0]);
							}
							_gthis.bytesLoadedCache2.set(name1[0],loaded);
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name2) {
					return function(library) {
						var total1 = 200;
						if(_gthis.bytesTotalCache.exists(name2[0])) {
							total1 = _gthis.bytesTotalCache.get(name2[0]);
						}
						if(!_gthis.bytesLoadedCache2.exists(name2[0])) {
							_gthis.bytesLoaded += total1;
						} else {
							_gthis.bytesLoaded += total1 - _gthis.bytesLoadedCache2.get(name2[0]);
						}
						_gthis.loadedAssetLibrary(name2[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "Preloader.hx", lineNumber : 332, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "Preloader.hx", lineNumber : 346, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Reflect.hasField(this.target,i)) {
				Reflect.setField(this.target,i,Reflect.field(this.properties,i));
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return Reflect.callMethod(method,method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			this.callMethod(this._onUpdate,this._onUpdateParams);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				this.callMethod(this._onComplete,this._onCompleteParams);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			this.callMethod(this._onPause,this._onPauseParams);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			this.callMethod(this._onResume,this._onResumeParams);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.get_current().stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		var i = _g1++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,apply: function() {
		motion_actuators_GenericActuator.prototype.apply.call(this);
		if(this.toggleVisible && Reflect.hasField(this.properties,"alpha")) {
			if(this.getField(this.target,"visible") != null) {
				this.setField(this.target,"visible",Reflect.field(this.properties,"alpha") > 0);
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				this.setField(this.target,"visible",this.cacheVisible);
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Reflect.hasField(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Reflect.hasField(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var value = this.getField(this.properties,i);
				if(start == null) {
					start = 0;
				}
				if(value == null) {
					value = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Reflect.hasField(this.properties,"alpha") && Std["is"](this.target,openfl_display_DisplayObject);
		if(this.toggleVisible && this.properties.alpha != 0 && !this.getField(this.target,"visible")) {
			this.setVisible = true;
			this.cacheVisible = this.getField(this.target,"visible");
			this.setField(this.target,"visible",true);
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setField: function(target,propertyName,value) {
		if(Reflect.hasField(target,propertyName) && !(target.__properties__ && target.__properties__["set_" + propertyName])) {
			Reflect.setField(target,propertyName,value);
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			Reflect.setField(details.target,details.propertyName,value);
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Reflect.hasField(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					var i1 = _g1++;
					details = this.propertyDetails[i1];
					this.setProperty(details,details.start + details.change * easing);
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					var i2 = _g11++;
					details = this.propertyDetails[i2];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						this.setProperty(details,endValue);
					} else {
						this.setProperty(details,Math.round(endValue));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) {
						this.setField(this.target,"visible",false);
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						this.callMethod(this._onRepeat,this._onRepeatParams);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	calculate: null
	,__class__: motion_easing_IEasing
};
var motion_easing__$Expo_ExpoEaseOut = function() {
};
$hxClasses["motion.easing._Expo.ExpoEaseOut"] = motion_easing__$Expo_ExpoEaseOut;
motion_easing__$Expo_ExpoEaseOut.__name__ = ["motion","easing","_Expo","ExpoEaseOut"];
motion_easing__$Expo_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.exp(-6.931471805599453 * k);
		}
	}
	,__class__: motion_easing__$Expo_ExpoEaseOut
};
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(!motion_Actuate.targetLibraries.exists(target) && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.get(target);
};
motion_Actuate.reset = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var i = library1.length - 1;
		while(i >= 0) {
			library1[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(Std["is"](target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					Reflect.setField(temp,properties,null);
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						Reflect.setField(temp1,property,null);
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.exists(target)) {
		HxOverrides.remove(motion_Actuate.targetLibraries.get(target),actuator);
		if(motion_Actuate.targetLibraries.get(target).length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	get_end: null
	,set_start: null
	,get_start: null
	,strength: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {set_start:"set_start",get_start:"get_start",get_end:"get_end"}
};
var motion__$MotionPath_ComponentPath = function() {
	this.paths = [];
	this.strength = 0;
};
$hxClasses["motion._MotionPath.ComponentPath"] = motion__$MotionPath_ComponentPath;
motion__$MotionPath_ComponentPath.__name__ = ["motion","_MotionPath","ComponentPath"];
motion__$MotionPath_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_ComponentPath.prototype = {
	strength: null
	,paths: null
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(k);
		} else {
			var ratio = k * this.strength;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
				} else {
					return path.calculate(ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_start: function() {
		if(this.paths.length > 0) {
			return this.paths[0].get_start();
		} else {
			return 0;
		}
	}
	,set_start: function(value) {
		if(this.paths.length > 0) {
			return this.paths[0].set_start(value);
		} else {
			return 0;
		}
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			var path = this.paths[this.paths.length - 1];
			return path.get_end();
		} else {
			return this.get_start();
		}
	}
	,__class__: motion__$MotionPath_ComponentPath
	,__properties__: {get_end:"get_end",set_start:"set_start",get_start:"get_start"}
};
var motion__$MotionPath_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.set_start(this.calculate(0.0));
};
$hxClasses["motion._MotionPath.RotationPath"] = motion__$MotionPath_RotationPath;
motion__$MotionPath_RotationPath.__name__ = ["motion","_MotionPath","RotationPath"];
motion__$MotionPath_RotationPath.__interfaces__ = [motion_IComponentPath];
motion__$MotionPath_RotationPath.prototype = {
	offset: null
	,strength: null
	,_start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var dY = this._y.calculate(k) - this._y.calculate(k + this.step);
		var angle = Math.atan2(dY,dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_start: function() {
		return this._start;
	}
	,set_start: function(value) {
		return this._start;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion__$MotionPath_RotationPath
	,__properties__: {set_start:"set_start",get_start:"get_start",get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(Std["is"](properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(Std["is"](filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				Reflect.setProperty(this.filter,propertyName,Reflect.field(this.properties,propertyName));
			}
		}
		this.setFilter();
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				start = this.getField(this.filter,propertyName);
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start,Reflect.hasField(this.filter,"set_" + propertyName));
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,setFilter: function() {
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.filterIndex] = this.filter;
		} else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Std["is"](filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		this.setField(this.target,"filters",filters);
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		this.setFilter();
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Reflect.hasField(properties,"start")) {
		this.properties.start = [];
	}
	if(!Reflect.hasField(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		this.callMethod(this.target,this.properties.end);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		this.callMethod(this.target,this.currentParameters);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			Reflect.setField(this.tweenProperties,propertyName,start);
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			this.callMethod(this.target,this.currentParameters);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Reflect.hasField(this.target,propertyName)) {
				Reflect.setField(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Reflect.hasField(this.target,propertyName)) {
					path.set_start(Reflect.field(this.target,propertyName));
				} else {
					isField = false;
					path.set_start(Reflect.getProperty(this.target,propertyName));
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						Reflect.setField(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details1.target,details1.propertyName,(js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							Reflect.setField(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						} else {
							Reflect.setProperty(details2.target,details2.propertyName,(js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details2.isField) {
						Reflect.setField(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					} else {
						Reflect.setProperty(details2.target,details2.propertyName,Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					if(this.toggleVisible && this.getField(this.target,"alpha") == 0) {
						this.setField(this.target,"visible",false);
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						this.callMethod(this._onRepeat,this._onRepeatParams);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField(transform,"colorTransform",this.endColorTransform);
		}
		if(this.endSoundTransform != null) {
			this.setField(this.target,"soundTransform",this.endSoundTransform);
		}
	}
	,initialize: function() {
		if(Reflect.hasField(this.properties,"colorValue") && Std["is"](this.target,openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Reflect.hasField(this.properties,"soundVolume") || Reflect.hasField(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Reflect.hasField(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			this.endColorTransform.alphaMultiplier = this.getField(this.target,"alpha");
		}
		var transform = this.getField(this.target,"transform");
		var begin = this.getField(transform,"colorTransform");
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			start = this.getField(begin,propertyName);
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,this.getField(this.endColorTransform,propertyName) - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		if(this.getField(this.target,"soundTransform") == null) {
			this.setField(this.target,"soundTransform",new openfl_media_SoundTransform());
		}
		var start = this.getField(this.target,"soundTransform");
		this.endSoundTransform = this.getField(this.target,"soundTransform");
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Reflect.hasField(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Reflect.hasField(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var transform = this.getField(this.target,"transform");
			this.setField(transform,"colorTransform",this.tweenColorTransform);
		}
		if(this.endSoundTransform != null) {
			this.setField(this.target,"soundTransform",this.tweenSoundTransform);
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var nape_Config = function() { };
$hxClasses["nape.Config"] = nape_Config;
nape_Config.__name__ = ["nape","Config"];
var nape_callbacks_Callback = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Callback"] = nape_callbacks_Callback;
nape_callbacks_Callback.__name__ = ["nape","callbacks","Callback"];
nape_callbacks_Callback.prototype = {
	zpp_inner: null
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_callbacks_Callback
	,__properties__: {get_listener:"get_listener"}
};
var nape_callbacks_BodyCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.BodyCallback"] = nape_callbacks_BodyCallback;
nape_callbacks_BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape_callbacks_BodyCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_BodyCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - 2];
		ret += ":" + this.get_body().toString();
		ret += " : listener: " + Std.string(this.get_listener());
		return ret;
	}
	,__class__: nape_callbacks_BodyCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_body:"get_body"})
});
var nape_callbacks_Listener = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.Listener"] = nape_callbacks_Listener;
nape_callbacks_Listener.__name__ = ["nape","callbacks","Listener"];
nape_callbacks_Listener.prototype = {
	zpp_inner: null
	,toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == 0) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.get_options()) + "}";
		} else if(this.zpp_inner.type == 1) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.get_options()) + "}";
		} else {
			var con1 = this.zpp_inner.interaction;
			var itype;
			var _g = con1.itype;
			switch(_g) {
			case 1:
				itype = "COLLISION";
				break;
			case 2:
				itype = "SENSOR";
				break;
			case 4:
				itype = "FLUID";
				break;
			default:
				itype = "ALL";
			}
			return (this.zpp_inner.type == 2 ? "InteractionListener{" + event + "#" + itype + "::" + Std.string(con1.outer_zni.get_options1()) + ":" + Std.string(con1.outer_zni.get_options2()) + "}" : "PreListener{" + itype + "::" + Std.string(con1.outer_znp.get_options1()) + ":" + Std.string(con1.outer_znp.get_options2()) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,__class__: nape_callbacks_Listener
};
var nape_callbacks_BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == nape_callbacks_CbEvent.get_WAKE()) {
		xevent = 2;
	} else if(event == nape_callbacks_CbEvent.get_SLEEP()) {
		xevent = 3;
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$BodyListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.BodyListener"] = nape_callbacks_BodyListener;
nape_callbacks_BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape_callbacks_BodyListener.__super__ = nape_callbacks_Listener;
nape_callbacks_BodyListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,__class__: nape_callbacks_BodyListener
	,__properties__: {get_options:"get_options"}
});
var nape_callbacks_CbEvent = function() {
};
$hxClasses["nape.callbacks.CbEvent"] = nape_callbacks_CbEvent;
nape_callbacks_CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape_callbacks_CbEvent.__properties__ = {get_PRE:"get_PRE",get_BREAK:"get_BREAK",get_SLEEP:"get_SLEEP",get_WAKE:"get_WAKE",get_END:"get_END",get_ONGOING:"get_ONGOING",get_BEGIN:"get_BEGIN"};
nape_callbacks_CbEvent.get_BEGIN = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BEGIN;
};
nape_callbacks_CbEvent.get_ONGOING = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_ONGOING;
};
nape_callbacks_CbEvent.get_END = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_END == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_END = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_END;
};
nape_callbacks_CbEvent.get_WAKE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_WAKE;
};
nape_callbacks_CbEvent.get_SLEEP = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_SLEEP;
};
nape_callbacks_CbEvent.get_BREAK = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_BREAK;
};
nape_callbacks_CbEvent.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.CbEvent_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.CbEvent_PRE = new nape_callbacks_CbEvent();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.CbEvent_PRE;
};
nape_callbacks_CbEvent.prototype = {
	toString: function() {
		if(this == nape_callbacks_CbEvent.get_PRE()) {
			return "PRE";
		} else if(this == nape_callbacks_CbEvent.get_BEGIN()) {
			return "BEGIN";
		} else if(this == nape_callbacks_CbEvent.get_ONGOING()) {
			return "ONGOING";
		} else if(this == nape_callbacks_CbEvent.get_END()) {
			return "END";
		} else if(this == nape_callbacks_CbEvent.get_WAKE()) {
			return "WAKE";
		} else if(this == nape_callbacks_CbEvent.get_SLEEP()) {
			return "SLEEP";
		} else if(this == nape_callbacks_CbEvent.get_BREAK()) {
			return "BREAK";
		} else {
			return "";
		}
	}
	,__class__: nape_callbacks_CbEvent
};
var nape_callbacks_CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$CbType();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbType"] = nape_callbacks_CbType;
nape_callbacks_CbType.__name__ = ["nape","callbacks","CbType"];
nape_callbacks_CbType.__properties__ = {get_ANY_COMPOUND:"get_ANY_COMPOUND",get_ANY_SHAPE:"get_ANY_SHAPE",get_ANY_CONSTRAINT:"get_ANY_CONSTRAINT",get_ANY_BODY:"get_ANY_BODY"};
nape_callbacks_CbType.get_ANY_BODY = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY;
};
nape_callbacks_CbType.get_ANY_CONSTRAINT = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT;
};
nape_callbacks_CbType.get_ANY_SHAPE = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE;
};
nape_callbacks_CbType.get_ANY_COMPOUND = function() {
	return zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND;
};
nape_callbacks_CbType.prototype = {
	zpp_inner: null
	,get_id: function() {
		return this.zpp_inner.id;
	}
	,toString: function() {
		if(this == nape_callbacks_CbType.get_ANY_BODY()) {
			return "ANY_BODY";
		} else if(this == nape_callbacks_CbType.get_ANY_SHAPE()) {
			return "ANY_SHAPE";
		} else if(this == nape_callbacks_CbType.get_ANY_COMPOUND()) {
			return "ANY_COMPOUND";
		} else if(this == nape_callbacks_CbType.get_ANY_CONSTRAINT()) {
			return "ANY_CONSTRAINT";
		} else {
			return "CbType#" + this.get_id();
		}
	}
	,__class__: nape_callbacks_CbType
	,__properties__: {get_id:"get_id"}
};
var nape_callbacks_CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.CbTypeIterator"] = nape_callbacks_CbTypeIterator;
nape_callbacks_CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape_callbacks_CbTypeIterator.get = function(list) {
	var ret;
	if(nape_callbacks_CbTypeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CbTypeList.internal = true;
		var ret1 = new nape_callbacks_CbTypeIterator();
		zpp_$nape_util_ZPP_$CbTypeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_CbTypeIterator.zpp_pool;
		nape_callbacks_CbTypeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_CbTypeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_CbTypeIterator.zpp_pool;
			nape_callbacks_CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_CbTypeIterator
};
var nape_callbacks_CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CbTypeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.CbTypeList"] = nape_callbacks_CbTypeList;
nape_callbacks_CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape_callbacks_CbTypeList.fromArray = function(array) {
	var ret = new nape_callbacks_CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_callbacks_CbTypeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) {
			return this.push(obj);
		} else {
			return this.unshift(obj);
		}
	}
	,empty: function() {
		return this.zpp_inner.inner.empty();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_CbTypeIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_CbTypeList
	,__properties__: {get_length:"get_length"}
};
var nape_callbacks_ConstraintCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.ConstraintCallback"] = nape_callbacks_ConstraintCallback;
nape_callbacks_ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape_callbacks_ConstraintCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_ConstraintCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - 2];
		ret += ":" + this.get_constraint().toString();
		ret += " : listener: " + Std.string(this.get_listener());
		return ret;
	}
	,__class__: nape_callbacks_ConstraintCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_constraint:"get_constraint"})
});
var nape_callbacks_ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == nape_callbacks_CbEvent.get_WAKE()) {
		xevent = 2;
	} else if(event == nape_callbacks_CbEvent.get_SLEEP()) {
		xevent = 3;
	} else if(event == nape_callbacks_CbEvent.get_BREAK()) {
		xevent = 4;
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$ConstraintListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
$hxClasses["nape.callbacks.ConstraintListener"] = nape_callbacks_ConstraintListener;
nape_callbacks_ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape_callbacks_ConstraintListener.__super__ = nape_callbacks_Listener;
nape_callbacks_ConstraintListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,__class__: nape_callbacks_ConstraintListener
	,__properties__: {get_options:"get_options"}
});
var nape_callbacks_InteractionCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.InteractionCallback"] = nape_callbacks_InteractionCallback;
nape_callbacks_InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape_callbacks_InteractionCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_InteractionCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.get_int1().toString() + "/" + this.get_int2().toString();
		ret += " : " + this.get_arbiters().toString();
		ret += " : listener: " + Std.string(this.get_listener());
		return ret;
	}
	,__class__: nape_callbacks_InteractionCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_arbiters:"get_arbiters",get_int2:"get_int2",get_int1:"get_int1"})
});
var nape_callbacks_InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	var xevent = -1;
	if(event == nape_callbacks_CbEvent.get_BEGIN()) {
		xevent = 0;
	} else if(event == nape_callbacks_CbEvent.get_END()) {
		xevent = 1;
	} else if(event == nape_callbacks_CbEvent.get_ONGOING()) {
		xevent = 6;
	}
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),xevent,2);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.InteractionListener"] = nape_callbacks_InteractionListener;
nape_callbacks_InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape_callbacks_InteractionListener.__super__ = nape_callbacks_Listener;
nape_callbacks_InteractionListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == 1) {
			return nape_callbacks_InteractionType.get_COLLISION();
		} else if(ret == 2) {
			return nape_callbacks_InteractionType.get_SENSOR();
		} else if(ret == 4) {
			return nape_callbacks_InteractionType.get_FLUID();
		} else if(ret == 7) {
			return nape_callbacks_InteractionType.get_ANY();
		} else {
			return null;
		}
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype = interactionType == nape_callbacks_InteractionType.get_COLLISION() ? 1 : interactionType == nape_callbacks_InteractionType.get_SENSOR() ? 2 : interactionType == nape_callbacks_InteractionType.get_FLUID() ? 4 : 7;
			this.zpp_inner_zn.setInteractionType(xtype);
		}
		return this.get_interactionType();
	}
	,__class__: nape_callbacks_InteractionListener
	,__properties__: {set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",get_options2:"get_options2",get_options1:"get_options1"}
});
var nape_callbacks_InteractionType = function() {
};
$hxClasses["nape.callbacks.InteractionType"] = nape_callbacks_InteractionType;
nape_callbacks_InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape_callbacks_InteractionType.__properties__ = {get_ANY:"get_ANY",get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"};
nape_callbacks_InteractionType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_COLLISION;
};
nape_callbacks_InteractionType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_SENSOR;
};
nape_callbacks_InteractionType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_FLUID;
};
nape_callbacks_InteractionType.get_ANY = function() {
	if(zpp_$nape_util_ZPP_$Flags.InteractionType_ANY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InteractionType_ANY = new nape_callbacks_InteractionType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InteractionType_ANY;
};
nape_callbacks_InteractionType.prototype = {
	toString: function() {
		if(this == nape_callbacks_InteractionType.get_COLLISION()) {
			return "COLLISION";
		} else if(this == nape_callbacks_InteractionType.get_SENSOR()) {
			return "SENSOR";
		} else if(this == nape_callbacks_InteractionType.get_FLUID()) {
			return "FLUID";
		} else if(this == nape_callbacks_InteractionType.get_ANY()) {
			return "ANY";
		} else {
			return "";
		}
	}
	,__class__: nape_callbacks_InteractionType
};
var nape_callbacks_ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.callbacks.ListenerIterator"] = nape_callbacks_ListenerIterator;
nape_callbacks_ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape_callbacks_ListenerIterator.get = function(list) {
	var ret;
	if(nape_callbacks_ListenerIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ListenerList.internal = true;
		var ret1 = new nape_callbacks_ListenerIterator();
		zpp_$nape_util_ZPP_$ListenerList.internal = false;
		ret = ret1;
	} else {
		var r = nape_callbacks_ListenerIterator.zpp_pool;
		nape_callbacks_ListenerIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_callbacks_ListenerIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_callbacks_ListenerIterator.zpp_pool;
			nape_callbacks_ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_callbacks_ListenerIterator
};
var nape_callbacks_ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ListenerList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.callbacks.ListenerList"] = nape_callbacks_ListenerList;
nape_callbacks_ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape_callbacks_ListenerList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) {
			return this.push(obj);
		} else {
			return this.unshift(obj);
		}
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,empty: function() {
		return this.zpp_inner.inner.empty();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_callbacks_ListenerIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_callbacks_ListenerList
	,__properties__: {get_length:"get_length"}
};
var nape_callbacks_ListenerType = function() {
};
$hxClasses["nape.callbacks.ListenerType"] = nape_callbacks_ListenerType;
nape_callbacks_ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape_callbacks_ListenerType.__properties__ = {get_PRE:"get_PRE",get_INTERACTION:"get_INTERACTION",get_CONSTRAINT:"get_CONSTRAINT",get_BODY:"get_BODY"};
nape_callbacks_ListenerType.get_BODY = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_BODY == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_BODY = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_BODY;
};
nape_callbacks_ListenerType.get_CONSTRAINT = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_CONSTRAINT;
};
nape_callbacks_ListenerType.get_INTERACTION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_INTERACTION;
};
nape_callbacks_ListenerType.get_PRE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ListenerType_PRE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ListenerType_PRE = new nape_callbacks_ListenerType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ListenerType_PRE;
};
nape_callbacks_ListenerType.prototype = {
	toString: function() {
		if(this == nape_callbacks_ListenerType.get_BODY()) {
			return "BODY";
		} else if(this == nape_callbacks_ListenerType.get_CONSTRAINT()) {
			return "CONSTRAINT";
		} else if(this == nape_callbacks_ListenerType.get_INTERACTION()) {
			return "INTERACTION";
		} else if(this == nape_callbacks_ListenerType.get_PRE()) {
			return "PRE";
		} else {
			return "";
		}
	}
	,__class__: nape_callbacks_ListenerType
};
var nape_callbacks_OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_callbacks_ZPP_$OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) {
		this.including(includes);
	}
	if(excludes != null) {
		this.excluding(excludes);
	}
};
$hxClasses["nape.callbacks.OptionType"] = nape_callbacks_OptionType;
nape_callbacks_OptionType.__name__ = ["nape","callbacks","OptionType"];
nape_callbacks_OptionType.prototype = {
	zpp_inner: null
	,get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) {
			this.zpp_inner.setup_includes();
		}
		return this.zpp_inner.wrap_includes;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) {
			this.zpp_inner.setup_excludes();
		}
		return this.zpp_inner.wrap_excludes;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,toString: function() {
		var inc = this.get_includes().toString();
		var exc = this.get_excludes().toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,__class__: nape_callbacks_OptionType
	,__properties__: {get_excludes:"get_excludes",get_includes:"get_includes"}
};
var nape_callbacks_PreCallback = function() {
	nape_callbacks_Callback.call(this);
};
$hxClasses["nape.callbacks.PreCallback"] = nape_callbacks_PreCallback;
nape_callbacks_PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape_callbacks_PreCallback.__super__ = nape_callbacks_Callback;
nape_callbacks_PreCallback.prototype = $extend(nape_callbacks_Callback.prototype,{
	get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.get_int1().toString() + "/" + this.get_int2().toString();
		ret += " : " + this.get_arbiter().toString();
		ret += " : listnener: " + Std.string(this.get_listener());
		return ret;
	}
	,__class__: nape_callbacks_PreCallback
	,__properties__: $extend(nape_callbacks_Callback.prototype.__properties__,{get_int2:"get_int2",get_int1:"get_int1",get_arbiter:"get_arbiter"})
});
var nape_callbacks_PreFlag = function() {
};
$hxClasses["nape.callbacks.PreFlag"] = nape_callbacks_PreFlag;
nape_callbacks_PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape_callbacks_PreFlag.__properties__ = {get_IGNORE_ONCE:"get_IGNORE_ONCE",get_ACCEPT_ONCE:"get_ACCEPT_ONCE",get_IGNORE:"get_IGNORE",get_ACCEPT:"get_ACCEPT"};
nape_callbacks_PreFlag.get_ACCEPT = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT;
};
nape_callbacks_PreFlag.get_IGNORE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE;
};
nape_callbacks_PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_ACCEPT_ONCE;
};
nape_callbacks_PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE = new nape_callbacks_PreFlag();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.PreFlag_IGNORE_ONCE;
};
nape_callbacks_PreFlag.prototype = {
	toString: function() {
		if(this == nape_callbacks_PreFlag.get_ACCEPT()) {
			return "ACCEPT";
		} else if(this == nape_callbacks_PreFlag.get_IGNORE()) {
			return "IGNORE";
		} else if(this == nape_callbacks_PreFlag.get_ACCEPT_ONCE()) {
			return "ACCEPT_ONCE";
		} else if(this == nape_callbacks_PreFlag.get_IGNORE_ONCE()) {
			return "IGNORE_ONCE";
		} else {
			return "";
		}
	}
	,__class__: nape_callbacks_PreFlag
};
var nape_callbacks_PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) {
		pure = false;
	}
	if(precedence == null) {
		precedence = 0;
	}
	this.zpp_inner_zn = null;
	nape_callbacks_Listener.call(this);
	this.zpp_inner_zn = new zpp_$nape_callbacks_ZPP_$InteractionListener(zpp_$nape_callbacks_ZPP_$OptionType.argument(options1),zpp_$nape_callbacks_ZPP_$OptionType.argument(options2),5,3);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
$hxClasses["nape.callbacks.PreListener"] = nape_callbacks_PreListener;
nape_callbacks_PreListener.__name__ = ["nape","callbacks","PreListener"];
nape_callbacks_PreListener.__super__ = nape_callbacks_Listener;
nape_callbacks_PreListener.prototype = $extend(nape_callbacks_Listener.prototype,{
	zpp_inner_zn: null
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		if(ret == 1) {
			return nape_callbacks_InteractionType.get_COLLISION();
		} else if(ret == 2) {
			return nape_callbacks_InteractionType.get_SENSOR();
		} else if(ret == 4) {
			return nape_callbacks_InteractionType.get_FLUID();
		} else if(ret == 7) {
			return nape_callbacks_InteractionType.get_ANY();
		} else {
			return null;
		}
	}
	,set_interactionType: function(interactionType) {
		if(this.get_interactionType() != interactionType) {
			var xtype = interactionType == nape_callbacks_InteractionType.get_COLLISION() ? 1 : interactionType == nape_callbacks_InteractionType.get_SENSOR() ? 2 : interactionType == nape_callbacks_InteractionType.get_FLUID() ? 4 : 7;
			this.zpp_inner_zn.setInteractionType(xtype);
		}
		return this.get_interactionType();
	}
	,__class__: nape_callbacks_PreListener
	,__properties__: {set_interactionType:"set_interactionType",get_interactionType:"get_interactionType",get_options2:"get_options2",get_options1:"get_options1"}
});
var nape_constraint_Constraint = function() {
	this.zpp_inner.insert_cbtype(nape_callbacks_CbType.get_ANY_CONSTRAINT().zpp_inner);
};
$hxClasses["nape.constraint.Constraint"] = nape_constraint_Constraint;
nape_constraint_Constraint.__name__ = ["nape","constraint","Constraint"];
nape_constraint_Constraint.prototype = {
	zpp_inner: null
	,get_space: function() {
		if(this.zpp_inner.space == null) {
			return null;
		} else {
			return this.zpp_inner.space.outer;
		}
	}
	,set_space: function(space) {
		if(this.get_space() != space) {
			if(this.zpp_inner.component != null) {
				this.zpp_inner.component.woken = false;
			}
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) {
				this.zpp_inner.space.outer.get_constraints().remove(this);
			}
			if(space != null) {
				space.get_constraints().add(this);
			} else {
				this.zpp_inner.space = null;
			}
		}
		return this.get_space();
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,set_active: function(active) {
		if(this.get_active() != active) {
			if(this.zpp_inner.component != null) {
				this.zpp_inner.component.woken = false;
			}
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) {
						this.zpp_inner.component.sleeping = true;
					}
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.get_active();
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.get_ignore() != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.get_ignore();
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_stiff: function(stiff) {
		if(this.get_stiff() != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.get_stiff();
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_frequency: function(frequency) {
		if(this.get_frequency() != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) {
				this.zpp_inner.wake();
			}
		}
		return this.get_frequency();
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_damping: function(damping) {
		if(this.get_damping() != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) {
				this.zpp_inner.wake();
			}
		}
		return this.get_damping();
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_maxForce: function(maxForce) {
		if(this.get_maxForce() != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.get_maxForce();
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.get_breakUnderForce() != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.get_breakUnderForce();
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) {
			this.zpp_inner.setupcbTypes();
		}
		return this.zpp_inner.wrap_cbTypes;
	}
	,toString: function() {
		return "{Constraint}";
	}
	,__class__: nape_constraint_Constraint
	,__properties__: {get_cbTypes:"get_cbTypes",set_breakUnderForce:"set_breakUnderForce",get_breakUnderForce:"get_breakUnderForce",set_maxForce:"set_maxForce",get_maxForce:"get_maxForce",set_damping:"set_damping",get_damping:"get_damping",set_frequency:"set_frequency",get_frequency:"get_frequency",set_stiff:"set_stiff",get_stiff:"get_stiff",set_ignore:"set_ignore",get_ignore:"get_ignore",set_active:"set_active",get_active:"get_active",set_space:"set_space",get_space:"get_space"}
};
var nape_constraint_AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_jointMin(jointMin);
	this.set_jointMax(jointMax);
	this.set_ratio(ratio);
};
$hxClasses["nape.constraint.AngleJoint"] = nape_constraint_AngleJoint;
nape_constraint_AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape_constraint_AngleJoint.__super__ = nape_constraint_Constraint;
nape_constraint_AngleJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(this.get_jointMin() != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.get_jointMin();
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(this.get_jointMax() != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.get_jointMax();
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(this.get_ratio() != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.get_ratio();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get(0,0,0);
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_AngleJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.constraint.ConstraintIterator"] = nape_constraint_ConstraintIterator;
nape_constraint_ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape_constraint_ConstraintIterator.get = function(list) {
	var ret;
	if(nape_constraint_ConstraintIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConstraintList.internal = true;
		var ret1 = new nape_constraint_ConstraintIterator();
		zpp_$nape_util_ZPP_$ConstraintList.internal = false;
		ret = ret1;
	} else {
		var r = nape_constraint_ConstraintIterator.zpp_pool;
		nape_constraint_ConstraintIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_constraint_ConstraintIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_constraint_ConstraintIterator
};
var nape_constraint_ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConstraintList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.constraint.ConstraintList"] = nape_constraint_ConstraintList;
nape_constraint_ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape_constraint_ConstraintList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.front();
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.pop();
			}
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
				this.zpp_inner.at_ite = null;
			}
			var ite = this.get_length() == 1 ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) {
				ret = this.zpp_inner.inner.front();
			} else {
				ret = ite.next.elem();
			}
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx1);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.erase(ite);
			}
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
				this.zpp_inner.at_ite = null;
			}
			var ite = this.get_length() == 1 ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) {
				ret = this.zpp_inner.inner.front();
			} else {
				ret = ite.next.elem();
			}
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.erase(ite);
			}
		} else {
			ret = this.zpp_inner.inner.front();
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx1);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.pop();
			}
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) {
			return this.push(obj);
		} else {
			return this.unshift(obj);
		}
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) {
			while(!this.empty()) this.pop();
		} else {
			while(!this.empty()) this.shift();
		}
	}
	,empty: function() {
		return this.zpp_inner.inner.empty();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_constraint_ConstraintIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda(it.next());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			it.zpp_next = nape_constraint_ConstraintIterator.zpp_pool;
			nape_constraint_ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,__class__: nape_constraint_ConstraintList
	,__properties__: {get_length:"get_length"}
};
var nape_constraint_DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_anchor1(anchor1);
	this.set_anchor2(anchor2);
	this.set_jointMin(jointMin);
	this.set_jointMax(jointMax);
};
$hxClasses["nape.constraint.DistanceJoint"] = nape_constraint_DistanceJoint;
nape_constraint_DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape_constraint_DistanceJoint.__super__ = nape_constraint_Constraint;
nape_constraint_DistanceJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) {
			this.zpp_inner_zn.setup_a1();
		}
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		this.get_anchor1().set(anchor1);
		return this.get_anchor1();
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) {
			this.zpp_inner_zn.setup_a2();
		}
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		this.get_anchor2().set(anchor2);
		return this.get_anchor2();
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(this.get_jointMin() != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.get_jointMin();
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(this.get_jointMax() != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.get_jointMax();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_DistanceJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_anchor1(anchor1);
	this.set_anchor2(anchor2);
	this.set_direction(direction);
	this.set_jointMin(jointMin);
	this.set_jointMax(jointMax);
};
$hxClasses["nape.constraint.LineJoint"] = nape_constraint_LineJoint;
nape_constraint_LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape_constraint_LineJoint.__super__ = nape_constraint_Constraint;
nape_constraint_LineJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) {
			this.zpp_inner_zn.setup_a1();
		}
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		this.get_anchor1().set(anchor1);
		return this.get_anchor1();
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) {
			this.zpp_inner_zn.setup_a2();
		}
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		this.get_anchor2().set(anchor2);
		return this.get_anchor2();
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) {
			this.zpp_inner_zn.setup_n();
		}
		return this.zpp_inner_zn.wrap_n;
	}
	,set_direction: function(direction) {
		this.get_direction().set(direction);
		return this.get_direction();
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(this.get_jointMin() != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.get_jointMin();
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(this.get_jointMax() != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.get_jointMax();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_LineJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_direction:"set_direction",get_direction:"get_direction",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	if(rate == null) {
		rate = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_rate(rate);
	this.set_ratio(ratio);
};
$hxClasses["nape.constraint.MotorJoint"] = nape_constraint_MotorJoint;
nape_constraint_MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape_constraint_MotorJoint.__super__ = nape_constraint_Constraint;
nape_constraint_MotorJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(this.get_ratio() != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.get_ratio();
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(this.get_rate() != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.get_rate();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_MotorJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_rate:"set_rate",get_rate:"get_rate",set_ratio:"set_ratio",get_ratio:"get_ratio",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_anchor1(anchor1);
	this.set_anchor2(anchor2);
};
$hxClasses["nape.constraint.PivotJoint"] = nape_constraint_PivotJoint;
nape_constraint_PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape_constraint_PivotJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PivotJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) {
			this.zpp_inner_zn.setup_a1();
		}
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		this.get_anchor1().set(anchor1);
		return this.get_anchor1();
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) {
			this.zpp_inner_zn.setup_a2();
		}
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		this.get_anchor2().set(anchor2);
		return this.get_anchor2();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_PivotJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) {
		ratio = 1.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	this.set_anchor1(anchor1);
	this.set_anchor2(anchor2);
	this.set_anchor3(anchor3);
	this.set_anchor4(anchor4);
	this.set_ratio(ratio);
	this.set_jointMin(jointMin);
	this.set_jointMax(jointMax);
};
$hxClasses["nape.constraint.PulleyJoint"] = nape_constraint_PulleyJoint;
nape_constraint_PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape_constraint_PulleyJoint.__super__ = nape_constraint_Constraint;
nape_constraint_PulleyJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_body3: function() {
		if(this.zpp_inner_zn.b3 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b3.outer;
		}
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3 = body3 == null ? null : body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) {
						this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b3.wake();
				}
			}
			this.zpp_inner_zn.b3 = inbody3;
			if(this.get_space() != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) {
					inbody3.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) {
					inbody3.wake();
				}
			}
		}
		return this.get_body3();
	}
	,get_body4: function() {
		if(this.zpp_inner_zn.b4 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b4.outer;
		}
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4 = body4 == null ? null : body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) {
						this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b4.wake();
				}
			}
			this.zpp_inner_zn.b4 = inbody4;
			if(this.get_space() != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) {
					inbody4.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) {
					inbody4.wake();
				}
			}
		}
		return this.get_body4();
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) {
			this.zpp_inner_zn.setup_a1();
		}
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		this.get_anchor1().set(anchor1);
		return this.get_anchor1();
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) {
			this.zpp_inner_zn.setup_a2();
		}
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		this.get_anchor2().set(anchor2);
		return this.get_anchor2();
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) {
			this.zpp_inner_zn.setup_a3();
		}
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor3: function(anchor3) {
		this.get_anchor3().set(anchor3);
		return this.get_anchor3();
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) {
			this.zpp_inner_zn.setup_a4();
		}
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor4: function(anchor4) {
		this.get_anchor4().set(anchor4);
		return this.get_anchor4();
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(this.get_jointMin() != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.get_jointMin();
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(this.get_jointMax() != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.get_jointMax();
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(this.get_ratio() != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.get_ratio();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_PulleyJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_ratio:"set_ratio",get_ratio:"get_ratio",set_jointMax:"set_jointMax",get_jointMax:"get_jointMax",set_jointMin:"set_jointMin",get_jointMin:"get_jointMin",set_anchor4:"set_anchor4",get_anchor4:"get_anchor4",set_anchor3:"set_anchor3",get_anchor3:"get_anchor3",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body4:"set_body4",get_body4:"get_body4",set_body3:"set_body3",get_body3:"get_body3",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_constraint_UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) {
		velocityOnly = false;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
};
$hxClasses["nape.constraint.UserConstraint"] = nape_constraint_UserConstraint;
nape_constraint_UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape_constraint_UserConstraint.__super__ = nape_constraint_Constraint;
nape_constraint_UserConstraint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,__broken: function() {
	}
	,__validate: function() {
	}
	,__prepare: function() {
	}
	,__position: function(err) {
	}
	,__velocity: function(err) {
	}
	,__eff_mass: function(eff) {
	}
	,__clamp: function(jAcc) {
	}
	,__impulse: function(imp,body,out) {
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_UserConstraint
});
var nape_constraint_WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) {
		phase = 0.0;
	}
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_$nape_constraint_ZPP_$WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	nape_constraint_Constraint.call(this);
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_anchor1(anchor1);
	this.set_anchor2(anchor2);
	this.set_phase(phase);
};
$hxClasses["nape.constraint.WeldJoint"] = nape_constraint_WeldJoint;
nape_constraint_WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape_constraint_WeldJoint.__super__ = nape_constraint_Constraint;
nape_constraint_WeldJoint.prototype = $extend(nape_constraint_Constraint.prototype,{
	zpp_inner_zn: null
	,get_body1: function() {
		if(this.zpp_inner_zn.b1 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b1.outer;
		}
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null ? null : body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) {
						this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b1.wake();
				}
			}
			this.zpp_inner_zn.b1 = inbody1;
			if(this.get_space() != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) {
					inbody1.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) {
					inbody1.wake();
				}
			}
		}
		return this.get_body1();
	}
	,get_body2: function() {
		if(this.zpp_inner_zn.b2 == null) {
			return null;
		} else {
			return this.zpp_inner_zn.b2.outer;
		}
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null ? null : body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if(this.get_space() != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) {
						this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
					}
				}
				if(this.get_active() && this.get_space() != null) {
					this.zpp_inner_zn.b2.wake();
				}
			}
			this.zpp_inner_zn.b2 = inbody2;
			if(this.get_space() != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) {
					inbody2.constraints.add(this.zpp_inner);
				}
			}
			if(this.get_active() && this.get_space() != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) {
					inbody2.wake();
				}
			}
		}
		return this.get_body2();
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) {
			this.zpp_inner_zn.setup_a1();
		}
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_anchor1: function(anchor1) {
		this.get_anchor1().set(anchor1);
		return this.get_anchor1();
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) {
			this.zpp_inner_zn.setup_a2();
		}
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor2: function(anchor2) {
		this.get_anchor2().set(anchor2);
		return this.get_anchor2();
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(this.get_phase() != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.get_phase();
	}
	,bodyImpulse: function(body) {
		if(!this.get_active()) {
			return nape_geom_Vec3.get();
		} else {
			return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
		}
	}
	,__class__: nape_constraint_WeldJoint
	,__properties__: $extend(nape_constraint_Constraint.prototype.__properties__,{set_phase:"set_phase",get_phase:"get_phase",set_anchor2:"set_anchor2",get_anchor2:"get_anchor2",set_anchor1:"set_anchor1",get_anchor1:"get_anchor1",set_body2:"set_body2",get_body2:"get_body2",set_body1:"set_body1",get_body1:"get_body1"})
});
var nape_dynamics_Arbiter = function() {
	this.zpp_inner = null;
	var tmp = !zpp_$nape_dynamics_ZPP_$Arbiter.internal;
};
$hxClasses["nape.dynamics.Arbiter"] = nape_dynamics_Arbiter;
nape_dynamics_Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape_dynamics_Arbiter.prototype = {
	zpp_inner: null
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	}
	,get_collisionArbiter: function() {
		if(this.isCollisionArbiter()) {
			return this.zpp_inner.colarb.outer_zn;
		} else {
			return null;
		}
	}
	,get_shape1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
			return this.zpp_inner.ws2.outer;
		} else {
			return this.zpp_inner.ws1.outer;
		}
	}
	,get_shape2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
			return this.zpp_inner.ws1.outer;
		} else {
			return this.zpp_inner.ws2.outer;
		}
	}
	,get_body1: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
			return this.zpp_inner.b2.outer;
		} else {
			return this.zpp_inner.b1.outer;
		}
	}
	,get_body2: function() {
		if(this.zpp_inner.ws1.id > this.zpp_inner.ws2.id) {
			return this.zpp_inner.b1.outer;
		} else {
			return this.zpp_inner.b2.outer;
		}
	}
	,get_state: function() {
		var _g = this.zpp_inner.immState;
		var x = _g;
		if(x == 5) {
			return nape_callbacks_PreFlag.get_ACCEPT();
		} else if(_g == 1) {
			return nape_callbacks_PreFlag.get_ACCEPT_ONCE();
		} else {
			var x1 = _g;
			if(x1 == 6) {
				return nape_callbacks_PreFlag.get_IGNORE();
			} else {
				return nape_callbacks_PreFlag.get_IGNORE_ONCE();
			}
		}
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) {
			freshOnly = false;
		}
		return nape_geom_Vec3.get(0,0,0);
	}
	,toString: function() {
		var ret = this.isCollisionArbiter() ? "CollisionArbiter" : this.isFluidArbiter() ? "FluidArbiter" : "SensorArbiter";
		if(this.zpp_inner.cleared) {
			return ret + "(object-pooled)";
		} else {
			return ret + "(" + this.get_shape1().toString() + "|" + this.get_shape2().toString() + ")" + (this.isCollisionArbiter() ? "[" + ["SD","DD"][this.zpp_inner.colarb.stat ? 0 : 1] + "]" : "") + "<-" + this.get_state().toString();
		}
	}
	,__class__: nape_dynamics_Arbiter
	,__properties__: {get_state:"get_state",get_body2:"get_body2",get_body1:"get_body1",get_shape2:"get_shape2",get_shape1:"get_shape1",get_collisionArbiter:"get_collisionArbiter"}
};
var nape_dynamics_ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ArbiterIterator"] = nape_dynamics_ArbiterIterator;
nape_dynamics_ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape_dynamics_ArbiterIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ArbiterIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ArbiterList.internal = true;
		var ret1 = new nape_dynamics_ArbiterIterator();
		zpp_$nape_util_ZPP_$ArbiterList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ArbiterIterator.zpp_pool;
		nape_dynamics_ArbiterIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ArbiterIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ArbiterIterator
};
var nape_dynamics_ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ArbiterList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ArbiterList"] = nape_dynamics_ArbiterList;
nape_dynamics_ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape_dynamics_ArbiterList.prototype = {
	zpp_inner: null
	,get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.begin();
			while(true) {
				var x = this.zpp_inner.at_ite.elem();
				if(x.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elem();
				if(x1.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().wrapper();
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_dynamics_ArbiterIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,foreach: function(lambda) {
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda(it.next());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			it.zpp_next = nape_dynamics_ArbiterIterator.zpp_pool;
			nape_dynamics_ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,__class__: nape_dynamics_ArbiterList
	,__properties__: {get_length:"get_length"}
};
var nape_dynamics_ArbiterType = function() {
};
$hxClasses["nape.dynamics.ArbiterType"] = nape_dynamics_ArbiterType;
nape_dynamics_ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape_dynamics_ArbiterType.__properties__ = {get_FLUID:"get_FLUID",get_SENSOR:"get_SENSOR",get_COLLISION:"get_COLLISION"};
nape_dynamics_ArbiterType.get_COLLISION = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_COLLISION;
};
nape_dynamics_ArbiterType.get_SENSOR = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_SENSOR;
};
nape_dynamics_ArbiterType.get_FLUID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID = new nape_dynamics_ArbiterType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ArbiterType_FLUID;
};
nape_dynamics_ArbiterType.prototype = {
	toString: function() {
		if(this == nape_dynamics_ArbiterType.get_COLLISION()) {
			return "COLLISION";
		} else if(this == nape_dynamics_ArbiterType.get_SENSOR()) {
			return "SENSOR";
		} else if(this == nape_dynamics_ArbiterType.get_FLUID()) {
			return "FLUID";
		} else {
			return "";
		}
	}
	,__class__: nape_dynamics_ArbiterType
};
var nape_dynamics_CollisionArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.CollisionArbiter"] = nape_dynamics_CollisionArbiter;
nape_dynamics_CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape_dynamics_CollisionArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_CollisionArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) {
			freshOnly = false;
		}
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += imp.get_x() * t1;
			rety += imp.get_y() * t1;
			retz += imp.get_z() * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().normalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += imp1.get_x() * t3;
				rety += imp1.get_y() * t3;
				retz += imp1.get_z() * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) {
			freshOnly = false;
		}
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += imp.get_x() * t1;
			rety += imp.get_y() * t1;
			retz += imp.get_z() * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp1 = colarb.oc2.wrapper().totalImpulse(body);
				var t2 = 1;
				var t3 = t2;
				retx += imp1.get_x() * t3;
				rety += imp1.get_y() * t3;
				retz += imp1.get_z() * t2;
				imp1.dispose();
			}
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,__class__: nape_dynamics_CollisionArbiter
});
var nape_dynamics_Contact = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.Contact"] = nape_dynamics_Contact;
nape_dynamics_Contact.__name__ = ["nape","dynamics","Contact"];
nape_dynamics_Contact.prototype = {
	zpp_inner: null
	,normalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) {
			return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc);
		} else if(body == colarb.b1.outer) {
			return nape_geom_Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc);
		} else {
			return nape_geom_Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
		}
	}
	,totalImpulse: function(body) {
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) {
			return nape_geom_Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc);
		} else {
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) {
				return nape_geom_Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc);
			} else {
				return nape_geom_Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
			}
		}
	}
	,toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) {
			return "{object-pooled}";
		} else {
			return "{Contact}";
		}
	}
	,__class__: nape_dynamics_Contact
};
var nape_dynamics_ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.ContactIterator"] = nape_dynamics_ContactIterator;
nape_dynamics_ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape_dynamics_ContactIterator.get = function(list) {
	var ret;
	if(nape_dynamics_ContactIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ContactList.internal = true;
		var ret1 = new nape_dynamics_ContactIterator();
		zpp_$nape_util_ZPP_$ContactList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_ContactIterator.zpp_pool;
		nape_dynamics_ContactIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_ContactIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_ContactIterator.zpp_pool;
			nape_dynamics_ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_ContactIterator
};
var nape_dynamics_ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ContactList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.ContactList"] = nape_dynamics_ContactList;
nape_dynamics_ContactList.__name__ = ["nape","dynamics","ContactList"];
nape_dynamics_ContactList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.active && i.arbiter.active) {
					this.zpp_inner.user_length++;
				}
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.begin();
			while(true) {
				var x = this.zpp_inner.at_ite.elem();
				if(x.active && x.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x1 = this.zpp_inner.at_ite.elem();
				if(x1.active && x1.arbiter.active) {
					break;
				}
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().wrapper();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_ContactIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_ContactList
	,__properties__: {get_length:"get_length"}
};
var nape_dynamics_FluidArbiter = function() {
	nape_dynamics_Arbiter.call(this);
};
$hxClasses["nape.dynamics.FluidArbiter"] = nape_dynamics_FluidArbiter;
nape_dynamics_FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape_dynamics_FluidArbiter.__super__ = nape_dynamics_Arbiter;
nape_dynamics_FluidArbiter.prototype = $extend(nape_dynamics_Arbiter.prototype,{
	buoyancyImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		if(body == null) {
			return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,0);
		} else if(body.zpp_inner == this.zpp_inner.b2) {
			return nape_geom_Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y);
		} else {
			return nape_geom_Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
		}
	}
	,dragImpulse: function(body) {
		var farb = this.zpp_inner.fluidarb;
		var scale = body == null || body.zpp_inner == this.zpp_inner.b2 ? 1 : -1;
		return nape_geom_Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) {
			freshOnly = false;
		}
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		_g.set_x(_g.get_x() + tmp.get_x());
		var _g1 = ret;
		_g1.set_y(_g1.get_y() + tmp.get_y());
		var _g2 = ret;
		_g2.set_z(_g2.get_z() + tmp.get_z());
		tmp.dispose();
		return ret;
	}
	,__class__: nape_dynamics_FluidArbiter
});
var nape_dynamics_InteractionGroup = function(ignore) {
	if(ignore == null) {
		ignore = false;
	}
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_dynamics_ZPP_$InteractionGroup();
	this.zpp_inner.outer = this;
	this.set_ignore(ignore);
};
$hxClasses["nape.dynamics.InteractionGroup"] = nape_dynamics_InteractionGroup;
nape_dynamics_InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape_dynamics_InteractionGroup.prototype = {
	zpp_inner: null
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_ignore: function(ignore) {
		if(this.get_ignore() != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.get_ignore();
	}
	,toString: function() {
		var ret = "InteractionGroup";
		if(this.get_ignore()) {
			ret += ":ignore";
		}
		return ret;
	}
	,__class__: nape_dynamics_InteractionGroup
	,__properties__: {set_ignore:"set_ignore",get_ignore:"get_ignore"}
};
var nape_dynamics_InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.dynamics.InteractionGroupIterator"] = nape_dynamics_InteractionGroupIterator;
nape_dynamics_InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape_dynamics_InteractionGroupIterator.get = function(list) {
	var ret;
	if(nape_dynamics_InteractionGroupIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = true;
		var ret1 = new nape_dynamics_InteractionGroupIterator();
		zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
		ret = ret1;
	} else {
		var r = nape_dynamics_InteractionGroupIterator.zpp_pool;
		nape_dynamics_InteractionGroupIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_dynamics_InteractionGroupIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_dynamics_InteractionGroupIterator.zpp_pool;
			nape_dynamics_InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_dynamics_InteractionGroupIterator
};
var nape_dynamics_InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractionGroupList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.dynamics.InteractionGroupList"] = nape_dynamics_InteractionGroupList;
nape_dynamics_InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape_dynamics_InteractionGroupList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_dynamics_InteractionGroupIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_dynamics_InteractionGroupList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_AABB = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.AABB"] = nape_geom_AABB;
nape_geom_AABB.__name__ = ["nape","geom","AABB"];
nape_geom_AABB.prototype = {
	zpp_inner: null
	,toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,__class__: nape_geom_AABB
};
var nape_geom_ConvexResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResult"] = nape_geom_ConvexResult;
nape_geom_ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape_geom_ConvexResult.prototype = {
	zpp_inner: null
	,get_toi: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.get_shape()) + " toi: " + this.get_toi() + " }";
	}
	,__class__: nape_geom_ConvexResult
	,__properties__: {get_shape:"get_shape",get_toi:"get_toi"}
};
var nape_geom_ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.ConvexResultIterator"] = nape_geom_ConvexResultIterator;
nape_geom_ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape_geom_ConvexResultIterator.get = function(list) {
	var ret;
	if(nape_geom_ConvexResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ConvexResultList.internal = true;
		var ret1 = new nape_geom_ConvexResultIterator();
		zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_ConvexResultIterator.zpp_pool;
		nape_geom_ConvexResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_ConvexResultIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_ConvexResultIterator.zpp_pool;
			nape_geom_ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_ConvexResultIterator
};
var nape_geom_ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ConvexResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.ConvexResultList"] = nape_geom_ConvexResultList;
nape_geom_ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape_geom_ConvexResultList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_ConvexResultIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_ConvexResultList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$GeomPoly(this);
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get(v.get_x(),v.get_y());
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = this.zpp_inner.vertices;
					obj.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj;
					this.zpp_inner.vertices.next = obj;
				}
				this.zpp_inner.vertices = obj;
			}
		} else if(Std["is"](vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var v1 = lv1.iterator();
			while(v1.hasNext()) {
				var v2 = v1.next();
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(v2.get_x(),v2.get_y());
				if(this.zpp_inner.vertices == null) {
					this.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = this.zpp_inner.vertices;
					obj1.next = this.zpp_inner.vertices.next;
					this.zpp_inner.vertices.next.prev = obj1;
					this.zpp_inner.vertices.next = obj1;
				}
				this.zpp_inner.vertices = obj1;
			}
		} else if(Std["is"](vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var v3 = nape_geom_Vec2.get(vite1.x,vite1.y);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get(v3.get_x(),v3.get_y());
					if(this.zpp_inner.vertices == null) {
						this.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = this.zpp_inner.vertices;
						obj2.next = this.zpp_inner.vertices.next;
						this.zpp_inner.vertices.next.prev = obj2;
						this.zpp_inner.vertices.next = obj2;
					}
					this.zpp_inner.vertices = obj2;
					v3.dispose();
					if(vite1 == verts) {
						break;
					}
				}
			}
		}
		this.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp;
				if(cur.zpp_inner.weak) {
					cur.dispose();
					tmp = true;
				} else {
					tmp = false;
				}
				if(tmp) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(Std["is"](vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.begin();
			while(cur1 != null) {
				var x = cur1.elem();
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
};
$hxClasses["nape.geom.GeomPoly"] = nape_geom_GeomPoly;
nape_geom_GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape_geom_GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolGeomPoly == null) {
		ret = new nape_geom_GeomPoly();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolGeomPoly;
		zpp_$nape_util_ZPP_$PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	if(vertices != null) {
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				var v = vite;
				var obj = zpp_$nape_geom_ZPP_$GeomVert.get(v.get_x(),v.get_y());
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj.prev = obj.next = obj;
				} else {
					obj.prev = ret.zpp_inner.vertices;
					obj.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj;
					ret.zpp_inner.vertices.next = obj;
				}
				ret.zpp_inner.vertices = obj;
			}
		} else if(Std["is"](vertices,nape_geom_Vec2List)) {
			var lv1 = vertices;
			var v1 = lv1.iterator();
			while(v1.hasNext()) {
				var v2 = v1.next();
				var obj1 = zpp_$nape_geom_ZPP_$GeomVert.get(v2.get_x(),v2.get_y());
				if(ret.zpp_inner.vertices == null) {
					ret.zpp_inner.vertices = obj1.prev = obj1.next = obj1;
				} else {
					obj1.prev = ret.zpp_inner.vertices;
					obj1.next = ret.zpp_inner.vertices.next;
					ret.zpp_inner.vertices.next.prev = obj1;
					ret.zpp_inner.vertices.next = obj1;
				}
				ret.zpp_inner.vertices = obj1;
			}
		} else if(Std["is"](vertices,nape_geom_GeomPoly)) {
			var lv2 = vertices;
			var verts = lv2.zpp_inner.vertices;
			if(verts != null) {
				var vite1 = verts;
				while(true) {
					var v3 = nape_geom_Vec2.get(vite1.x,vite1.y);
					vite1 = vite1.next;
					var obj2 = zpp_$nape_geom_ZPP_$GeomVert.get(v3.get_x(),v3.get_y());
					if(ret.zpp_inner.vertices == null) {
						ret.zpp_inner.vertices = obj2.prev = obj2.next = obj2;
					} else {
						obj2.prev = ret.zpp_inner.vertices;
						obj2.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj2;
						ret.zpp_inner.vertices.next = obj2;
					}
					ret.zpp_inner.vertices = obj2;
					v3.dispose();
					if(!(vite1 != verts)) {
						break;
					}
				}
			}
		}
		ret.skipForward(1);
		if((vertices instanceof Array) && vertices.__enum__ == null) {
			var lv3 = vertices;
			var i = 0;
			while(i < lv3.length) {
				var cur = lv3[i];
				var tmp;
				if(cur.zpp_inner.weak) {
					cur.dispose();
					tmp = true;
				} else {
					tmp = false;
				}
				if(tmp) {
					lv3.splice(i,1);
					continue;
				}
				++i;
			}
		} else if(Std["is"](vertices,nape_geom_Vec2List)) {
			var lv4 = vertices;
			if(lv4.zpp_inner._validate != null) {
				lv4.zpp_inner._validate();
			}
			var ins = lv4.zpp_inner.inner;
			var pre = null;
			var cur1 = ins.begin();
			while(cur1 != null) {
				var x = cur1.elem();
				if(x.outer.zpp_inner.weak) {
					cur1 = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
					}
				} else {
					pre = cur1;
					cur1 = cur1.next;
				}
			}
		}
	}
	return ret;
};
nape_geom_GeomPoly.prototype = {
	zpp_pool: null
	,zpp_inner: null
	,skipForward: function(times) {
		if(this.zpp_inner.vertices != null) {
			if(times > 0) {
				while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next;
			} else if(times < 0) {
				while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
			}
		}
		return this;
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			while(true) {
				var v = nite;
				if(v != this.zpp_inner.vertices) {
					ret += ",";
				}
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
				if(!(nite != L)) {
					break;
				}
			}
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPoly
};
var nape_geom_GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.GeomPolyIterator"] = nape_geom_GeomPolyIterator;
nape_geom_GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape_geom_GeomPolyIterator.get = function(list) {
	var ret;
	if(nape_geom_GeomPolyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$GeomPolyList.internal = true;
		var ret1 = new nape_geom_GeomPolyIterator();
		zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_GeomPolyIterator.zpp_pool;
		nape_geom_GeomPolyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_GeomPolyIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_GeomPolyIterator.zpp_pool;
			nape_geom_GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_GeomPolyIterator
};
var nape_geom_GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$GeomPolyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.GeomPolyList"] = nape_geom_GeomPolyList;
nape_geom_GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape_geom_GeomPolyList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_GeomPolyIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_GeomPolyList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0.0;
	}
	if(tx == null) {
		tx = 0.0;
	}
	if(d == null) {
		d = 1.0;
	}
	if(c == null) {
		c = 0.0;
	}
	if(b == null) {
		b = 0.0;
	}
	if(a == null) {
		a = 1.0;
	}
	this.zpp_inner = null;
	this.zpp_inner = zpp_$nape_geom_ZPP_$Mat23.get();
	this.zpp_inner.outer = this;
	this.set_a(a);
	this.set_b(b);
	this.set_tx(tx);
	this.set_c(c);
	this.set_d(d);
	this.set_ty(ty);
};
$hxClasses["nape.geom.Mat23"] = nape_geom_Mat23;
nape_geom_Mat23.__name__ = ["nape","geom","Mat23"];
nape_geom_Mat23.prototype = {
	zpp_inner: null
	,get_a: function() {
		return this.zpp_inner.a;
	}
	,set_a: function(a) {
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.get_a();
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_b: function(b) {
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.get_b();
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_c: function(c) {
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.get_c();
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_d: function(d) {
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.get_d();
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_tx: function(tx) {
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.get_tx();
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_ty: function(ty) {
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.get_ty();
	}
	,toString: function() {
		return "{ a: " + this.get_a() + " b: " + this.get_b() + " c: " + this.get_c() + " d: " + this.get_d() + " tx: " + this.get_tx() + " ty: " + this.get_ty() + " }";
	}
	,__class__: nape_geom_Mat23
	,__properties__: {set_ty:"set_ty",get_ty:"get_ty",set_tx:"set_tx",get_tx:"get_tx",set_d:"set_d",get_d:"get_d",set_c:"set_c",get_c:"get_c",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
};
var nape_geom_MatMN = function(rows,cols) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.MatMN"] = nape_geom_MatMN;
nape_geom_MatMN.__name__ = ["nape","geom","MatMN"];
nape_geom_MatMN.prototype = {
	zpp_inner: null
	,get_rows: function() {
		return this.zpp_inner.m;
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,x: function(row,col) {
		return this.zpp_inner.x[row * this.get_cols() + col];
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0;
		var _g = this.get_rows();
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) {
				ret += "; ";
			}
			fst = false;
			var _g3 = 0;
			var _g2 = this.get_cols();
			while(_g3 < _g2) {
				var j = _g3++;
				ret += this.x(i,j) + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,__class__: nape_geom_MatMN
	,__properties__: {get_cols:"get_cols",get_rows:"get_rows"}
};
var nape_geom_RayResult = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResult"] = nape_geom_RayResult;
nape_geom_RayResult.__name__ = ["nape","geom","RayResult"];
nape_geom_RayResult.prototype = {
	zpp_inner: null
	,get_distance: function() {
		return this.zpp_inner.toiDistance;
	}
	,get_inner: function() {
		return this.zpp_inner.inner;
	}
	,get_shape: function() {
		return this.zpp_inner.shape;
	}
	,toString: function() {
		return "{ shape: " + Std.string(this.get_shape()) + " distance: " + this.get_distance() + " ?inner: " + Std.string(this.get_inner()) + " }";
	}
	,__class__: nape_geom_RayResult
	,__properties__: {get_shape:"get_shape",get_inner:"get_inner",get_distance:"get_distance"}
};
var nape_geom_RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.RayResultIterator"] = nape_geom_RayResultIterator;
nape_geom_RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape_geom_RayResultIterator.get = function(list) {
	var ret;
	if(nape_geom_RayResultIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$RayResultList.internal = true;
		var ret1 = new nape_geom_RayResultIterator();
		zpp_$nape_util_ZPP_$RayResultList.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_RayResultIterator.zpp_pool;
		nape_geom_RayResultIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_RayResultIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_RayResultIterator.zpp_pool;
			nape_geom_RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_RayResultIterator
};
var nape_geom_RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$RayResultList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.RayResultList"] = nape_geom_RayResultList;
nape_geom_RayResultList.__name__ = ["nape","geom","RayResultList"];
nape_geom_RayResultList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_geom_RayResultIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_RayResultList
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.geom.Vec2Iterator"] = nape_geom_Vec2Iterator;
nape_geom_Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape_geom_Vec2Iterator.get = function(list) {
	var ret;
	if(nape_geom_Vec2Iterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$Vec2List.internal = true;
		var ret1 = new nape_geom_Vec2Iterator();
		zpp_$nape_util_ZPP_$Vec2List.internal = false;
		ret = ret1;
	} else {
		var r = nape_geom_Vec2Iterator.zpp_pool;
		nape_geom_Vec2Iterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_geom_Vec2Iterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_geom_Vec2Iterator.zpp_pool;
			nape_geom_Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_geom_Vec2Iterator
};
var nape_geom_Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$Vec2List();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.geom.Vec2List"] = nape_geom_Vec2List;
nape_geom_Vec2List.__name__ = ["nape","geom","Vec2List"];
nape_geom_Vec2List.fromArray = function(array) {
	var ret = new nape_geom_Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
};
nape_geom_Vec2List.prototype = {
	zpp_inner: null
	,get_length: function() {
		return this.zpp_gl();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape_geom_Vec2Iterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_geom_Vec2List
	,__properties__: {get_length:"get_length"}
};
var nape_geom_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_geom_ZPP_$Vec3();
	this.zpp_inner.outer = this;
	this.set_x(x);
	this.set_y(y);
	this.set_z(z);
};
$hxClasses["nape.geom.Vec3"] = nape_geom_Vec3;
nape_geom_Vec3.__name__ = ["nape","geom","Vec3"];
nape_geom_Vec3.get = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var ret;
	if(zpp_$nape_util_ZPP_$PubPool.poolVec3 == null) {
		ret = new nape_geom_Vec3();
	} else {
		ret = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
};
nape_geom_Vec3.prototype = {
	zpp_inner: null
	,zpp_pool: null
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,set_x: function(x) {
		this.zpp_inner.x = x;
		return this.get_x();
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_y: function(y) {
		this.zpp_inner.y = y;
		return this.get_y();
	}
	,get_z: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_z: function(z) {
		this.zpp_inner.z = z;
		return this.get_z();
	}
	,dispose: function() {
		var o = this;
		o.zpp_pool = zpp_$nape_util_ZPP_$PubPool.poolVec3;
		zpp_$nape_util_ZPP_$PubPool.poolVec3 = o;
	}
	,setxyz: function(x,y,z) {
		this.set_x(x);
		this.set_y(y);
		this.set_z(z);
		return this;
	}
	,xy: function(weak) {
		if(weak == null) {
			weak = false;
		}
		return nape_geom_Vec2.get(this.get_x(),this.get_y(),weak);
	}
	,toString: function() {
		return "{ x: " + this.get_x() + " y: " + this.get_y() + " z: " + this.get_z() + " }";
	}
	,__class__: nape_geom_Vec3
	,__properties__: {set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var nape_geom_Winding = function() {
};
$hxClasses["nape.geom.Winding"] = nape_geom_Winding;
nape_geom_Winding.__name__ = ["nape","geom","Winding"];
nape_geom_Winding.__properties__ = {get_ANTICLOCKWISE:"get_ANTICLOCKWISE",get_CLOCKWISE:"get_CLOCKWISE",get_UNDEFINED:"get_UNDEFINED"};
nape_geom_Winding.get_UNDEFINED = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_UNDEFINED;
};
nape_geom_Winding.get_CLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_CLOCKWISE;
};
nape_geom_Winding.get_ANTICLOCKWISE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE = new nape_geom_Winding();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Winding_ANTICLOCKWISE;
};
nape_geom_Winding.prototype = {
	toString: function() {
		if(this == nape_geom_Winding.get_UNDEFINED()) {
			return "UNDEFINED";
		} else if(this == nape_geom_Winding.get_CLOCKWISE()) {
			return "CLOCKWISE";
		} else if(this == nape_geom_Winding.get_ANTICLOCKWISE()) {
			return "ANTICLOCKWISE";
		} else {
			return "";
		}
	}
	,__class__: nape_geom_Winding
};
var nape_phys_Interactor = function() {
	this.zpp_inner_i = null;
};
$hxClasses["nape.phys.Interactor"] = nape_phys_Interactor;
nape_phys_Interactor.__name__ = ["nape","phys","Interactor"];
nape_phys_Interactor.prototype = {
	zpp_inner_i: null
	,get_id: function() {
		return this.zpp_inner_i.id;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) {
			this.zpp_inner_i.userData = { };
		}
		return this.zpp_inner_i.userData;
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) {
			this.zpp_inner_i.setupcbTypes();
		}
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,toString: function() {
		return "";
	}
	,__class__: nape_phys_Interactor
	,__properties__: {get_cbTypes:"get_cbTypes",get_userData:"get_userData",get_id:"get_id"}
};
var nape_phys_Body = function(type,position) {
	this.graphic = null;
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.graphicOffset = new nape_geom_Vec2(0,0);
	if(position != null) {
		this.zpp_inner.posx = position.get_x();
		this.zpp_inner.posy = position.get_y();
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null ? nape_phys_BodyType.get_DYNAMIC() : type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
		}
	}
	this.zpp_inner_i.insert_cbtype(nape_callbacks_CbType.get_ANY_BODY().zpp_inner);
};
$hxClasses["nape.phys.Body"] = nape_phys_Body;
nape_phys_Body.__name__ = ["nape","phys","Body"];
nape_phys_Body.__super__ = nape_phys_Interactor;
nape_phys_Body.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,graphic: null
	,graphicOffset: null
	,get_type: function() {
		return zpp_$nape_phys_ZPP_$Body.types[this.zpp_inner.type];
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(this.get_type() != type) {
			var ntype = type == nape_phys_BodyType.get_DYNAMIC() ? 2 : type == nape_phys_BodyType.get_KINEMATIC() ? 3 : 1;
			if(ntype == 1 && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) {
				this.zpp_inner.space.transmitType(this.zpp_inner,ntype);
			} else {
				this.zpp_inner.type = ntype;
			}
		}
		return this.get_type();
	}
	,isStatic: function() {
		return this.zpp_inner.isStatic();
	}
	,isDynamic: function() {
		return this.zpp_inner.isDynamic();
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,get_space: function() {
		if(this.zpp_inner.space == null) {
			return null;
		} else {
			return this.zpp_inner.space.outer;
		}
	}
	,set_space: function(space) {
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.get_space() != space) {
			if(this.get_space() != null) {
				this.zpp_inner.component.woken = false;
			}
			if(this.get_space() != null) {
				this.get_space().get_bodies().remove(this);
			}
			if(space != null) {
				space.get_bodies().add(this);
			}
		}
		return this.get_space();
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			this.zpp_inner.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.zpp_inner.arbiters,true);
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_isSleeping: function() {
		return this.zpp_inner.component.sleeping;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) {
			this.zpp_inner.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.zpp_inner.constraints,true);
		}
		return this.zpp_inner.wrap_constraints;
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) {
			this.zpp_inner.setupPosition();
		}
		return this.zpp_inner.wrap_pos;
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) {
			this.zpp_inner.setupVelocity();
		}
		return this.zpp_inner.wrap_vel;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.get_rotation() != rotation) {
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.get_rotation();
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.get_angularVel() != angularVel) {
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.invalidate_wake();
		}
		return this.get_angularVel();
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + (allowMovement == null ? "null" : "" + allowMovement));
		if(this.get_allowMovement() != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return this.get_allowMovement();
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + (allowRotation == null ? "null" : "" + allowRotation));
		if(this.get_allowRotation() != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return this.get_allowRotation();
	}
	,get_gravMass: function() {
		this.zpp_inner.validate_gravMass();
		return this.zpp_inner.gravMass;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		this.zpp_inner.gravMassMode = 1;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		return this.get_gravMass();
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) {
			weak = false;
		}
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * point.get_x() - this.zpp_inner.axisx * point.get_y();
		tempy = point.get_x() * this.zpp_inner.axisx + point.get_y() * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
		}
		return nape_geom_Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) {
			weak = false;
		}
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = point.get_x() - this.zpp_inner.posx;
		pointy = point.get_y() - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
		}
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) {
			weak = false;
		}
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * vector.get_x() - this.zpp_inner.axisx * vector.get_y();
		tempy = vector.get_x() * this.zpp_inner.axisx + vector.get_y() * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
		}
		return nape_geom_Vec2.get(tempx,tempy,weak);
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) {
			sleepable = false;
		}
		if(sleepable && this.get_isSleeping()) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
			}
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
				}
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += impulse.get_x() * t;
		this.zpp_inner.vely += impulse.get_y() * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = pos.get_x() - this.zpp_inner.posx;
			ry = pos.get_y() - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += (impulse.get_y() * rx - impulse.get_x() * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
			}
		}
		if(!sleepable) {
			if(this.isDynamic()) {
				this.zpp_inner.invalidate_wake();
			}
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
		}
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		this.zpp_inner.validate_localCOM();
		var dx = nape_geom_Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		this.get_position().subeq(dx2);
		if(this.zpp_inner.pre_posx < zpp_$nape_ZPP_$Const.POSINF()) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= dx2.get_x() * t;
			this.zpp_inner.pre_posy -= dx2.get_y() * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		var cx_ite = this.zpp_inner.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape_geom_Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) {
			freshOnly = false;
		}
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var oarb = this.get_arbiters().iterator();
		while(oarb.hasNext()) {
			var oarb1 = oarb.next();
			var arb = oarb1.zpp_inner;
			if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				continue;
			}
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) {
				continue;
			}
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += imp.get_x() * t1;
			rety += imp.get_y() * t1;
			retz += imp.get_z() * t;
			imp.dispose();
		}
		return nape_geom_Vec3.get(retx,rety,retz);
	}
	,toString: function() {
		return (this.zpp_inner.world ? "(space::world" : "(" + (this.isDynamic() ? "dynamic" : this.isStatic() ? "static" : "kinematic")) + ")#" + this.get_id();
	}
	,__class__: nape_phys_Body
	,__properties__: $extend(nape_phys_Interactor.prototype.__properties__,{get_localCOM:"get_localCOM",set_gravMass:"set_gravMass",get_gravMass:"get_gravMass",set_allowRotation:"set_allowRotation",get_allowRotation:"get_allowRotation",set_allowMovement:"set_allowMovement",get_allowMovement:"get_allowMovement",set_angularVel:"set_angularVel",get_angularVel:"get_angularVel",set_rotation:"set_rotation",get_rotation:"get_rotation",get_velocity:"get_velocity",get_position:"get_position",get_constraints:"get_constraints",get_isSleeping:"get_isSleeping",get_arbiters:"get_arbiters",set_space:"set_space",get_space:"get_space",get_shapes:"get_shapes",set_type:"set_type",get_type:"get_type"})
});
var nape_phys_BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.BodyIterator"] = nape_phys_BodyIterator;
nape_phys_BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape_phys_BodyIterator.get = function(list) {
	var ret;
	if(nape_phys_BodyIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$BodyList.internal = true;
		var ret1 = new nape_phys_BodyIterator();
		zpp_$nape_util_ZPP_$BodyList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_BodyIterator.zpp_pool;
		nape_phys_BodyIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_BodyIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_BodyIterator.zpp_pool;
			nape_phys_BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_BodyIterator
};
var nape_phys_BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$BodyList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.BodyList"] = nape_phys_BodyList;
nape_phys_BodyList.__name__ = ["nape","phys","BodyList"];
nape_phys_BodyList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,pop: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.front();
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.pop();
			}
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
				this.zpp_inner.at_ite = null;
			}
			var ite = this.get_length() == 1 ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) {
				ret = this.zpp_inner.inner.front();
			} else {
				ret = ite.next.elem();
			}
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx1);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.erase(ite);
			}
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,shift: function() {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) {
				this.zpp_inner.at_ite = null;
			}
			var ite = this.get_length() == 1 ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			if(ite == null) {
				ret = this.zpp_inner.inner.front();
			} else {
				ret = ite.next.elem();
			}
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.erase(ite);
			}
		} else {
			ret = this.zpp_inner.inner.front();
			var retx1 = ret.outer;
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(retx1);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.pop();
			}
		}
		this.zpp_inner.invalidate();
		var retx2 = ret.outer;
		return retx2;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) {
			return this.push(obj);
		} else {
			return this.unshift(obj);
		}
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,clear: function() {
		if(this.zpp_inner.reverse_flag) {
			while(!this.empty()) this.pop();
		} else {
			while(!this.empty()) this.shift();
		}
	}
	,empty: function() {
		return this.zpp_inner.inner.empty();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_BodyIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_BodyList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_BodyType = function() {
};
$hxClasses["nape.phys.BodyType"] = nape_phys_BodyType;
nape_phys_BodyType.__name__ = ["nape","phys","BodyType"];
nape_phys_BodyType.__properties__ = {get_KINEMATIC:"get_KINEMATIC",get_DYNAMIC:"get_DYNAMIC",get_STATIC:"get_STATIC"};
nape_phys_BodyType.get_STATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_STATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_STATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_STATIC;
};
nape_phys_BodyType.get_DYNAMIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_DYNAMIC;
};
nape_phys_BodyType.get_KINEMATIC = function() {
	if(zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC = new nape_phys_BodyType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.BodyType_KINEMATIC;
};
nape_phys_BodyType.prototype = {
	toString: function() {
		if(this == nape_phys_BodyType.get_STATIC()) {
			return "STATIC";
		} else if(this == nape_phys_BodyType.get_DYNAMIC()) {
			return "DYNAMIC";
		} else if(this == nape_phys_BodyType.get_KINEMATIC()) {
			return "KINEMATIC";
		} else {
			return "";
		}
	}
	,__class__: nape_phys_BodyType
};
var nape_phys_Compound = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
	this.zpp_inner = new zpp_$nape_phys_ZPP_$Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(nape_callbacks_CbType.get_ANY_COMPOUND().zpp_inner);
};
$hxClasses["nape.phys.Compound"] = nape_phys_Compound;
nape_phys_Compound.__name__ = ["nape","phys","Compound"];
nape_phys_Compound.__super__ = nape_phys_Interactor;
nape_phys_Compound.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,toString: function() {
		return "Compound" + this.get_id();
	}
	,__class__: nape_phys_Compound
});
var nape_phys_CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.CompoundIterator"] = nape_phys_CompoundIterator;
nape_phys_CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape_phys_CompoundIterator.get = function(list) {
	var ret;
	if(nape_phys_CompoundIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$CompoundList.internal = true;
		var ret1 = new nape_phys_CompoundIterator();
		zpp_$nape_util_ZPP_$CompoundList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_CompoundIterator.zpp_pool;
		nape_phys_CompoundIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_CompoundIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_CompoundIterator.zpp_pool;
			nape_phys_CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_CompoundIterator
};
var nape_phys_CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$CompoundList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.CompoundList"] = nape_phys_CompoundList;
nape_phys_CompoundList.__name__ = ["nape","phys","CompoundList"];
nape_phys_CompoundList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_CompoundIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_CompoundList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_FluidProperties = function(density,viscosity) {
	if(viscosity == null) {
		viscosity = 1;
	}
	if(density == null) {
		density = 1;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$FluidProperties();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool;
		zpp_$nape_phys_ZPP_$FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.alloc();
	this.zpp_inner.outer = this;
	this.set_density(density);
	this.set_viscosity(viscosity);
};
$hxClasses["nape.phys.FluidProperties"] = nape_phys_FluidProperties;
nape_phys_FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape_phys_FluidProperties.prototype = {
	zpp_inner: null
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.get_density()) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.get_density();
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.get_viscosity()) {
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.get_viscosity();
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,toString: function() {
		return "{ density: " + this.get_density() + " viscosity: " + this.get_viscosity() + " gravity: " + Std.string(this.get_gravity()) + " }";
	}
	,__class__: nape_phys_FluidProperties
	,__properties__: {get_gravity:"get_gravity",set_viscosity:"set_viscosity",get_viscosity:"get_viscosity",set_density:"set_density",get_density:"get_density"}
};
var nape_phys_GravMassMode = function() {
};
$hxClasses["nape.phys.GravMassMode"] = nape_phys_GravMassMode;
nape_phys_GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape_phys_GravMassMode.__properties__ = {get_SCALED:"get_SCALED",get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"};
nape_phys_GravMassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_DEFAULT;
};
nape_phys_GravMassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_FIXED;
};
nape_phys_GravMassMode.get_SCALED = function() {
	if(zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED = new nape_phys_GravMassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.GravMassMode_SCALED;
};
nape_phys_GravMassMode.prototype = {
	toString: function() {
		if(this == nape_phys_GravMassMode.get_DEFAULT()) {
			return "DEFAULT";
		} else if(this == nape_phys_GravMassMode.get_FIXED()) {
			return "FIXED";
		} else if(this == nape_phys_GravMassMode.get_SCALED()) {
			return "SCALED";
		} else {
			return "";
		}
	}
	,__class__: nape_phys_GravMassMode
};
var nape_phys_InertiaMode = function() {
};
$hxClasses["nape.phys.InertiaMode"] = nape_phys_InertiaMode;
nape_phys_InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape_phys_InertiaMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"};
nape_phys_InertiaMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_DEFAULT;
};
nape_phys_InertiaMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED = new nape_phys_InertiaMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.InertiaMode_FIXED;
};
nape_phys_InertiaMode.prototype = {
	toString: function() {
		if(this == nape_phys_InertiaMode.get_DEFAULT()) {
			return "DEFAULT";
		} else if(this == nape_phys_InertiaMode.get_FIXED()) {
			return "FIXED";
		} else {
			return "";
		}
	}
	,__class__: nape_phys_InertiaMode
};
var nape_phys_InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.phys.InteractorIterator"] = nape_phys_InteractorIterator;
nape_phys_InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape_phys_InteractorIterator.get = function(list) {
	var ret;
	if(nape_phys_InteractorIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$InteractorList.internal = true;
		var ret1 = new nape_phys_InteractorIterator();
		zpp_$nape_util_ZPP_$InteractorList.internal = false;
		ret = ret1;
	} else {
		var r = nape_phys_InteractorIterator.zpp_pool;
		nape_phys_InteractorIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_phys_InteractorIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_phys_InteractorIterator.zpp_pool;
			nape_phys_InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_phys_InteractorIterator
};
var nape_phys_InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$InteractorList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.phys.InteractorList"] = nape_phys_InteractorList;
nape_phys_InteractorList.__name__ = ["nape","phys","InteractorList"];
nape_phys_InteractorList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer_i;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_phys_InteractorIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_phys_InteractorList
	,__properties__: {get_length:"get_length"}
};
var nape_phys_MassMode = function() {
};
$hxClasses["nape.phys.MassMode"] = nape_phys_MassMode;
nape_phys_MassMode.__name__ = ["nape","phys","MassMode"];
nape_phys_MassMode.__properties__ = {get_FIXED:"get_FIXED",get_DEFAULT:"get_DEFAULT"};
nape_phys_MassMode.get_DEFAULT = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_DEFAULT;
};
nape_phys_MassMode.get_FIXED = function() {
	if(zpp_$nape_util_ZPP_$Flags.MassMode_FIXED == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.MassMode_FIXED = new nape_phys_MassMode();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.MassMode_FIXED;
};
nape_phys_MassMode.prototype = {
	toString: function() {
		if(this == nape_phys_MassMode.get_DEFAULT()) {
			return "DEFAULT";
		} else if(this == nape_phys_MassMode.get_FIXED()) {
			return "FIXED";
		} else {
			return "";
		}
	}
	,__class__: nape_phys_MassMode
};
var nape_phys_Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) {
		rollingFriction = 0.001;
	}
	if(density == null) {
		density = 1;
	}
	if(staticFriction == null) {
		staticFriction = 2.0;
	}
	if(dynamicFriction == null) {
		dynamicFriction = 1.0;
	}
	if(elasticity == null) {
		elasticity = 0.0;
	}
	this.zpp_inner = null;
	if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
		this.zpp_inner = new zpp_$nape_phys_ZPP_$Material();
	} else {
		this.zpp_inner = zpp_$nape_phys_ZPP_$Material.zpp_pool;
		zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	this.zpp_inner.alloc();
	this.zpp_inner.outer = this;
	this.set_elasticity(elasticity);
	this.set_dynamicFriction(dynamicFriction);
	this.set_staticFriction(staticFriction);
	this.set_density(density);
	this.set_rollingFriction(rollingFriction);
};
$hxClasses["nape.phys.Material"] = nape_phys_Material;
nape_phys_Material.__name__ = ["nape","phys","Material"];
nape_phys_Material.wood = function() {
	return new nape_phys_Material(0.4,0.2,0.38,0.7,0.005);
};
nape_phys_Material.steel = function() {
	return new nape_phys_Material(0.2,0.57,0.74,7.8,0.001);
};
nape_phys_Material.prototype = {
	zpp_inner: null
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.get_elasticity()) {
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.get_elasticity();
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.get_dynamicFriction()) {
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ANGDRAG | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.get_dynamicFriction();
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.get_staticFriction()) {
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.get_staticFriction();
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_density: function(density) {
		if(density != this.get_density()) {
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.PROPS);
		}
		return this.get_density();
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.get_rollingFriction()) {
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_$nape_phys_ZPP_$Material.WAKE | zpp_$nape_phys_ZPP_$Material.ARBITERS);
		}
		return this.get_rollingFriction();
	}
	,toString: function() {
		return "{ elasticity: " + this.get_elasticity() + " dynamicFriction: " + this.get_dynamicFriction() + " staticFriction: " + this.get_staticFriction() + " density: " + this.get_density() + " rollingFriction: " + this.get_rollingFriction() + " }";
	}
	,__class__: nape_phys_Material
	,__properties__: {set_rollingFriction:"set_rollingFriction",get_rollingFriction:"get_rollingFriction",set_density:"set_density",get_density:"get_density",set_staticFriction:"set_staticFriction",get_staticFriction:"get_staticFriction",set_dynamicFriction:"set_dynamicFriction",get_dynamicFriction:"get_dynamicFriction",set_elasticity:"set_elasticity",get_elasticity:"get_elasticity"}
};
var nape_shape_Shape = function() {
	this.zpp_inner = null;
	nape_phys_Interactor.call(this);
};
$hxClasses["nape.shape.Shape"] = nape_shape_Shape;
nape_shape_Shape.__name__ = ["nape","shape","Shape"];
nape_shape_Shape.__super__ = nape_phys_Interactor;
nape_shape_Shape.prototype = $extend(nape_phys_Interactor.prototype,{
	zpp_inner: null
	,isCircle: function() {
		return this.zpp_inner.isCircle();
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape_geom_Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.get_material();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.get_filter();
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation.lsq() > 0) {
			if(this.isCircle()) {
				this.zpp_inner.circle.__translate(translation.get_x(),translation.get_y());
			} else {
				this.zpp_inner.polygon.__translate(translation.get_x(),translation.get_y());
			}
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
		}
		return this;
	}
	,toString: function() {
		var ret = this.isCircle() ? "Circle" : "Polygon";
		return ret + "#" + this.get_id();
	}
	,__class__: nape_shape_Shape
	,__properties__: $extend(nape_phys_Interactor.prototype.__properties__,{set_filter:"set_filter",get_filter:"get_filter",set_material:"set_material",get_material:"get_material",get_worldCOM:"get_worldCOM"})
});
var nape_shape_Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.call(this);
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.set_radius(radius);
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		this.zpp_inner.localCOMx = localCOM.get_x();
		this.zpp_inner.localCOMy = localCOM.get_y();
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		this.zpp_inner.material.alloc();
	} else {
		this.set_material(material);
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		this.zpp_inner.filter.alloc();
	} else {
		this.set_filter(filter);
	}
	this.zpp_inner_i.insert_cbtype(nape_callbacks_CbType.get_ANY_SHAPE().zpp_inner);
};
$hxClasses["nape.shape.Circle"] = nape_shape_Circle;
nape_shape_Circle.__name__ = ["nape","shape","Circle"];
nape_shape_Circle.__super__ = nape_shape_Shape;
nape_shape_Circle.prototype = $extend(nape_shape_Shape.prototype,{
	zpp_inner_zn: null
	,get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(radius != this.get_radius()) {
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.get_radius();
	}
	,__class__: nape_shape_Circle
	,__properties__: $extend(nape_shape_Shape.prototype.__properties__,{set_radius:"set_radius",get_radius:"get_radius"})
});
var nape_shape_Edge = function() {
	this.zpp_inner = null;
};
$hxClasses["nape.shape.Edge"] = nape_shape_Edge;
nape_shape_Edge.__name__ = ["nape","shape","Edge"];
nape_shape_Edge.prototype = {
	zpp_inner: null
	,toString: function() {
		if(this.zpp_inner.polygon == null) {
			return "Edge(object-pooled)";
		} else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,__class__: nape_shape_Edge
};
var nape_shape_EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.EdgeIterator"] = nape_shape_EdgeIterator;
nape_shape_EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape_shape_EdgeIterator.get = function(list) {
	var ret;
	if(nape_shape_EdgeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$EdgeList.internal = true;
		var ret1 = new nape_shape_EdgeIterator();
		zpp_$nape_util_ZPP_$EdgeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_EdgeIterator.zpp_pool;
		nape_shape_EdgeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_EdgeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_EdgeIterator.zpp_pool;
			nape_shape_EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_EdgeIterator
};
var nape_shape_EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$EdgeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.EdgeList"] = nape_shape_EdgeList;
nape_shape_EdgeList.__name__ = ["nape","shape","EdgeList"];
nape_shape_EdgeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			if(index == this.get_length() - 1) {
				index = index;
			} else {
				index = this.get_length() - 2 - index;
			}
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().wrapper();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_EdgeIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_EdgeList
	,__properties__: {get_length:"get_length"}
};
var nape_shape_Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	nape_shape_Shape.call(this);
	this.zpp_inner_zn = new zpp_$nape_shape_ZPP_$Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			var x = vite;
			this.get_localVerts().push(x.copy());
		}
	} else if(Std["is"](localVerts,nape_geom_Vec2List)) {
		var lv1 = localVerts;
		var x1 = lv1.iterator();
		while(x1.hasNext()) {
			var x2 = x1.next();
			this.get_localVerts().push(x2.copy());
		}
	} else if(Std["is"](localVerts,nape_geom_GeomPoly)) {
		var lv2 = localVerts;
		var verts = lv2.zpp_inner.vertices;
		if(verts != null) {
			var vite1 = verts;
			while(true) {
				var x3 = nape_geom_Vec2.get(vite1.x,vite1.y);
				vite1 = vite1.next;
				this.get_localVerts().push(x3.copy());
				x3.dispose();
				if(vite1 == verts) {
					break;
				}
			}
		}
	}
	if((localVerts instanceof Array) && localVerts.__enum__ == null) {
		var lv3 = localVerts;
		var i = 0;
		while(i < lv3.length) {
			var cur = lv3[i];
			var tmp;
			if(cur.zpp_inner.weak) {
				cur.dispose();
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				lv3.splice(i,1);
				continue;
			}
			++i;
		}
	} else if(Std["is"](localVerts,nape_geom_Vec2List)) {
		var lv4 = localVerts;
		if(lv4.zpp_inner._validate != null) {
			lv4.zpp_inner._validate();
		}
		var ins = lv4.zpp_inner.inner;
		var pre = null;
		var cur1 = ins.begin();
		while(cur1 != null) {
			var x4 = cur1.elem();
			if(x4.outer.zpp_inner.weak) {
				cur1 = ins.erase(pre);
				if(x4.outer.zpp_inner.weak) {
					x4.outer.dispose();
				}
			} else {
				pre = cur1;
				cur1 = cur1.next;
			}
		}
	}
	if(material == null) {
		if(zpp_$nape_phys_ZPP_$Material.zpp_pool == null) {
			this.zpp_inner.material = new zpp_$nape_phys_ZPP_$Material();
		} else {
			this.zpp_inner.material = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		this.zpp_inner.material.alloc();
	} else {
		this.set_material(material);
	}
	if(filter == null) {
		if(zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool == null) {
			this.zpp_inner.filter = new zpp_$nape_dynamics_ZPP_$InteractionFilter();
		} else {
			this.zpp_inner.filter = zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool;
			zpp_$nape_dynamics_ZPP_$InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		this.zpp_inner.filter.alloc();
	} else {
		this.set_filter(filter);
	}
	this.zpp_inner_i.insert_cbtype(nape_callbacks_CbType.get_ANY_SHAPE().zpp_inner);
};
$hxClasses["nape.shape.Polygon"] = nape_shape_Polygon;
nape_shape_Polygon.__name__ = ["nape","shape","Polygon"];
nape_shape_Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) {
		weak = false;
	}
	return [nape_geom_Vec2.get(x,y,weak),nape_geom_Vec2.get(x + width,y,weak),nape_geom_Vec2.get(x + width,y + height,weak),nape_geom_Vec2.get(x,y + height,weak)];
};
nape_shape_Polygon.__super__ = nape_shape_Shape;
nape_shape_Polygon.prototype = $extend(nape_shape_Shape.prototype,{
	zpp_inner_zn: null
	,get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) {
			this.zpp_inner_zn.getlverts();
		}
		return this.zpp_inner_zn.wrap_lverts;
	}
	,validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,__class__: nape_shape_Polygon
	,__properties__: $extend(nape_shape_Shape.prototype.__properties__,{get_localVerts:"get_localVerts"})
});
var nape_shape_ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
};
$hxClasses["nape.shape.ShapeIterator"] = nape_shape_ShapeIterator;
nape_shape_ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape_shape_ShapeIterator.get = function(list) {
	var ret;
	if(nape_shape_ShapeIterator.zpp_pool == null) {
		zpp_$nape_util_ZPP_$ShapeList.internal = true;
		var ret1 = new nape_shape_ShapeIterator();
		zpp_$nape_util_ZPP_$ShapeList.internal = false;
		ret = ret1;
	} else {
		var r = nape_shape_ShapeIterator.zpp_pool;
		nape_shape_ShapeIterator.zpp_pool = r.zpp_next;
		ret = r;
	}
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
};
nape_shape_ShapeIterator.prototype = {
	zpp_inner: null
	,zpp_i: null
	,zpp_critical: null
	,zpp_next: null
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) {
			return true;
		} else {
			this.zpp_next = nape_shape_ShapeIterator.zpp_pool;
			nape_shape_ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,__class__: nape_shape_ShapeIterator
};
var nape_shape_ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_util_ZPP_$ShapeList();
	this.zpp_inner.outer = this;
};
$hxClasses["nape.shape.ShapeList"] = nape_shape_ShapeList;
nape_shape_ShapeList.__name__ = ["nape","shape","ShapeList"];
nape_shape_ShapeList.prototype = {
	zpp_inner: null
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else {
			while(this.zpp_inner.at_index != index) {
				this.zpp_inner.at_index++;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elem().outer;
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.zpp_inner.inner.add(obj.zpp_inner);
			} else {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,unshift: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) {
					var tmp = this.empty() ? null : this.zpp_inner.inner.iterator_at(this.get_length() - 1);
					this.zpp_inner.push_ite = tmp;
				}
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else {
				this.zpp_inner.inner.add(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,add: function(obj) {
		if(this.zpp_inner.reverse_flag) {
			return this.push(obj);
		} else {
			return this.unshift(obj);
		}
	}
	,remove: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) {
				this.zpp_inner.subber(obj);
			}
			if(!this.zpp_inner.dontremove) {
				this.zpp_inner.inner.remove(obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,empty: function() {
		return this.zpp_inner.inner.empty();
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape_shape_ShapeIterator.get(this);
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var i = this.iterator();
		while(i.hasNext()) {
			var i1 = i.next();
			if(!fst) {
				ret += ",";
			}
			ret += i1 == null ? "NULL" : i1.toString();
			fst = false;
		}
		return ret + "]";
	}
	,__class__: nape_shape_ShapeList
	,__properties__: {get_length:"get_length"}
};
var nape_shape_ShapeType = function() {
};
$hxClasses["nape.shape.ShapeType"] = nape_shape_ShapeType;
nape_shape_ShapeType.__name__ = ["nape","shape","ShapeType"];
nape_shape_ShapeType.__properties__ = {get_POLYGON:"get_POLYGON",get_CIRCLE:"get_CIRCLE"};
nape_shape_ShapeType.get_CIRCLE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_CIRCLE;
};
nape_shape_ShapeType.get_POLYGON = function() {
	if(zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON = new nape_shape_ShapeType();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ShapeType_POLYGON;
};
nape_shape_ShapeType.prototype = {
	toString: function() {
		if(this == nape_shape_ShapeType.get_CIRCLE()) {
			return "CIRCLE";
		} else if(this == nape_shape_ShapeType.get_POLYGON()) {
			return "POLYGON";
		} else {
			return "";
		}
	}
	,__class__: nape_shape_ShapeType
};
var nape_shape_ValidationResult = function() {
};
$hxClasses["nape.shape.ValidationResult"] = nape_shape_ValidationResult;
nape_shape_ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape_shape_ValidationResult.__properties__ = {get_SELF_INTERSECTING:"get_SELF_INTERSECTING",get_CONCAVE:"get_CONCAVE",get_DEGENERATE:"get_DEGENERATE",get_VALID:"get_VALID"};
nape_shape_ValidationResult.get_VALID = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_VALID;
};
nape_shape_ValidationResult.get_DEGENERATE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_DEGENERATE;
};
nape_shape_ValidationResult.get_CONCAVE = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_CONCAVE;
};
nape_shape_ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING = new nape_shape_ValidationResult();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.ValidationResult_SELF_INTERSECTING;
};
nape_shape_ValidationResult.prototype = {
	toString: function() {
		if(this == nape_shape_ValidationResult.get_VALID()) {
			return "VALID";
		} else if(this == nape_shape_ValidationResult.get_DEGENERATE()) {
			return "DEGENERATE";
		} else if(this == nape_shape_ValidationResult.get_CONCAVE()) {
			return "CONCAVE";
		} else if(this == nape_shape_ValidationResult.get_SELF_INTERSECTING()) {
			return "SELF_INTERSECTING";
		} else {
			return "";
		}
	}
	,__class__: nape_shape_ValidationResult
};
var nape_space_Broadphase = function() {
};
$hxClasses["nape.space.Broadphase"] = nape_space_Broadphase;
nape_space_Broadphase.__name__ = ["nape","space","Broadphase"];
nape_space_Broadphase.__properties__ = {get_SWEEP_AND_PRUNE:"get_SWEEP_AND_PRUNE",get_DYNAMIC_AABB_TREE:"get_DYNAMIC_AABB_TREE"};
nape_space_Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_DYNAMIC_AABB_TREE;
};
nape_space_Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_$nape_util_ZPP_$Flags.internal = true;
		zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE = new nape_space_Broadphase();
		zpp_$nape_util_ZPP_$Flags.internal = false;
	}
	return zpp_$nape_util_ZPP_$Flags.Broadphase_SWEEP_AND_PRUNE;
};
nape_space_Broadphase.prototype = {
	toString: function() {
		if(this == nape_space_Broadphase.get_DYNAMIC_AABB_TREE()) {
			return "DYNAMIC_AABB_TREE";
		} else if(this == nape_space_Broadphase.get_SWEEP_AND_PRUNE()) {
			return "SWEEP_AND_PRUNE";
		} else {
			return "";
		}
	}
	,__class__: nape_space_Broadphase
};
var nape_space_Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_$nape_space_ZPP_$Space(gravity == null ? null : gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
		}
	}
};
$hxClasses["nape.space.Space"] = nape_space_Space;
nape_space_Space.__name__ = ["nape","space","Space"];
nape_space_Space.prototype = {
	zpp_inner: null
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,clear: function() {
		this.zpp_inner.clear();
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) {
			positionIterations = 10;
		}
		if(velocityIterations == null) {
			velocityIterations = 10;
		}
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,__class__: nape_space_Space
	,__properties__: {get_listeners:"get_listeners",get_world:"get_world",get_constraints:"get_constraints",get_bodies:"get_bodies"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.__properties__ = {get_current:"get_current"};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,window) {
	if(window == null) {
		window = "_blank";
	}
	var uri = request.url;
	if(Type["typeof"](request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			query += StringTools.urlEncode(field) + "=" + StringTools.urlEncode(Std.string(Reflect.field(request.data,field)));
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,window);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 282, className : "openfl.Lib", methodName : "trace"});
};
openfl_Lib.get_current = function() {
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = ["openfl","_Vector","IVector"];
openfl__$Vector_IVector.prototype = {
	get_length: null
	,get: null
	,__class__: openfl__$Vector_IVector
	,__properties__: {get_length:"get_length"}
};
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = ["openfl","_Vector","BoolVector"];
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return false;
		} else {
			return this.__array[index];
		}
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = ["openfl","_Vector","FloatVector"];
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	fixed: null
	,__array: null
	,concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(null,null,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(null,null,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(null,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = ["openfl","_Vector","FunctionVector"];
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		if(index >= this.__array.length) {
			return null;
		} else {
			return this.__array[index];
		}
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = ["openfl","_Vector","IntVector"];
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g1 = 0;
			var _g = array.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length != null && length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed == true;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = ["openfl","_Vector","ObjectVector"];
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	fixed: null
	,__array: null
	,get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g1 = from;
		var _g = this.__array.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(null,null,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g1 = currentLength;
				var _g = value;
				while(_g1 < _g) {
					var i = _g1++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$internal_Lib = function() { };
$hxClasses["openfl._internal.Lib"] = openfl__$internal_Lib;
openfl__$internal_Lib.__name__ = ["openfl","_internal","Lib"];
var openfl__$internal_formats_agal_AGALConverter = function() { };
$hxClasses["openfl._internal.formats.agal.AGALConverter"] = openfl__$internal_formats_agal_AGALConverter;
openfl__$internal_formats_agal_AGALConverter.__name__ = ["openfl","_internal","formats","agal","AGALConverter"];
openfl__$internal_formats_agal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl__$internal_formats_agal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl__$internal_formats_agal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.set_endian(1);
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX : openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl__$internal_formats_agal_RegisterMap();
	var sb = new StringBuf();
	while(agal.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(agal)) {
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var source2 = openfl__$internal_formats_agal_AGALConverter.readUInt64(agal);
		var dr = openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb.add("\t");
		switch(opcode) {
		case 0:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb.add(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb.add(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb.add(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb.add(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb.add(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb.add(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb.add(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb.add(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb.add(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb.add(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb.add(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb.add(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb.add(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb.add(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb.add(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb.add(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb.add(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb.add(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb.add("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse(source2,programType);
			var _g = sampler.d;
			switch(_g) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb.add("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb.add("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb.add("\t} else {\n");
					sb.add("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb.add("\t}");
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb.add(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb.add("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb.add("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb.add("\t} else {\n");
					sb.add("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb.add("\t}");
				} else {
					sr1.sourceMask = 7;
					sb.add(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb.add(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb.add("\n");
	}
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile == null) {
		var version1 = lime_graphics_opengl_GL.getParameter(7938);
		openfl__$internal_formats_agal_AGALConverter.limitedProfile = version1.indexOf("OpenGL ES") > -1 || version1.indexOf("WebGL") > -1;
	}
	var glsl = new StringBuf();
	glsl.add("// AGAL " + (programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl__$internal_formats_agal_AGALConverter.limitedProfile) {
		glsl.add("#version 100\n");
		glsl.add("precision highp float;\n");
	} else {
		glsl.add("#version 120\n");
	}
	glsl.add(map.toGLSL(false));
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl.add("uniform vec4 vcPositionScale;\n");
	}
	glsl.add("void main() {\n");
	glsl.add(map.toGLSL(true));
	glsl.add(sb.toString());
	if(programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
		glsl.add("\tgl_Position *= vcPositionScale;\n");
	}
	glsl.add("}\n");
	return glsl.toString();
};
var openfl__$internal_formats_agal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.DestRegister"] = openfl__$internal_formats_agal__$AGALConverter_DestRegister;
openfl__$internal_formats_agal__$AGALConverter_DestRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","DestRegister"];
openfl__$internal_formats_agal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl__$internal_formats_agal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl__$internal_formats_agal__$AGALConverter_DestRegister.prototype = {
	mask: null
	,n: null
	,programType: null
	,type: null
	,getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				str = "gl_Position";
			} else {
				str = "gl_FragColor";
			}
		} else {
			str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_DestRegister
};
var openfl__$internal_formats_agal__$AGALConverter_ProgramType = $hxClasses["openfl._internal.formats.agal._AGALConverter.ProgramType"] = { __ename__ : ["openfl","_internal","formats","agal","_AGALConverter","ProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX = ["VERTEX",0];
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX.__enum__ = openfl__$internal_formats_agal__$AGALConverter_ProgramType;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT = ["FRAGMENT",1];
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_ProgramType.FRAGMENT.__enum__ = openfl__$internal_formats_agal__$AGALConverter_ProgramType;
var openfl__$internal_formats_agal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl._internal.formats.agal.RegisterMap"] = openfl__$internal_formats_agal_RegisterMap;
openfl__$internal_formats_agal_RegisterMap.__name__ = ["openfl","_internal","formats","agal","RegisterMap"];
openfl__$internal_formats_agal_RegisterMap.prototype = {
	mEntries: null
	,add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry1 = new openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry();
		entry1.type = type;
		entry1.name = name;
		entry1.number = number;
		entry1.usage = usage;
		this.mEntries.push(entry1);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl__$internal_formats_agal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a1,b1) {
			return js_Boot.__cast(a1.type , Int) - js_Boot.__cast(b1.type , Int);
		});
		var sb = new StringBuf();
		var _g1 = 0;
		var _g = this.mEntries.length;
		while(_g1 < _g) {
			var i = _g1++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			var _g2 = entry.type;
			switch(_g2) {
			case 0:
				sb.add("attribute ");
				break;
			case 1:
				sb.add("uniform ");
				break;
			case 2:
				sb.add("\t");
				break;
			case 3:
				break;
			case 4:
				sb.add("varying ");
				break;
			case 5:
				sb.add("uniform ");
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g3 = entry.usage;
			switch(Type.enumIndex(_g3)) {
			case 0:
				haxe_Log.trace("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "AGALConverter.hx", lineNumber : 826, className : "openfl._internal.formats.agal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb.add("vec4 ");
				break;
			case 2:
				sb.add("mat4 ");
				break;
			case 3:
				sb.add("sampler2D ");
				break;
			case 4:
				break;
			case 5:
				sb.add("samplerCube ");
				break;
			case 6:
				break;
			case 7:
				sb.add("vec4 ");
				break;
			}
			if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb.add("sampler2D ");
				sb.add(entry.name);
				sb.add(";\n");
				sb.add("uniform ");
				sb.add("sampler2D ");
				sb.add(entry.name + "_alpha");
				sb.add(";\n");
				sb.add("uniform ");
				sb.add("bool ");
				sb.add(entry.name + "_alphaEnabled");
				sb.add(";\n");
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb.add("samplerCube ");
				sb.add(entry.name);
				sb.add(";\n");
				sb.add("uniform ");
				sb.add("samplerCube ");
				sb.add(entry.name + "_alpha");
				sb.add(";\n");
				sb.add("uniform ");
				sb.add("bool ");
				sb.add(entry.name + "_alphaEnabled");
				sb.add(";\n");
			} else if(entry.usage == openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb.add(entry.name + "[128]");
				sb.add(";\n");
			} else {
				sb.add(entry.name);
				sb.add(";\n");
			}
		}
		return sb.toString();
	}
	,__class__: openfl__$internal_formats_agal_RegisterMap
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterMapEntry"] = openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry;
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","RegisterMapEntry"];
openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry.prototype = {
	name: null
	,number: null
	,type: null
	,usage: null
	,__class__: openfl__$internal_formats_agal__$AGALConverter_RegisterMapEntry
};
var openfl__$internal_formats_agal__$AGALConverter_RegisterUsage = $hxClasses["openfl._internal.formats.agal._AGALConverter.RegisterUsage"] = { __ename__ : ["openfl","_internal","formats","agal","_AGALConverter","RegisterUsage"], __constructs__ : ["UNUSED","VECTOR_4","MATRIX_4_4","SAMPLER_2D","SAMPLER_2D_ALPHA","SAMPLER_CUBE","SAMPLER_CUBE_ALPHA","VECTOR_4_ARRAY"] };
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED = ["UNUSED",0];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.UNUSED.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4 = ["VECTOR_4",1];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4 = ["MATRIX_4_4",2];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.MATRIX_4_4.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D = ["SAMPLER_2D",3];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA = ["SAMPLER_2D_ALPHA",4];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE = ["SAMPLER_CUBE",5];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA = ["SAMPLER_CUBE_ALPHA",6];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY = ["VECTOR_4_ARRAY",7];
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.toString = $estr;
openfl__$internal_formats_agal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY.__enum__ = openfl__$internal_formats_agal__$AGALConverter_RegisterUsage;
var openfl__$internal_formats_agal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SamplerRegister"] = openfl__$internal_formats_agal__$AGALConverter_SamplerRegister;
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","SamplerRegister"];
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,15);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.f = this5.low;
	var b2 = 56;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,15);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.m = this10.low;
	var b4 = 52;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.w = this15.low;
	var b6 = 48;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.s = this20.low;
	var b8 = 44;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,15);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.d = this25.low;
	var b10 = 40;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,15);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.t = this30.low;
	var b12 = 32;
	b12 &= 63;
	var a6;
	if(b12 == 0) {
		var this31 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a6 = this31;
	} else if(b12 < 32) {
		var this32 = new haxe__$Int64__$_$_$Int64(v.high >> b12,v.high << 32 - b12 | v.low >>> b12);
		a6 = this32;
	} else {
		var this33 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b12 - 32);
		a6 = this33;
	}
	var this34 = new haxe__$Int64__$_$_$Int64(0,15);
	var b13 = this34;
	var this35 = new haxe__$Int64__$_$_$Int64(a6.high & b13.high,a6.low & b13.low);
	sr.type = this35.low;
	var b14 = 16;
	b14 &= 63;
	var a7;
	if(b14 == 0) {
		var this36 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a7 = this36;
	} else if(b14 < 32) {
		var this37 = new haxe__$Int64__$_$_$Int64(v.high >> b14,v.high << 32 - b14 | v.low >>> b14);
		a7 = this37;
	} else {
		var this38 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b14 - 32);
		a7 = this38;
	}
	var this39 = new haxe__$Int64__$_$_$Int64(0,255);
	var b15 = this39;
	var this40 = new haxe__$Int64__$_$_$Int64(a7.high & b15.high,a7.low & b15.low);
	sr.b = this40.low;
	var this41 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b16 = this41;
	var this42 = new haxe__$Int64__$_$_$Int64(v.high & b16.high,v.low & b16.low);
	sr.n = this42.low;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SamplerRegister.prototype = {
	b: null
	,d: null
	,f: null
	,m: null
	,n: null
	,programType: null
	,s: null
	,t: null
	,type: null
	,w: null
	,toGLSL: function() {
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		var _g = this.f;
		switch(_g) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g1 = this.m;
		switch(_g1) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var _g2 = this.w;
		switch(_g2) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl__$internal_renderer_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SamplerRegister
};
var openfl__$internal_formats_agal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl._internal.formats.agal._AGALConverter.SourceRegister"] = openfl__$internal_formats_agal__$AGALConverter_SourceRegister;
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.__name__ = ["openfl","_internal","formats","agal","_AGALConverter","SourceRegister"];
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl__$internal_formats_agal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this2 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this2;
	} else {
		var this3 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this3;
	}
	var this4 = new haxe__$Int64__$_$_$Int64(0,1);
	var b1 = this4;
	var this5 = new haxe__$Int64__$_$_$Int64(a.high & b1.high,a.low & b1.low);
	sr.d = this5.low;
	var b2 = 48;
	b2 &= 63;
	var a1;
	if(b2 == 0) {
		var this6 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a1 = this6;
	} else if(b2 < 32) {
		var this7 = new haxe__$Int64__$_$_$Int64(v.high >> b2,v.high << 32 - b2 | v.low >>> b2);
		a1 = this7;
	} else {
		var this8 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b2 - 32);
		a1 = this8;
	}
	var this9 = new haxe__$Int64__$_$_$Int64(0,3);
	var b3 = this9;
	var this10 = new haxe__$Int64__$_$_$Int64(a1.high & b3.high,a1.low & b3.low);
	sr.q = this10.low;
	var b4 = 40;
	b4 &= 63;
	var a2;
	if(b4 == 0) {
		var this11 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a2 = this11;
	} else if(b4 < 32) {
		var this12 = new haxe__$Int64__$_$_$Int64(v.high >> b4,v.high << 32 - b4 | v.low >>> b4);
		a2 = this12;
	} else {
		var this13 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b4 - 32);
		a2 = this13;
	}
	var this14 = new haxe__$Int64__$_$_$Int64(0,15);
	var b5 = this14;
	var this15 = new haxe__$Int64__$_$_$Int64(a2.high & b5.high,a2.low & b5.low);
	sr.itype = this15.low;
	var b6 = 32;
	b6 &= 63;
	var a3;
	if(b6 == 0) {
		var this16 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a3 = this16;
	} else if(b6 < 32) {
		var this17 = new haxe__$Int64__$_$_$Int64(v.high >> b6,v.high << 32 - b6 | v.low >>> b6);
		a3 = this17;
	} else {
		var this18 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b6 - 32);
		a3 = this18;
	}
	var this19 = new haxe__$Int64__$_$_$Int64(0,15);
	var b7 = this19;
	var this20 = new haxe__$Int64__$_$_$Int64(a3.high & b7.high,a3.low & b7.low);
	sr.type = this20.low;
	var b8 = 24;
	b8 &= 63;
	var a4;
	if(b8 == 0) {
		var this21 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a4 = this21;
	} else if(b8 < 32) {
		var this22 = new haxe__$Int64__$_$_$Int64(v.high >> b8,v.high << 32 - b8 | v.low >>> b8);
		a4 = this22;
	} else {
		var this23 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b8 - 32);
		a4 = this23;
	}
	var this24 = new haxe__$Int64__$_$_$Int64(0,255);
	var b9 = this24;
	var this25 = new haxe__$Int64__$_$_$Int64(a4.high & b9.high,a4.low & b9.low);
	sr.s = this25.low;
	var b10 = 16;
	b10 &= 63;
	var a5;
	if(b10 == 0) {
		var this26 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a5 = this26;
	} else if(b10 < 32) {
		var this27 = new haxe__$Int64__$_$_$Int64(v.high >> b10,v.high << 32 - b10 | v.low >>> b10);
		a5 = this27;
	} else {
		var this28 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b10 - 32);
		a5 = this28;
	}
	var this29 = new haxe__$Int64__$_$_$Int64(0,255);
	var b11 = this29;
	var this30 = new haxe__$Int64__$_$_$Int64(a5.high & b11.high,a5.low & b11.low);
	sr.o = this30.low;
	var this31 = new haxe__$Int64__$_$_$Int64(0,65535);
	var b12 = this31;
	var this32 = new haxe__$Int64__$_$_$Int64(v.high & b12.high,v.low & b12.low);
	sr.n = this32.low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl__$internal_formats_agal__$AGALConverter_SourceRegister.prototype = {
	d: null
	,itype: null
	,n: null
	,o: null
	,programType: null
	,q: null
	,s: null
	,sourceMask: null
	,type: null
	,toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl__$internal_formats_agal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			var _g = 0;
			while(_g < 4) {
				var i = _g++;
				if((this.sourceMask & 1 << i) != 0) {
					var _g1 = this.s >> i * 2 & 3;
					switch(_g1) {
					case 0:
						swizzle += "x";
						break;
					case 1:
						swizzle += "y";
						break;
					case 2:
						swizzle += "z";
						break;
					case 3:
						swizzle += "w";
						break;
					}
				}
			}
		}
		var str = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = String.fromCharCode(HxOverrides.cca("x",0) + this.q);
			var indexRegister = openfl__$internal_formats_agal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl__$internal_formats_agal__$AGALConverter_SourceRegister
};
var openfl__$internal_formats_html_HTMLParser = function() { };
$hxClasses["openfl._internal.formats.html.HTMLParser"] = openfl__$internal_formats_html_HTMLParser;
openfl__$internal_formats_html_HTMLParser.__name__ = ["openfl","_internal","formats","html","HTMLParser"];
openfl__$internal_formats_html_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = openfl__$internal_formats_html_HTMLParser.__regexBreakTag.replace(value,"\n");
	value = openfl__$internal_formats_html_HTMLParser.__regexEntities[0].replace(value,"\"");
	value = openfl__$internal_formats_html_HTMLParser.__regexEntities[1].replace(value,"'");
	value = openfl__$internal_formats_html_HTMLParser.__regexEntities[2].replace(value,"&");
	value = openfl__$internal_formats_html_HTMLParser.__regexEntities[5].replace(value," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = openfl__$internal_formats_html_HTMLParser.__regexHTMLTag.replace(value,"");
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		value = openfl__$internal_formats_html_HTMLParser.__regexEntities[3].replace(value,"<");
		value = openfl__$internal_formats_html_HTMLParser.__regexEntities[4].replace(value,">");
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var _g1 = 0;
		var _g = segments.length;
		while(_g1 < _g) {
			var i = _g1++;
			segment = segments[i];
			segment = openfl__$internal_formats_html_HTMLParser.__regexEntities[3].replace(segment,"<");
			segment = openfl__$internal_formats_html_HTMLParser.__regexEntities[4].replace(segment,">");
			segments[i] = segment;
		}
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g2 = 0;
		while(_g2 < segments.length) {
			var segment1 = segments[_g2];
			++_g2;
			if(segment1 == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment1,0,1) == "/";
			var tagEndIndex = segment1.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment1.indexOf(" ");
			var tagName = segment1.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					haxe_Log.trace("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "HTMLParser.hx", lineNumber : 101, className : "openfl._internal.formats.html.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment1.length) {
					sub = HxOverrides.substr(segment1,start,null);
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					var _g11 = tagName.toLowerCase();
					switch(_g11) {
					case "a":
						if(openfl__$internal_formats_html_HTMLParser.__regexHref.match(segment1)) {
							format.url = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl__$internal_formats_html_HTMLParser.__regexFace.match(segment1)) {
							format.font = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexFace);
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexColor.match(segment1)) {
							format.color = Std.parseInt("0x" + openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexColor));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexSize.match(segment1)) {
							var sizeAttr = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexAlign.match(segment1)) {
							var align = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString(align);
						}
						break;
					case "textformat":
						if(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent.match(segment1)) {
							format.blockIndent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexBlockIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexIndent.match(segment1)) {
							format.indent = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexIndent));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeading.match(segment1)) {
							format.leading = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeading));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin.match(segment1)) {
							format.leftMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexLeftMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexRightMargin.match(segment1)) {
							format.rightMargin = Std.parseInt(openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexRightMargin));
						}
						if(openfl__$internal_formats_html_HTMLParser.__regexTabStops.match(segment1)) {
							var values = openfl__$internal_formats_html_HTMLParser.__getAttributeMatch(openfl__$internal_formats_html_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g12 = 0;
							while(_g12 < values.length) {
								var stop = values[_g12];
								++_g12;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment1.length) {
						sub = segment1.substring(start);
						textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + segment1.length));
					value += segment1;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl__$internal_text_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl__$internal_formats_html_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_formats_swf_FilterType = $hxClasses["openfl._internal.formats.swf.FilterType"] = { __ename__ : ["openfl","_internal","formats","swf","FilterType"], __constructs__ : ["BlurFilter","ColorMatrixFilter","DropShadowFilter","GlowFilter"] };
openfl__$internal_formats_swf_FilterType.BlurFilter = function(blurX,blurY,quality) { var $x = ["BlurFilter",0,blurX,blurY,quality]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.ColorMatrixFilter = function(matrix) { var $x = ["ColorMatrixFilter",1,matrix]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) { var $x = ["DropShadowFilter",2,distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_FilterType.GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) { var $x = ["GlowFilter",3,color,alpha,blurX,blurY,strength,quality,inner,knockout]; $x.__enum__ = openfl__$internal_formats_swf_FilterType; $x.toString = $estr; return $x; };
var openfl__$internal_formats_swf_SWFLite = function() {
	this.symbols = new haxe_ds_IntMap();
};
$hxClasses["openfl._internal.formats.swf.SWFLite"] = openfl__$internal_formats_swf_SWFLite;
openfl__$internal_formats_swf_SWFLite.__name__ = ["openfl","_internal","formats","swf","SWFLite"];
openfl__$internal_formats_swf_SWFLite.resolveClass = function(name) {
	var value = Type.resolveClass(name);
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveClass(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.resolveEnum = function(name) {
	var value = Type.resolveEnum(name);
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._legacy","openfl"));
	}
	if(value == null) {
		value = Type.resolveEnum(StringTools.replace(name,"openfl._v2","openfl"));
	}
	return value;
};
openfl__$internal_formats_swf_SWFLite.unserialize = function(data) {
	if(data == null) {
		return null;
	}
	var unserializer = new haxe_Unserializer(data);
	unserializer.setResolver({ resolveClass : openfl__$internal_formats_swf_SWFLite.resolveClass, resolveEnum : openfl__$internal_formats_swf_SWFLite.resolveEnum});
	return unserializer.unserialize();
};
openfl__$internal_formats_swf_SWFLite.prototype = {
	frameRate: null
	,library: null
	,root: null
	,symbols: null
	,createButton: function(className) {
		return null;
	}
	,createMovieClip: function(className) {
		if(className == null) {
			className = "";
		}
		if(className == "") {
			return this.root.__createObject(this);
		} else {
			var symbol = this.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(symbol1.className == className) {
					if(Std["is"](symbol1,openfl__$internal_symbols_SpriteSymbol)) {
						return (js_Boot.__cast(symbol1 , openfl__$internal_symbols_SpriteSymbol)).__createObject(this);
					}
				}
			}
		}
		return null;
	}
	,getBitmapData: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				if(Std["is"](symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					var bitmap = symbol1;
					return openfl_utils_Assets.getBitmapData(bitmap.path);
				}
			}
		}
		return null;
	}
	,hasSymbol: function(className) {
		var symbol = this.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(symbol1.className == className) {
				return true;
			}
		}
		return false;
	}
	,serialize: function() {
		var serializer = new haxe_Serializer();
		serializer.serialize(this);
		return serializer.toString();
	}
	,__class__: openfl__$internal_formats_swf_SWFLite
};
var openfl_utils_AssetLibrary = function() {
	lime_utils_AssetLibrary.call(this);
};
$hxClasses["openfl.utils.AssetLibrary"] = openfl_utils_AssetLibrary;
openfl_utils_AssetLibrary.__name__ = ["openfl","utils","AssetLibrary"];
openfl_utils_AssetLibrary.fromBytes = function(bytes,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath));
};
openfl_utils_AssetLibrary.fromFile = function(path,rootPath) {
	return openfl_utils_AssetLibrary.fromManifest(lime_utils_AssetManifest.fromFile(path,rootPath));
};
openfl_utils_AssetLibrary.fromManifest = function(manifest) {
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		if(Std["is"](library,openfl_utils_AssetLibrary)) {
			return library;
		} else {
			var _library = new openfl_utils_AssetLibrary();
			_library.__proxy = library;
			return _library;
		}
	} else {
		return null;
	}
};
openfl_utils_AssetLibrary.loadFromBytes = function(bytes,rootPath) {
	return lime_utils_AssetManifest.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromFile = function(path,rootPath) {
	return lime_utils_AssetManifest.loadFromFile(path,rootPath).then(function(manifest) {
		return openfl_utils_AssetLibrary.loadFromManifest(manifest);
	});
};
openfl_utils_AssetLibrary.loadFromManifest = function(manifest) {
	var library = openfl_utils_AssetLibrary.fromManifest(manifest);
	if(library != null) {
		return library.load().then(function(library1) {
			return lime_app_Future.withValue(library1);
		});
	} else {
		return lime_app_Future.withError("Could not load asset manifest");
	}
};
openfl_utils_AssetLibrary.__super__ = lime_utils_AssetLibrary;
openfl_utils_AssetLibrary.prototype = $extend(lime_utils_AssetLibrary.prototype,{
	__proxy: null
	,exists: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.exists(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.exists.call(this,id,type);
		}
	}
	,getAsset: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.getAsset(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.getAsset.call(this,id,type);
		}
	}
	,getAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getAudioBuffer.call(this,id);
		}
	}
	,getBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getBytes.call(this,id);
		}
	}
	,getFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getFont.call(this,id);
		}
	}
	,getImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getImage.call(this,id);
		}
	}
	,getText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.getText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.getText.call(this,id);
		}
	}
	,isLocal: function(id,type) {
		if(this.__proxy != null) {
			return this.__proxy.isLocal(id,type);
		} else {
			return lime_utils_AssetLibrary.prototype.isLocal.call(this,id,type);
		}
	}
	,load: function() {
		if(this.__proxy != null) {
			return this.__proxy.load();
		} else {
			return lime_utils_AssetLibrary.prototype.load.call(this);
		}
	}
	,loadAudioBuffer: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadAudioBuffer(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadAudioBuffer.call(this,id);
		}
	}
	,loadBytes: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadBytes(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadBytes.call(this,id);
		}
	}
	,loadFont: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadFont(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadFont.call(this,id);
		}
	}
	,loadImage: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadImage(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadImage.call(this,id);
		}
	}
	,loadText: function(id) {
		if(this.__proxy != null) {
			return this.__proxy.loadText(id);
		} else {
			return lime_utils_AssetLibrary.prototype.loadText.call(this,id);
		}
	}
	,unload: function() {
		if(this.__proxy != null) {
			this.__proxy.unload();
			return;
		} else {
			lime_utils_AssetLibrary.prototype.unload.call(this);
			return;
		}
	}
	,__class__: openfl_utils_AssetLibrary
});
var openfl__$internal_formats_swf_SWFLiteLibrary = function(id,uuid) {
	openfl_utils_AssetLibrary.call(this);
	this.id = id;
	this.instanceID = uuid != null ? uuid : id;
	this.alphaCheck = new haxe_ds_StringMap();
	this.imageClassNames = new haxe_ds_StringMap();
	this.rootPath = "";
};
$hxClasses["openfl._internal.formats.swf.SWFLiteLibrary"] = openfl__$internal_formats_swf_SWFLiteLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.__name__ = ["openfl","_internal","formats","swf","SWFLiteLibrary"];
openfl__$internal_formats_swf_SWFLiteLibrary.__super__ = openfl_utils_AssetLibrary;
openfl__$internal_formats_swf_SWFLiteLibrary.prototype = $extend(openfl_utils_AssetLibrary.prototype,{
	alphaCheck: null
	,id: null
	,imageClassNames: null
	,instanceID: null
	,preloading: null
	,rootPath: null
	,swf: null
	,exists: function(id,type) {
		if(this.swf == null) {
			return false;
		}
		if(id == "" && type == "MOVIE_CLIP") {
			return true;
		}
		if(type == "IMAGE" || type == "MOVIE_CLIP") {
			if(this.swf != null) {
				return this.swf.hasSymbol(id);
			} else {
				return false;
			}
		}
		return false;
	}
	,getImage: function(id) {
		if(this.imageClassNames.exists(id)) {
			id = this.imageClassNames.get(id);
		}
		if(!this.alphaCheck.exists(id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std["is"](symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = symbol1;
					if(bitmapSymbol.alpha != null) {
						var image = openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
						var alpha = openfl_utils_AssetLibrary.prototype.getImage.call(this,bitmapSymbol.alpha);
						this.__copyChannel(image,alpha);
						this.cachedImages.set(id,image);
						this.cachedImages.remove(bitmapSymbol.alpha);
						this.alphaCheck.set(id,true);
						return image;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.getImage.call(this,id);
	}
	,getMovieClip: function(id) {
		if(this.swf != null) {
			return this.swf.createMovieClip(id);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,load: function() {
		var _gthis = this;
		if(this.id != null) {
			this.preload.set(this.id,true);
		}
		var promise = new lime_app_Promise();
		this.preloading = true;
		var onComplete = function(data) {
			_gthis.cachedText.set(_gthis.id,data);
			_gthis.swf = openfl__$internal_formats_swf_SWFLite.unserialize(data);
			_gthis.swf.library = _gthis;
			var bitmapSymbol;
			var symbol = _gthis.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std["is"](symbol1,openfl__$internal_symbols_BitmapSymbol)) {
					bitmapSymbol = symbol1;
					if(bitmapSymbol.className != null) {
						_gthis.imageClassNames.set(bitmapSymbol.className,bitmapSymbol.path);
					}
				}
			}
			openfl__$internal_formats_swf_SWFLite.instances.set(_gthis.instanceID,_gthis.swf);
			_gthis.__load().onProgress($bind(promise,promise.progress)).onError($bind(promise,promise.error)).onComplete(function(_) {
				_gthis.preloading = false;
				promise.complete(_gthis);
			});
		};
		if(openfl_utils_Assets.exists(this.id)) {
			var id = this.paths.keys();
			while(id.hasNext()) {
				var id1 = id.next();
				this.preload.set(id1,true);
			}
			this.loadText(this.id).onError($bind(promise,promise.error)).onComplete(onComplete);
		} else {
			var id2 = this.paths.keys();
			while(id2.hasNext()) {
				var id3 = id2.next();
				this.preload.set(id3,true);
			}
			var path = null;
			if(this.paths.exists(this.id)) {
				path = this.paths.get(this.id);
			} else if(this.rootPath != null && this.rootPath != "") {
				path = this.rootPath + "/" + this.id;
			} else {
				path = this.id;
			}
			var loader = new openfl_net_URLLoader();
			loader.addEventListener("complete",function(_1) {
				onComplete(loader.data);
			});
			loader.addEventListener("ioError",function(e) {
				promise.error(e);
			});
			loader.load(new openfl_net_URLRequest(path));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(this.imageClassNames.exists(id)) {
			id = this.imageClassNames.get(id);
		}
		if(!this.preloading && !this.alphaCheck.exists(id)) {
			var symbol = this.swf.symbols.iterator();
			while(symbol.hasNext()) {
				var symbol1 = symbol.next();
				if(Std["is"](symbol1,openfl__$internal_symbols_BitmapSymbol) && (js_Boot.__cast(symbol1 , openfl__$internal_symbols_BitmapSymbol)).path == id) {
					var bitmapSymbol = [symbol1];
					if(bitmapSymbol[0].alpha != null) {
						var promise = [new lime_app_Promise()];
						this.__loadImage(id).onError(($_=promise[0],$bind($_,$_.error))).onComplete((function(promise1,bitmapSymbol1) {
							return function(image) {
								_gthis.__loadImage(bitmapSymbol1[0].alpha).onError(($_=promise1[0],$bind($_,$_.error))).onComplete((function(promise2,bitmapSymbol2) {
									return function(alpha) {
										_gthis.__copyChannel(image,alpha);
										_gthis.cachedImages.set(id,image);
										_gthis.cachedImages.remove(bitmapSymbol2[0].alpha);
										_gthis.alphaCheck.set(id,true);
										promise2[0].complete(image);
									};
								})(promise1,bitmapSymbol1));
							};
						})(promise,bitmapSymbol));
						return promise[0].future;
					}
				}
			}
		}
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,unload: function() {
		if(this.swf == null) {
			return;
		}
		if(openfl__$internal_formats_swf_SWFLite.instances.exists(this.instanceID) && openfl__$internal_formats_swf_SWFLite.instances.get(this.instanceID) == this.swf) {
			openfl__$internal_formats_swf_SWFLite.instances.remove(this.instanceID);
		}
		var bitmap;
		var symbol = this.swf.symbols.iterator();
		while(symbol.hasNext()) {
			var symbol1 = symbol.next();
			if(Std["is"](symbol1,openfl__$internal_symbols_BitmapSymbol)) {
				bitmap = symbol1;
				openfl_utils_Assets.cache.removeBitmapData(bitmap.path);
			}
		}
	}
	,__copyChannel: function(image,alpha) {
		if(alpha != null) {
			image.copyChannel(alpha,alpha.get_rect(),new lime_math_Vector2(),lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.ALPHA);
		}
		image.buffer.premultiplied = true;
		image.set_premultiplied(false);
	}
	,__fromManifest: function(manifest) {
		this.rootPath = manifest.rootPath;
		openfl_utils_AssetLibrary.prototype.__fromManifest.call(this,manifest);
		this.bytesTotal = 0;
		var id = this.paths.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			this.bytesTotal += this.sizes.get(id1);
		}
	}
	,__load: function() {
		return openfl_utils_AssetLibrary.prototype.load.call(this);
	}
	,__loadImage: function(id) {
		return openfl_utils_AssetLibrary.prototype.loadImage.call(this,id);
	}
	,__class__: openfl__$internal_formats_swf_SWFLiteLibrary
});
var openfl__$internal_formats_swf_ShapeCommand = $hxClasses["openfl._internal.formats.swf.ShapeCommand"] = { __ename__ : ["openfl","_internal","formats","swf","ShapeCommand"], __constructs__ : ["BeginBitmapFill","BeginFill","BeginGradientFill","CurveTo","EndFill","LineStyle","LineTo","MoveTo"] };
openfl__$internal_formats_swf_ShapeCommand.BeginBitmapFill = function(bitmap,matrix,repeat,smooth) { var $x = ["BeginBitmapFill",0,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.BeginFill = function(color,alpha) { var $x = ["BeginFill",1,color,alpha]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.BeginGradientFill = function(fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { var $x = ["BeginGradientFill",2,fillType,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.CurveTo = function(controlX,controlY,anchorX,anchorY) { var $x = ["CurveTo",3,controlX,controlY,anchorX,anchorY]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.EndFill = ["EndFill",4];
openfl__$internal_formats_swf_ShapeCommand.EndFill.toString = $estr;
openfl__$internal_formats_swf_ShapeCommand.EndFill.__enum__ = openfl__$internal_formats_swf_ShapeCommand;
openfl__$internal_formats_swf_ShapeCommand.LineStyle = function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { var $x = ["LineStyle",5,thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.LineTo = function(x,y) { var $x = ["LineTo",6,x,y]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
openfl__$internal_formats_swf_ShapeCommand.MoveTo = function(x,y) { var $x = ["MoveTo",7,x,y]; $x.__enum__ = openfl__$internal_formats_swf_ShapeCommand; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	if(openfl__$internal_renderer_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,copyOnWrite: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,append: function(other) {
		if(this.get_length() == 0) {
			this.types = other.types;
			this.b = other.b;
			this.i = other.i;
			this.f = other.f;
			this.o = other.o;
			this.ff = other.ff;
			this.ii = other.ii;
			this.copyOnWrite = other.copyOnWrite = true;
			return other;
		}
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(Type.enumIndex(type)) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(c1["int"](0),c1["float"](0));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(c2.obj(0),c2.iArr(0),c2.fArr(0),c2.iArr(1),c2.obj(1),c2.obj(2),c2.obj(3),c2["float"](0));
				break;
			case 3:
				var c3 = data.readBeginShaderFill();
				this.beginShaderFill(c3.obj(0));
				break;
			case 4:
				var c4 = data.readCubicCurveTo();
				this.cubicCurveTo(c4["float"](0),c4["float"](1),c4["float"](2),c4["float"](3),c4["float"](4),c4["float"](5));
				break;
			case 5:
				var c5 = data.readCurveTo();
				this.curveTo(c5["float"](0),c5["float"](1),c5["float"](2),c5["float"](3));
				break;
			case 6:
				var c6 = data.readDrawCircle();
				this.drawCircle(c6["float"](0),c6["float"](1),c6["float"](2));
				break;
			case 7:
				var c7 = data.readDrawEllipse();
				this.drawEllipse(c7["float"](0),c7["float"](1),c7["float"](2),c7["float"](3));
				break;
			case 8:
				var c8 = data.readDrawQuads();
				this.drawQuads(c8.obj(0),c8.obj(1),c8.obj(2));
				break;
			case 9:
				var c9 = data.readDrawRect();
				this.drawRect(c9["float"](0),c9["float"](1),c9["float"](2),c9["float"](3));
				break;
			case 10:
				var c10 = data.readDrawRoundRect();
				this.drawRoundRect(c10["float"](0),c10["float"](1),c10["float"](2),c10["float"](3),c10["float"](4),c10.obj(0));
				break;
			case 12:
				var c11 = data.readDrawTriangles();
				this.drawTriangles(c11.obj(0),c11.obj(1),c11.obj(2),c11.obj(3));
				break;
			case 13:
				var c12 = data.readEndFill();
				this.endFill();
				break;
			case 14:
				var c13 = data.readLineBitmapStyle();
				this.lineBitmapStyle(c13.obj(0),c13.obj(1),c13.bool(0),c13.bool(1));
				break;
			case 15:
				var c14 = data.readLineGradientStyle();
				this.lineGradientStyle(c14.obj(0),c14.iArr(0),c14.fArr(0),c14.iArr(1),c14.obj(1),c14.obj(2),c14.obj(3),c14["float"](0));
				break;
			case 16:
				var c15 = data.readLineStyle();
				this.lineStyle(c15.obj(0),c15["int"](0),c15["float"](0),c15.bool(0),c15.obj(1),c15.obj(2),c15.obj(3),c15["float"](1));
				break;
			case 17:
				var c16 = data.readLineTo();
				this.lineTo(c16["float"](0),c16["float"](1));
				break;
			case 18:
				var c17 = data.readMoveTo();
				this.moveTo(c17["float"](0),c17["float"](1));
				break;
			case 19:
				var c18 = data.readOverrideMatrix();
				this.overrideMatrix(c18.obj(0));
				break;
			case 20:
				var c19 = data.readWindingEvenOdd();
				this.windingEvenOdd();
				break;
			case 21:
				var c20 = data.readWindingNonZero();
				this.windingNonZero();
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl__$internal_renderer_DrawCommandBuffer.empty.types;
		this.b = openfl__$internal_renderer_DrawCommandBuffer.empty.b;
		this.i = openfl__$internal_renderer_DrawCommandBuffer.empty.i;
		this.f = openfl__$internal_renderer_DrawCommandBuffer.empty.f;
		this.o = openfl__$internal_renderer_DrawCommandBuffer.empty.o;
		this.ff = openfl__$internal_renderer_DrawCommandBuffer.empty.ff;
		this.ii = openfl__$internal_renderer_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,overrideMatrix: function(matrix) {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(Type.enumIndex(_g)) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.oPos += 1;
			break;
		case 4:
			this.fPos += 6;
			break;
		case 5:
			this.fPos += 4;
			break;
		case 6:
			this.fPos += 3;
			break;
		case 7:
			this.fPos += 4;
			break;
		case 8:
			this.oPos += 3;
			break;
		case 9:
			this.fPos += 4;
			break;
		case 10:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 12:
			this.oPos += 4;
			break;
		case 13:
			break;
		case 14:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 15:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 16:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.fPos += 2;
			break;
		case 19:
			this.oPos += 1;
			break;
		case 20:case 21:
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		var this1 = this;
		return this1;
	}
	,readBeginShaderFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL;
		var this1 = this;
		return this1;
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		var this1 = this;
		return this1;
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		var this1 = this;
		return this1;
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		var this1 = this;
		return this1;
	}
	,readDrawQuads: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_QUADS;
		var this1 = this;
		return this1;
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		var this1 = this;
		return this1;
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		var this1 = this;
		return this1;
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		var this1 = this;
		return this1;
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		var this1 = this;
		return this1;
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		var this1 = this;
		return this1;
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		var this1 = this;
		return this1;
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		var this1 = this;
		return this1;
	}
	,readWindingEvenOdd: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD;
		var this1 = this;
		return this1;
	}
	,readWindingNonZero: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO;
		var this1 = this;
		return this1;
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","BEGIN_SHADER_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_QUADS","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","WINDING_EVEN_ODD","WINDING_NON_ZERO","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL = ["BEGIN_SHADER_FILL",3];
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",5];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",7];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS = ["DRAW_QUADS",8];
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_QUADS.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",10];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",12];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",13];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",16];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",17];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",18];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",19];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD = ["WINDING_EVEN_ODD",20];
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_EVEN_ODD.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO = ["WINDING_NON_ZERO",21];
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.WINDING_NON_ZERO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",22];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl._internal.renderer.SamplerState"] = openfl__$internal_renderer_SamplerState;
openfl__$internal_renderer_SamplerState.__name__ = ["openfl","_internal","renderer","SamplerState"];
openfl__$internal_renderer_SamplerState.prototype = {
	centroid: null
	,filter: null
	,ignoreSampler: null
	,lodBias: null
	,mipfilter: null
	,mipmapGenerated: null
	,textureAlpha: null
	,wrap: null
	,clone: function() {
		var copy = new openfl__$internal_renderer_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl__$internal_renderer_SamplerState
};
var openfl__$internal_renderer_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideNames = [];
	this.overrideValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl._internal.renderer.ShaderBuffer"] = openfl__$internal_renderer_ShaderBuffer;
openfl__$internal_renderer_ShaderBuffer.__name__ = ["openfl","_internal","renderer","ShaderBuffer"];
openfl__$internal_renderer_ShaderBuffer.prototype = {
	inputCount: null
	,inputRefs: null
	,inputFilter: null
	,inputMipFilter: null
	,inputs: null
	,inputWrap: null
	,overrideCount: null
	,overrideNames: null
	,overrideValues: null
	,paramBoolCount: null
	,paramCount: null
	,paramData: null
	,paramDataBuffer: null
	,paramDataLength: null
	,paramFloatCount: null
	,paramLengths: null
	,paramPositions: null
	,paramRefs_Bool: null
	,paramRefs_Float: null
	,paramRefs_Int: null
	,paramTypes: null
	,shader: null
	,addOverride: function(name,values) {
		this.overrideNames[this.overrideCount] = name;
		this.overrideValues[this.overrideCount] = values;
		this.overrideCount++;
	}
	,clearOverride: function() {
		this.overrideCount = 0;
	}
	,__class__: openfl__$internal_renderer_ShaderBuffer
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderer.context;
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap,false);
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		context.globalAlpha = bitmap.__worldAlpha;
		var scrollRect = bitmap.__scrollRect;
		renderer.setTransform(bitmap.__renderTransform,context);
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
		} else {
			context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(bitmap,false);
	}
};
var openfl__$internal_renderer_canvas_CanvasDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasDisplayObject"] = openfl__$internal_renderer_canvas_CanvasDisplayObject;
openfl__$internal_renderer_canvas_CanvasDisplayObject.__name__ = ["openfl","_internal","renderer","canvas","CanvasDisplayObject"];
openfl__$internal_renderer_canvas_CanvasDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.context;
		renderer.setTransform(displayObject.__renderTransform,context);
		var color = displayObject.opaqueBackground;
		context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
		context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__popMaskObject(displayObject);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_canvas_CanvasShape.render(displayObject,renderer);
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(smooth);
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		point = openfl_geom_Point.__pool.get();
		point.setTo(-819.2,0);
		matrix.__transformPoint(point);
		point2 = openfl_geom_Point.__pool.get();
		point2.setTo(819.2,0);
		matrix.__transformPoint(point2);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point.x,point.y,point2.x,point2.y);
		break;
	case 1:
		point = openfl_geom_Point.__pool.get();
		point.setTo(1638.4,0);
		matrix.__transformPoint(point);
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,Math.abs((point.x - matrix.tx) / 2));
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = js_Browser.get_document().createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
	openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = transform.__transformX(x,y);
		var py = transform.__transformY(x,y);
		x = px;
		y = py;
		x -= transform.__transformX(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
		y -= transform.__transformY(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext;
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(Type.enumIndex(type)) {
			case 0:case 1:case 2:case 3:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1["float"](0));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1["float"](0));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
					var c2 = data.readBeginShaderFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.obj(0));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.obj(0));
				} else {
					var c3 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3["int"](0),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3["int"](0),1);
				}
				break;
			case 4:
				var c4 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4["float"](0),c4["float"](1),c4["float"](2),c4["float"](3),c4["float"](4),c4["float"](5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4["float"](0),c4["float"](1),c4["float"](2),c4["float"](3),c4["float"](4),c4["float"](5));
				break;
			case 5:
				var c5 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5["float"](0),c5["float"](1),c5["float"](2),c5["float"](3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5["float"](0),c5["float"](1),c5["float"](2),c5["float"](3));
				break;
			case 6:
				var c6 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6["float"](0),c6["float"](1),c6["float"](2));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6["float"](0),c6["float"](1),c6["float"](2));
				break;
			case 7:
				var c7 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7["float"](0),c7["float"](1),c7["float"](2),c7["float"](3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7["float"](0),c7["float"](1),c7["float"](2),c7["float"](3));
				break;
			case 9:
				var c8 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c8["float"](0),c8["float"](1),c8["float"](2),c8["float"](3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c8["float"](0),c8["float"](1),c8["float"](2),c8["float"](3));
				break;
			case 10:
				var c9 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c9["float"](0),c9["float"](1),c9["float"](2),c9["float"](3),c9["float"](4),c9.obj(0));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c9["float"](0),c9["float"](1),c9["float"](2),c9["float"](3),c9["float"](4),c9.obj(0));
				break;
			case 13:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				var c10 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.obj(0),c10.obj(1),c10.bool(0),c10.bool(1));
				break;
			case 15:
				var c11 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c11.obj(0),c11.iArr(0),c11.fArr(0),c11.iArr(1),c11.obj(1),c11.obj(2),c11.obj(3),c11["float"](0));
				break;
			case 16:
				var c12 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c12.obj(0),c12["int"](0),1,c12.bool(0),c12.obj(1),c12.obj(2),c12.obj(3),c12["float"](1));
				break;
			case 17:
				var c13 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c13["float"](0),c13["float"](1));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c13["float"](0),c13["float"](1));
				break;
			case 18:
				var c14 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c14["float"](0),c14["float"](1));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c14["float"](0),c14["float"](1));
				break;
			case 20:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				data.skip(type);
			}
		}
		var hitTest = false;
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y,openfl__$internal_renderer_canvas_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t1 - 1));
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
	openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(Type.enumIndex(type)) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = c.obj(0);
				var tmp = c.obj(0);
				var tmp1 = c.bool(0);
				var tmp2 = c.bool(1);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp,tmp1,tmp2);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				if(c.obj(1) != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = c.obj(1);
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = c.obj(1).clone();
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 1:
				var c1 = data.readBeginFill();
				if(c1["float"](0) < 0.005) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				} else {
					if(c1["float"](0) == 1) {
						var tmp3 = StringTools.hex(c1["int"](0) & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp3;
					} else {
						r = (c1["int"](0) & 16711680) >>> 16;
						g = (c1["int"](0) & 65280) >>> 8;
						b = c1["int"](0) & 255;
						var tmp4 = "rgba(" + r + ", " + g + ", " + b + ", " + c1["float"](0);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = tmp4 + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				}
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				var tmp5 = c2.obj(0);
				var tmp6 = c2.iArr(0);
				var tmp7 = c2.fArr(0);
				var tmp8 = c2.iArr(1);
				var tmp9 = c2.obj(1);
				var tmp10 = c2.obj(2);
				var tmp11 = c2.obj(3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp5,tmp6,tmp7,tmp8,tmp9,tmp10,tmp11,c2["float"](0));
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
				break;
			case 3:
				var c3 = data.readBeginShaderFill();
				var shaderBuffer = c3.obj(0);
				if(shaderBuffer.inputCount > 0) {
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
					openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
				}
				break;
			case 4:
				var c4 = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c4["float"](0) - offsetX,c4["float"](1) - offsetY,c4["float"](2) - offsetX,c4["float"](3) - offsetY,c4["float"](4) - offsetX,c4["float"](5) - offsetY);
				break;
			case 5:
				var c5 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c5["float"](0) - offsetX,c5["float"](1) - offsetY,c5["float"](2) - offsetX,c5["float"](3) - offsetY);
				break;
			case 6:
				var c6 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c6["float"](0) - offsetX + c6["float"](2),c6["float"](1) - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c6["float"](0) - offsetX,c6["float"](1) - offsetY,c6["float"](2),0,Math.PI * 2,true);
				break;
			case 7:
				var c7 = data.readDrawEllipse();
				hasPath = true;
				x = c7["float"](0);
				y = c7["float"](1);
				width = c7["float"](2);
				height = c7["float"](3);
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c8 = data.readDrawQuads();
				var rects = c8.obj(0);
				var indices = c8.obj(1);
				var transforms = c8.obj(2);
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var tileRect = openfl_geom_Rectangle.__pool.get();
				var tileTransform = openfl_geom_Matrix.__pool.get();
				var sourceRect = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null ? openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.rect : null;
				var transform = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__renderTransform;
				var alpha = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__owner.__worldAlpha;
				var ri;
				var ti;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
				var _g3 = 0;
				var _g2 = length;
				while(_g3 < _g2) {
					var i = _g3++;
					if(hasIndices) {
						ri = indices.get(i) * 4;
					} else {
						ri = i * 4;
					}
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					if(tileRect.width <= 0 || tileRect.height <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					tileTransform.tx += positionX - offsetX;
					tileTransform.ty += positionY - offsetY;
					tileTransform.concat(transform);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
					if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
					} else {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
					}
				}
				openfl_geom_Rectangle.__pool.release(tileRect);
				openfl_geom_Matrix.__pool.release(tileTransform);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
				break;
			case 9:
				var c9 = data.readDrawRect();
				optimizationUsed = false;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null && !openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					st = 0;
					sr = 0;
					sb = 0;
					sl = 0;
					canOptimizeMatrix = true;
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
						if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
							canOptimizeMatrix = false;
						} else {
							if(stl == null) {
								stl = openfl_geom_Point.__pool.get();
							}
							if(sbr == null) {
								sbr = openfl_geom_Point.__pool.get();
							}
							stl.setTo(c9["float"](0),c9["float"](1));
							openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(stl);
							sbr.setTo(c9["float"](0) + c9["float"](2),c9["float"](1) + c9["float"](3));
							openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.__transformPoint(sbr);
							st = stl.y;
							sl = stl.x;
							sb = sbr.y;
							sr = sbr.x;
						}
					} else {
						st = c9["float"](1);
						sl = c9["float"](0);
						sb = c9["float"](1) + c9["float"](3);
						sr = c9["float"](0) + c9["float"](2);
					}
					if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
						optimizationUsed = true;
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9["float"](0) - offsetX,c9["float"](1) - offsetY,c9["float"](2),c9["float"](3));
						}
					}
				}
				if(!optimizationUsed) {
					hasPath = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c9["float"](0) - offsetX,c9["float"](1) - offsetY,c9["float"](2),c9["float"](3));
				}
				break;
			case 10:
				var c10 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c10["float"](0) - offsetX,c10["float"](1) - offsetY,c10["float"](2),c10["float"](3),c10["float"](4),c10.obj(0));
				break;
			case 12:
				var c11 = data.readDrawTriangles();
				var v = c11.obj(0);
				var ind = c11.obj(1);
				var uvt = c11.obj(2);
				var pattern = null;
				var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				if(!colorFill) {
					if(uvt == null) {
						uvt = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
						var _g31 = 0;
						var _g21 = Std["int"](v.get_length() / 2);
						while(_g31 < _g21) {
							var i1 = _g31++;
							uvt.push(v.get(i1 * 2) - offsetX / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width);
							uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
						}
					}
					var skipT = uvt.get_length() != v.get_length();
					var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,Std["int"](openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width),Std["int"](openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height));
					} else {
						pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
					}
				}
				var i2 = 0;
				var l = ind.get_length();
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x1;
				var y1;
				var x2;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				while(i2 < l) {
					a_ = i2;
					b_ = i2 + 1;
					c_ = i2 + 2;
					iax = ind.get(a_) * 2;
					iay = ind.get(a_) * 2 + 1;
					ibx = ind.get(b_) * 2;
					iby = ind.get(b_) * 2 + 1;
					icx = ind.get(c_) * 2;
					icy = ind.get(c_) * 2 + 1;
					x1 = v.get(iax) - offsetX;
					y1 = v.get(iay) - offsetY;
					x2 = v.get(ibx) - offsetX;
					y2 = v.get(iby) - offsetY;
					x3 = v.get(icx) - offsetX;
					y3 = v.get(icy) - offsetY;
					var _g22 = c11.obj(3);
					switch(_g22) {
					case 0:
						if(openfl__$internal_renderer_canvas_CanvasGraphics.isCCW(x1,y1,x2,y2,x3,y3)) {
							i2 += 3;
							continue;
						}
						break;
					case 2:
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.isCCW(x1,y1,x2,y2,x3,y3)) {
							i2 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
						if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
						}
						i2 += 3;
						continue;
					}
					uvx1 = uvt.get(iax) * pattern.width;
					uvx2 = uvt.get(ibx) * pattern.width;
					uvx3 = uvt.get(icx) * pattern.width;
					uvy1 = uvt.get(iay) * pattern.height;
					uvy2 = uvt.get(iby) * pattern.height;
					uvy3 = uvt.get(icy) * pattern.height;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i2 += 3;
						openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
						continue;
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x1,y1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
					t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
					i2 += 3;
				}
				break;
			case 14:
				var c12 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				var tmp12 = c12.obj(0);
				var tmp13 = c12.bool(0);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp12,tmp13,c12.bool(1));
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 15:
				var c13 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				var tmp14 = c13.obj(0);
				var tmp15 = c13.iArr(0);
				var tmp16 = c13.fArr(0);
				var tmp17 = c13.iArr(1);
				var tmp18 = c13.obj(1);
				var tmp19 = c13.obj(2);
				var tmp20 = c13.obj(3);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp14,tmp15,tmp16,tmp17,tmp18,tmp19,tmp20,c13["float"](0));
				openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				break;
			case 16:
				var c14 = data.readLineStyle();
				if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
					openfl__$internal_renderer_canvas_CanvasGraphics.closePath(true);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
				if(c14.obj(0) == null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
				} else {
					var tmp21 = c14.obj(0) > 0 ? c14.obj(0) : 1;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = tmp21;
					var tmp22 = c14.obj(3) == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(c14.obj(3)).toLowerCase();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp22;
					var tmp23;
					if(c14.obj(2) == null) {
						tmp23 = "round";
					} else {
						var _g23 = c14.obj(2);
						if(_g23 == 0) {
							tmp23 = "butt";
						} else {
							tmp23 = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(c14.obj(2)).toLowerCase();
						}
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp23;
					openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = c14["float"](1);
					if(c14["float"](0) == 1) {
						var tmp24 = StringTools.hex(c14["int"](0) & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp24;
					} else {
						r = (c14["int"](0) & 16711680) >>> 16;
						g = (c14["int"](0) & 65280) >>> 8;
						b = c14["int"](0) & 255;
						var tmp25 = "rgba(" + r + ", " + g + ", " + b + ", " + c14["float"](0);
						openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = tmp25 + ")";
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing(true);
					openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
				}
				break;
			case 17:
				var c15 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c15["float"](0) - offsetX,c15["float"](1) - offsetY);
				positionX = c15["float"](0);
				positionY = c15["float"](1);
				if(positionX == startX && positionY == startY) {
					closeGap = true;
				}
				break;
			case 18:
				var c16 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c16["float"](0) - offsetX,c16["float"](1) - offsetY);
				positionX = c16["float"](0);
				positionY = c16["float"](1);
				if(setStart) {
					closeGap = true;
				}
				startX = c16["float"](0);
				startY = c16["float"](1);
				setStart = true;
				break;
			case 20:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
				break;
			case 21:
				openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath(false);
			}
			if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
					}
					openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill(openfl__$internal_renderer_canvas_CanvasGraphics.windingRule);
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__dirty) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = js_Browser.get_document().createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = Std["int"](width * scale);
			var scaledHeight = Std["int"](height * scale);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
					openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(Type.enumIndex(type)) {
				case 0:case 1:case 2:case 3:
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
						var c = data.readBeginBitmapFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(c.obj(0),c.obj(1),c.bool(0),c.bool(1));
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
						var c1 = data.readBeginGradientFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1["float"](0));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(c1.obj(0),c1.iArr(0),c1.fArr(0),c1.iArr(1),c1.obj(1),c1.obj(2),c1.obj(3),c1["float"](0));
					} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_SHADER_FILL) {
						var c2 = data.readBeginShaderFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginShaderFill(c2.obj(0));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginShaderFill(c2.obj(0));
					} else {
						var c3 = data.readBeginFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(c3["int"](0),c3["float"](0));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(c3["int"](0),c3["float"](0));
					}
					break;
				case 4:
					var c4 = data.readCubicCurveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(c4["float"](0),c4["float"](1),c4["float"](2),c4["float"](3),c4["float"](4),c4["float"](5));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(c4["float"](0),c4["float"](1),c4["float"](2),c4["float"](3),c4["float"](4),c4["float"](5));
					} else {
						initStrokeX = c4["float"](4);
						initStrokeY = c4["float"](5);
					}
					break;
				case 5:
					var c5 = data.readCurveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(c5["float"](0),c5["float"](1),c5["float"](2),c5["float"](3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(c5["float"](0),c5["float"](1),c5["float"](2),c5["float"](3));
					} else {
						initStrokeX = c5["float"](2);
						initStrokeY = c5["float"](3);
					}
					break;
				case 6:
					var c6 = data.readDrawCircle();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(c6["float"](0),c6["float"](1),c6["float"](2));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(c6["float"](0),c6["float"](1),c6["float"](2));
					}
					break;
				case 7:
					var c7 = data.readDrawEllipse();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(c7["float"](0),c7["float"](1),c7["float"](2),c7["float"](3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(c7["float"](0),c7["float"](1),c7["float"](2),c7["float"](3));
					}
					break;
				case 8:
					var c8 = data.readDrawQuads();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawQuads(c8.obj(0),c8.obj(1),c8.obj(2));
					break;
				case 9:
					var c9 = data.readDrawRect();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(c9["float"](0),c9["float"](1),c9["float"](2),c9["float"](3));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(c9["float"](0),c9["float"](1),c9["float"](2),c9["float"](3));
					}
					break;
				case 10:
					var c10 = data.readDrawRoundRect();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(c10["float"](0),c10["float"](1),c10["float"](2),c10["float"](3),c10["float"](4),c10.obj(0));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(c10["float"](0),c10["float"](1),c10["float"](2),c10["float"](3),c10["float"](4),c10.obj(0));
					}
					break;
				case 12:
					var c11 = data.readDrawTriangles();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawTriangles(c11.obj(0),c11.obj(1),c11.obj(2),c11.obj(3));
					break;
				case 13:
					data.readEndFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
					openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					var c12 = data.readLineBitmapStyle();
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.obj(0),c12.obj(1),c12.bool(0),c12.bool(1));
					break;
				case 15:
					var c13 = data.readLineGradientStyle();
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(c13.obj(0),c13.iArr(0),c13.fArr(0),c13.iArr(1),c13.obj(1),c13.obj(2),c13.obj(3),c13["float"](0));
					break;
				case 16:
					var c14 = data.readLineStyle();
					if(!hasLineStyle && c14.obj(0) != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.obj(0) != null;
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(c14.obj(0),c14["int"](0),c14["float"](0),c14.bool(0),c14.obj(1),c14.obj(2),c14.obj(3),c14["float"](1));
					break;
				case 17:
					var c15 = data.readLineTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(c15["float"](0),c15["float"](1));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(c15["float"](0),c15["float"](1));
					} else {
						initStrokeX = c15["float"](0);
						initStrokeY = c15["float"](1);
					}
					break;
				case 18:
					var c16 = data.readMoveTo();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(c16["float"](0),c16["float"](1));
					if(hasLineStyle) {
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(c16["float"](0),c16["float"](1));
					} else {
						initStrokeX = c16["float"](0);
						initStrokeY = c16["float"](1);
					}
					break;
				case 20:
					data.readWindingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "evenodd";
					break;
				case 21:
					data.readWindingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.windingNonZero();
					openfl__$internal_renderer_canvas_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					data.skip(type);
				}
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(Type.enumIndex(type)) {
			case 4:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(c["float"](0) - offsetX,c["float"](1) - offsetY,c["float"](2) - offsetX,c["float"](3) - offsetY,c["float"](4) - offsetX,c["float"](5) - offsetY);
				positionX = c["float"](4);
				positionY = c["float"](5);
				break;
			case 5:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(c1["float"](0) - offsetX,c1["float"](1) - offsetY,c1["float"](2) - offsetX,c1["float"](3) - offsetY);
				positionX = c1["float"](2);
				positionY = c1["float"](3);
				break;
			case 6:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(c2["float"](0) - offsetX,c2["float"](1) - offsetY,c2["float"](2),0,Math.PI * 2,true);
				break;
			case 7:
				var c3 = data.readDrawEllipse();
				x = c3["float"](0);
				y = c3["float"](1);
				width = c3["float"](2);
				height = c3["float"](3);
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(c4["float"](0) - offsetX,c4["float"](1) - offsetY,c4["float"](2),c4["float"](3));
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				break;
			case 10:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(c5["float"](0) - offsetX,c5["float"](1) - offsetY,c5["float"](2),c5["float"](3),c5["float"](4),c5.obj(0));
				break;
			case 17:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(c6["float"](0) - offsetX,c6["float"](1) - offsetY);
				positionX = c6["float"](0);
				positionY = c6["float"](1);
				break;
			case 18:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(c7["float"](0) - offsetX,c7["float"](1) - offsetY);
				positionX = c7["float"](0);
				positionY = c7["float"](1);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(graphics.__canvas != null) {
			var context = renderer.context;
			var scrollRect = shape.__scrollRect;
			if(width > 0 && height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				renderer.__setBlendMode(shape.__worldBlendMode);
				renderer.__pushMaskObject(shape);
				context.globalAlpha = shape.__worldAlpha;
				renderer.setTransform(graphics.__worldTransform,context);
				if(renderer.__isDOM) {
					var reverseScale = 1 / renderer.pixelRatio;
					context.scale(reverseScale,reverseScale);
				}
				context.drawImage(graphics.__canvas,0,0,width,height);
				renderer.__popMaskObject(shape);
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderer,transform) {
	var textEngine = textField.__textEngine;
	var bounds = textEngine.background || textEngine.border ? textEngine.bounds : textEngine.textBounds;
	var graphics = textField.__graphics;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer.__worldTransform);
	if(textField.__dirty || graphics.__dirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(textEngine.text,"")) && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = js_Browser.get_document().createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			var transform1 = graphics.__renderTransform;
			if(renderer.__isDOM) {
				var scale = renderer.pixelRatio;
				graphics.__canvas.width = Std["int"](width * scale);
				graphics.__canvas.height = Std["int"](height * scale);
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform1);
				matrix.scale(scale,scale);
				renderer.setTransform(matrix,openfl__$internal_renderer_canvas_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl__$internal_renderer_canvas_CanvasTextField.context.setTransform(transform1.a,transform1.b,transform1.c,transform1.d,transform1.tx,transform1.ty);
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect == null) {
				openfl__$internal_renderer_canvas_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl__$internal_renderer_canvas_CanvasTextField.clearRect) {
				openfl__$internal_renderer_canvas_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						var tmp1 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g1 = 0;
				var _g = textField.get_scrollV() - 1;
				while(_g1 < _g) {
					var i = _g1++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(js_Browser.get_window().navigator.userAgent);
				var _g2 = 0;
				var _g11 = textEngine.layoutGroups;
				while(_g2 < _g11.get_length()) {
					var group = _g11.get(_g2);
					++_g2;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					if(group.format.underline) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#000000";
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = .5;
						var x = group.offsetX + scrollX - bounds.x;
						var y = group.offsetY + offsetY + scrollY + group.ascent - bounds.y;
						openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(x,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(x + group.width,y);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					var tmp2 = StringTools.hex(group.format.color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,group.startIndex,group.endIndex),group.offsetX + scrollX - bounds.x,group.offsetY + offsetY + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g3 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g3 < _g21) {
									var i1 = _g3++;
									if(group.positions.length <= i1) {
										break;
									}
									advance += group.getAdvance(i1);
								}
								var scrollY1 = 0.0;
								var _g31 = textField.get_scrollV();
								var _g22 = group.lineIndex + 1;
								while(_g31 < _g22) {
									var i2 = _g31++;
									scrollY1 += textEngine.lineHeights.get(i2 - 1);
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
								var tmp3 = StringTools.hex(group.format.color & 16777215,6);
								openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp3;
								openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(group.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
								openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(group.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
								openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex || group.startIndex > textField.__caretIndex && group.endIndex < textField.__selectionIndex || group.startIndex > textField.__selectionIndex && group.endIndex < textField.__caretIndex) {
							var selectionStart = Std["int"](Math.min(textField.__selectionIndex,textField.__caretIndex));
							var selectionEnd = Std["int"](Math.max(textField.__selectionIndex,textField.__caretIndex));
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text)) {
								end = textField.getCharBoundaries(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(textEngine.text) - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x + scrollX,start.y + scrollY,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp4 = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp4;
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						var tmp5 = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp5;
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX1 = -textField.get_scrollH();
					var scrollY2 = 0.0;
					var _g12 = 0;
					var _g4 = textField.get_scrollV() - 1;
					while(_g12 < _g4) {
						var i3 = _g12++;
						scrollY2 += textEngine.lineHeights.get(i3);
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.beginPath();
					var tmp6 = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp6;
					openfl__$internal_renderer_canvas_CanvasTextField.context.moveTo(scrollX1 + 2.5,scrollY2 + 2.5);
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
					openfl__$internal_renderer_canvas_CanvasTextField.context.lineTo(scrollX1 + 2.5,scrollY2 + openfl__$internal_text_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					openfl__$internal_renderer_canvas_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DBitmap = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DBitmap"] = openfl__$internal_renderer_context3D_Context3DBitmap;
openfl__$internal_renderer_context3D_Context3DBitmap.__name__ = ["openfl","_internal","renderer","context3D","Context3DBitmap"];
openfl__$internal_renderer_context3D_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl__$internal_renderer_context3D_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
};
var openfl__$internal_renderer_context3D_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl._internal.renderer.context3D.Context3DBuffer"] = openfl__$internal_renderer_context3D_Context3DBuffer;
openfl__$internal_renderer_context3D_Context3DBuffer.__name__ = ["openfl","_internal","renderer","context3D","Context3DBuffer"];
openfl__$internal_renderer_context3D_Context3DBuffer.prototype = {
	dataPerVertex: null
	,elementCount: null
	,elementType: null
	,indexCount: null
	,vertexBuffer: null
	,vertexBufferData: null
	,vertexCount: null
	,context3D: null
	,flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(this.vertexBufferData);
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		var _g = this.elementType;
		switch(Type.enumIndex(_g)) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var this2;
			if(vertexLength != null) {
				this2 = new Float32Array(vertexLength);
			} else {
				this2 = null;
			}
			this.vertexBufferData = this2;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl__$internal_renderer_context3D_Context3DBuffer
};
var openfl__$internal_renderer_context3D_Context3DElementType = $hxClasses["openfl._internal.renderer.context3D.Context3DElementType"] = { __ename__ : ["openfl","_internal","renderer","context3D","Context3DElementType"], __constructs__ : ["QUADS","TRIANGLES","TRIANGLE_INDICES"] };
openfl__$internal_renderer_context3D_Context3DElementType.QUADS = ["QUADS",0];
openfl__$internal_renderer_context3D_Context3DElementType.QUADS.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.QUADS.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES = ["TRIANGLES",1];
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLES.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES = ["TRIANGLE_INDICES",2];
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES.toString = $estr;
openfl__$internal_renderer_context3D_Context3DElementType.TRIANGLE_INDICES.__enum__ = openfl__$internal_renderer_context3D_Context3DElementType;
var openfl__$internal_renderer_context3D_Context3DDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DDisplayObject"] = openfl__$internal_renderer_context3D_Context3DDisplayObject;
openfl__$internal_renderer_context3D_Context3DDisplayObject.__name__ = ["openfl","_internal","renderer","context3D","Context3DDisplayObject"];
openfl__$internal_renderer_context3D_Context3DDisplayObject.render = function(displayObject,renderer) {
	if(displayObject.opaqueBackground == null && displayObject.__graphics == null) {
		return;
	}
	if(!displayObject.__renderable || displayObject.__worldAlpha <= 0) {
		return;
	}
	if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
		renderer.__setBlendMode(displayObject.__worldBlendMode);
		renderer.__pushMaskObject(displayObject);
		var context = renderer.__context3D;
		var rect = openfl_geom_Rectangle.__pool.get();
		rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
		renderer.__pushMaskRect(rect,displayObject.__renderTransform);
		var color = displayObject.opaqueBackground;
		context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
		renderer.__popMaskRect();
		renderer.__popMaskObject(displayObject);
		openfl_geom_Rectangle.__pool.release(rect);
	}
	if(displayObject.__graphics != null) {
		openfl__$internal_renderer_context3D_Context3DShape.render(displayObject,renderer);
	}
};
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type) {
	return null;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha) {
	return null;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path) {
	return null;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.fromTexture = function(texture) {
	if(texture == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(texture.__width,texture.__height,true,0);
	bitmapData.readable = false;
	bitmapData.__texture = texture;
	bitmapData.__textureContext = texture.__textureContext;
	bitmapData.image = null;
	return bitmapData;
};
openfl_display_BitmapData.loadFromBase64 = function(base64,type) {
	return lime_graphics_Image.loadFromBase64(base64,type).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.loadFromBytes = function(bytes,rawAlpha) {
	return lime_graphics_Image.loadFromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes)).then(function(image) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(rawAlpha != null) {
			bitmapData.__applyAlpha(rawAlpha);
		}
		return lime_app_Future.withValue(bitmapData);
	});
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,readable: null
	,rect: null
	,transparent: null
	,width: null
	,__framebuffer: null
	,__framebufferContext: null
	,__indexBuffer: null
	,__indexBufferContext: null
	,__indexBufferData: null
	,__isValid: null
	,__mask: null
	,__renderable: null
	,__renderTransform: null
	,__scrollRect: null
	,__surface: null
	,__texture: null
	,__textureContext: null
	,__textureHeight: null
	,__textureVersion: null
	,__textureWidth: null
	,__uvRect: null
	,__vertexBuffer: null
	,__vertexBufferContext: null
	,__vertexBufferData: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.readable) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.get_window().context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer1 = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer1.__allowSmoothing = smoothing;
			renderer1.__overrideBlendMode = blendMode;
			renderer1.__worldTransform = transform;
			renderer1.__worldAlpha = 1 / source.__worldAlpha;
			renderer1.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer1.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer1);
			if(clipRect != null) {
				renderer1.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,getIndexBuffer: function(context) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context) {
			var this1 = new Uint16Array(6);
			this.__indexBufferData = this1;
			this.__indexBufferData[0] = 0;
			this.__indexBufferData[1] = 1;
			this.__indexBufferData[2] = 2;
			this.__indexBufferData[3] = 2;
			this.__indexBufferData[4] = 1;
			this.__indexBufferData[5] = 3;
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = context.createIndexBuffer(6);
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			var this1 = new Float32Array(56);
			this.__vertexBufferData = this1;
			this.__vertexBufferData[0] = this.width;
			this.__vertexBufferData[1] = this.height;
			this.__vertexBufferData[3] = uvWidth;
			this.__vertexBufferData[4] = uvHeight;
			this.__vertexBufferData[15] = this.height;
			this.__vertexBufferData[18] = uvHeight;
			this.__vertexBufferData[28] = this.width;
			this.__vertexBufferData[31] = uvWidth;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = context.createVertexBuffer(3,14);
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
		return this.__vertexBuffer;
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,__applyAlpha: function(alpha) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(this.image);
		var data = this.image.buffer.data;
		var _g1 = 0;
		var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(alpha);
		while(_g1 < _g) {
			var i = _g1++;
			data[i * 4 + 3] = alpha.readUnsignedByte();
		}
		this.image.version++;
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(!this.readable) {
			return;
		}
		if(this.image.type == lime_graphics_ImageType.DATA) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
		}
		var context = renderer.context;
		context.globalAlpha = 1;
		renderer.setTransform(this.__renderTransform,context);
		context.drawImage(this.image.get_src(),0,0,this.image.width,this.image.height);
	}
	,__renderDOM: function(renderer) {
	}
	,__renderGL: function(renderer) {
		var context = renderer.__context3D;
		var gl = context.gl;
		renderer.__setBlendMode(10);
		var shader = renderer.__defaultDisplayShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(this,renderer.__allowSmoothing && renderer.__upscaled);
		renderer.applyMatrix(renderer.__getMatrix(this.__worldTransform,1));
		renderer.applyAlpha(this.__worldAlpha);
		renderer.applyColorTransform(this.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = this.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = this.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		renderer.__clearShader();
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(this.__vertexBufferData);
		}
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		return y1 > y0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_right:"get_right",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_context3D_Context3DGraphics = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DGraphics"] = openfl__$internal_renderer_context3D_Context3DGraphics;
openfl__$internal_renderer_context3D_Context3DGraphics.__name__ = ["openfl","_internal","renderer","context3D","Context3DGraphics"];
openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(Type.enumIndex(type)) {
		case 0:
			var c = data.readBeginBitmapFill();
			bitmap = c.obj(0);
			break;
		case 1:
			bitmap = null;
			data.skip(type);
			break;
		case 3:
			var c1 = data.readBeginShaderFill();
			var shaderBuffer = c1.obj(0);
			if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
				bitmap = null;
			} else {
				bitmap = c1.obj(0).shader.__bitmap.input;
			}
			break;
		case 8:
			if(bitmap != null) {
				var c2 = data.readDrawQuads();
				var rects = c2.obj(0);
				var indices = c2.obj(1);
				var transforms = c2.obj(2);
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl__$internal_renderer_context3D_Context3DBuffer(context,openfl__$internal_renderer_context3D_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var bitmapWidth;
				var bitmapHeight;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				bitmapWidth = bitmap.width;
				bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g3 = 0;
				var _g2 = length;
				while(_g3 < _g2) {
					var i = _g3++;
					vertexOffset = (quadBufferPosition + i) * stride;
					if(hasIndices) {
						ri = indices.get(i) * 4;
					} else {
						ri = i * 4;
					}
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = tileTransform.__transformX(0,0);
					y = tileTransform.__transformY(0,0);
					x2 = tileTransform.__transformX(tileWidth,0);
					y2 = tileTransform.__transformY(tileWidth,0);
					x3 = tileTransform.__transformX(0,tileHeight);
					y3 = tileTransform.__transformY(0,tileHeight);
					x4 = tileTransform.__transformX(tileWidth,tileHeight);
					y4 = tileTransform.__transformY(tileWidth,tileHeight);
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			var c3 = data.readDrawTriangles();
			var vertices = c3.obj(0);
			var indices1 = c3.obj(1);
			var uvtData = c3.obj(2);
			var culling = c3.obj(3);
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g31 = 0;
			var _g21 = length1;
			while(_g31 < _g21) {
				var i1 = _g31++;
				offset = vertexOffset1 + i1 * dataPerVertex1;
				if(hasIndices1) {
					vertOffset = indices1.get(i1) * 2;
				} else {
					vertOffset = i1 * 2;
				}
				if(hasIndices1) {
					uvOffset = indices1.get(i1) * uvStride;
				} else {
					uvOffset = i1 * uvStride;
				}
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			data.skip(type);
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer1 = graphics.__vertexBuffer;
		if(buffer1 == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer1 = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer1;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer1.uploadFromTypedArray(graphics.__vertexBufferData);
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer2 = graphics.__vertexBufferUVT;
		if(buffer2 == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer2 = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer2;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer2.uploadFromTypedArray(graphics.__vertexBufferDataUVT);
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible = function(graphics) {
	var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(Type.enumIndex(type)) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			data.skip(type);
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			data.skip(type);
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			data.skip(type);
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				data.skip(type);
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				data.skip(type);
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				data.skip(type);
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			data.skip(type);
			break;
		case 18:
			data.skip(type);
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl__$internal_renderer_context3D_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl__$internal_renderer_context3D_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__dirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl__$internal_renderer_context3D_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(Type.enumIndex(type)) {
				case 0:
					var c = data.readBeginBitmapFill();
					bitmap = c.obj(0);
					repeat = c.bool(0);
					smooth = c.bool(1);
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					var c1 = data.readBeginFill();
					var color = Std["int"](c1["int"](0));
					var alpha = Std["int"](c1["float"](0) * 255);
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					var c2 = data.readBeginShaderFill();
					shaderBuffer = c2.obj(0);
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						var c3 = data.readDrawQuads();
						var rects = c3.obj(0);
						var indices = c3.obj(1);
						var transforms = c3.obj(2);
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							if(openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								shader = renderer.__maskShader;
							} else {
								shader = renderer.__initGraphicsShader(null);
							}
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,renderer.__allowSmoothing && smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Std["int"](Math.min(end - quadBufferPosition,context.__quadIndexBufferElements));
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						var c4 = data.readDrawRect();
						var x = c4["float"](0);
						var y = c4["float"](1);
						var width1 = c4["float"](2);
						var height1 = c4["float"](3);
						var color1 = fill;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width1,height1);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl__$internal_renderer_context3D_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData,renderer.__allowSmoothing,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						renderer.__clearShader();
					}
					break;
				case 12:
					var c5 = data.readDrawTriangles();
					var vertices = c5.obj(0);
					var indices1 = c5.obj(1);
					var uvtData = c5.obj(2);
					var culling = c5.obj(3);
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						if(openfl__$internal_renderer_context3D_Context3DGraphics.maskRender) {
							shader2 = renderer.__maskShader;
						} else {
							shader2 = renderer.__initGraphicsShader(null);
						}
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,renderer.__allowSmoothing && smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(bufferPosition,length1);
					shaderBufferOffset += length1;
					if(hasUVData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					if(culling != 1) {
						context.setCulling(0);
					}
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					data.skip(type);
					break;
				case 18:
					var c6 = data.readMoveTo();
					positionX = c6["float"](0);
					positionY = c6["float"](1);
					break;
				default:
					data.skip(type);
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_context3D_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = true;
	openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
	openfl__$internal_renderer_context3D_Context3DGraphics.maskRender = false;
};
openfl__$internal_renderer_context3D_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var this2;
		if(length != null) {
			this2 = new Float32Array(length);
		} else {
			this2 = null;
		}
		newBuffer = this2;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	byteCode: null
	,glProgram: null
	,precisionHint: null
	,program: null
	,__alpha: null
	,__bitmap: null
	,__colorMultiplier: null
	,__colorOffset: null
	,__context: null
	,__data: null
	,__glFragmentSource: null
	,__glSourceDirty: null
	,__glVertexSource: null
	,__hasColorTransform: null
	,__inputBitmapData: null
	,__isGenerated: null
	,__matrix: null
	,__numPasses: null
	,__paramBool: null
	,__paramFloat: null
	,__paramInt: null
	,__position: null
	,__textureCoord: null
	,__texture: null
	,__textureSize: null
	,__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g2 = 0;
		var _g11 = this.__paramFloat;
		while(_g2 < _g11.length) {
			var parameter1 = _g11[_g2];
			++_g2;
			parameter1.__useArray = false;
		}
		var _g3 = 0;
		var _g12 = this.__paramInt;
		while(_g3 < _g12.length) {
			var parameter2 = _g12[_g3];
			++_g3;
			parameter2.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "Shader.hx", lineNumber : 180, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "Shader.hx", lineNumber : 218, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			parameter.__disableGL(this.__context);
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			parameter1.__disableGL(this.__context);
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			parameter2.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display__$ShaderData_ShaderData_$Impl_$._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(this.__context.__programs.exists(id)) {
				this.program = this.__context.__programs.get(id);
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.set(id,this.program);
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g2 = 0;
				var _g11 = this.__paramBool;
				while(_g2 < _g11.length) {
					var parameter = _g11[_g2];
					++_g2;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g3 = 0;
				var _g12 = this.__paramFloat;
				while(_g3 < _g12.length) {
					var parameter1 = _g12[_g3];
					++_g3;
					if(parameter1.__isUniform) {
						parameter1.index = gl.getUniformLocation(this.glProgram,parameter1.name);
					} else {
						parameter1.index = gl.getAttribLocation(this.glProgram,parameter1.name);
					}
				}
				var _g4 = 0;
				var _g13 = this.__paramInt;
				while(_g4 < _g13.length) {
					var parameter2 = _g13[_g4];
					++_g4;
					if(parameter2.__isUniform) {
						parameter2.index = gl.getUniformLocation(this.glProgram,parameter2.name);
					} else {
						parameter2.index = gl.getAttribLocation(this.glProgram,parameter2.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				Reflect.setField(this.__data,name,input);
				if(this.__isGenerated) {
					Reflect.setField(this,name,input);
				}
			} else if(!Reflect.hasField(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.name = name;
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					Reflect.setField(this.__data,name,parameter);
					if(this.__isGenerated) {
						Reflect.setField(this,name,parameter);
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.name = name;
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					Reflect.setField(this.__data,name,parameter1);
					if(this.__isGenerated) {
						Reflect.setField(this,name,parameter1);
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.name = name;
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					Reflect.setField(this.__data,name,parameter2);
					if(this.__isGenerated) {
						Reflect.setField(this,name,parameter2);
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g2 = 0;
		var _g11 = this.__paramBool;
		while(_g2 < _g11.length) {
			var parameter = _g11[_g2];
			++_g2;
			parameter.__updateGL(this.__context);
		}
		var _g3 = 0;
		var _g12 = this.__paramFloat;
		while(_g3 < _g12.length) {
			var parameter1 = _g12[_g3];
			++_g3;
			parameter1.__updateGL(this.__context);
		}
		var _g4 = 0;
		var _g13 = this.__paramInt;
		while(_g4 < _g13.length) {
			var parameter2 = _g13[_g4];
			++_g4;
			parameter2.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g1 = 0;
		var _g = shaderBuffer.inputCount;
		while(_g1 < _g) {
			var i = _g1++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g11 = 0;
		var _g2 = shaderBuffer.paramCount;
		while(_g11 < _g2) {
			var i1 = _g11++;
			hasOverride = false;
			if(i1 < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g3 = 0;
				var _g21 = shaderBuffer.overrideCount;
				while(_g3 < _g21) {
					var j = _g3++;
					if(boolRef.name == shaderBuffer.overrideNames[j]) {
						overrideBoolValue = shaderBuffer.overrideValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++boolIndex;
			} else if(i1 < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g31 = 0;
				var _g22 = shaderBuffer.overrideCount;
				while(_g31 < _g22) {
					var j1 = _g31++;
					if(floatRef.name == shaderBuffer.overrideNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g32 = 0;
				var _g23 = shaderBuffer.overrideCount;
				while(_g32 < _g23) {
					var j2 = _g32++;
					if(intRef.name == shaderBuffer.overrideNames[j2]) {
						overrideIntValue = shaderBuffer.overrideValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i1],shaderBuffer.paramLengths[i1],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,__class__: openfl_display_Shader
	,__properties__: {get_glVertexSource:"get_glVertexSource",get_glFragmentSource:"get_glFragmentSource"}
};
var openfl__$internal_renderer_context3D_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tdiscard;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = color;\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl._internal.renderer.context3D.Context3DMaskShader"] = openfl__$internal_renderer_context3D_Context3DMaskShader;
openfl__$internal_renderer_context3D_Context3DMaskShader.__name__ = ["openfl","_internal","renderer","context3D","Context3DMaskShader"];
openfl__$internal_renderer_context3D_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl__$internal_renderer_context3D_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_Texture: null
	,__class__: openfl__$internal_renderer_context3D_Context3DMaskShader
});
var openfl__$internal_renderer_context3D_Context3DShape = function() { };
$hxClasses["openfl._internal.renderer.context3D.Context3DShape"] = openfl__$internal_renderer_context3D_Context3DShape;
openfl__$internal_renderer_context3D_Context3DShape.__name__ = ["openfl","_internal","renderer","context3D","Context3DShape"];
openfl__$internal_renderer_context3D_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl__$internal_renderer_context3D_Context3DGraphics.render(graphics,renderer);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,renderer.__allowSmoothing);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl__$internal_renderer_context3D_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_context3D_Context3DGraphics.renderMask(graphics,renderer);
		var bounds = graphics.__bounds;
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,renderer.__allowSmoothing);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			renderer.__clearShader();
		}
	}
};
var openfl__$internal_renderer_context3D_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationFactor = 9;
	this.blendSourceFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl._internal.renderer.context3D.Context3DState"] = openfl__$internal_renderer_context3D_Context3DState;
openfl__$internal_renderer_context3D_Context3DState.__name__ = ["openfl","_internal","renderer","context3D","Context3DState"];
openfl__$internal_renderer_context3D_Context3DState.prototype = {
	backBufferEnableDepthAndStencil: null
	,blendDestinationFactor: null
	,blendSourceFactor: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,culling: null
	,depthCompareMode: null
	,depthMask: null
	,program: null
	,renderToTexture: null
	,renderToTextureAntiAlias: null
	,renderToTextureDepthStencil: null
	,renderToTextureSurfaceSelector: null
	,samplerStates: null
	,scissorEnabled: null
	,scissorRectangle: null
	,stencilCompareMode: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilPass: null
	,stencilReadMask: null
	,stencilReferenceValue: null
	,stencilTriangleFace: null
	,stencilWriteMask: null
	,textures: null
	,shader: null
	,__currentGLArrayBuffer: null
	,__currentGLElementArrayBuffer: null
	,__currentGLFramebuffer: null
	,__currentGLTexture2D: null
	,__currentGLTextureCubeMap: null
	,__enableGLBlend: null
	,__enableGLCullFace: null
	,__enableGLDepthTest: null
	,__enableGLScissorTest: null
	,__enableGLStencilTest: null
	,__frontFaceGLCCW: null
	,__glBlendEquation: null
	,__primaryGLFramebuffer: null
	,__class__: openfl__$internal_renderer_context3D_Context3DState
};
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderer) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
		renderer.__pushMaskObject(bitmap);
		if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderer);
		}
		renderer.__popMaskObject(bitmap);
	} else {
		openfl__$internal_renderer_dom_DOMBitmap.clear(bitmap,renderer);
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = js_Browser.get_document().createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = js_Browser.get_document().createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl__$internal_renderer_dom_DOMDisplayObject = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMDisplayObject"] = openfl__$internal_renderer_dom_DOMDisplayObject;
openfl__$internal_renderer_dom_DOMDisplayObject.__name__ = ["openfl","_internal","renderer","dom","DOMDisplayObject"];
openfl__$internal_renderer_dom_DOMDisplayObject.clear = function(displayObject,renderer) {
	openfl__$internal_renderer_dom_DOMShape.clear(displayObject,renderer);
};
openfl__$internal_renderer_dom_DOMDisplayObject.render = function(displayObject,renderer) {
	var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
	openfl__$internal_renderer_dom_DOMShape.render(displayObject,renderer);
};
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas != graphics.__canvas) {
			if(graphics.__canvas != null) {
				if(shape.__canvas != graphics.__canvas) {
					if(shape.__canvas != null) {
						renderer.element.removeChild(shape.__canvas);
					}
					shape.__canvas = graphics.__canvas;
					shape.__context = graphics.__context;
					renderer.__initializeElement(shape,shape.__canvas);
				}
			} else {
				openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
			}
		}
		if(shape.__canvas != null) {
			renderer.__pushMaskObject(shape);
			var cacheTransform = shape.__renderTransform;
			shape.__renderTransform = graphics.__worldTransform;
			if(graphics.__transformDirty) {
				graphics.__transformDirty = false;
				shape.__renderTransformChanged = true;
			}
			renderer.__updateClip(shape);
			renderer.__applyStyle(shape,true,true,true);
			shape.__renderTransform = cacheTransform;
			renderer.__popMaskObject(shape);
		}
	} else {
		openfl__$internal_renderer_dom_DOMShape.clear(shape,renderer);
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.clear = function(textField,renderer) {
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderer) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__renderTransformChanged || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = js_Browser.get_document().createElement("div");
					renderer.__initializeElement(textField,textField.__div);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							var textField1 = textField.__displayAsPassword;
							textField.__dirty = false;
						}
					},true);
				}
				if(!textEngine.wordWrap) {
					textField.__style.setProperty("white-space","nowrap",null);
				} else {
					textField.__style.setProperty("word-wrap","break-word",null);
				}
				textField.__style.setProperty("overflow","hidden",null);
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
					textField.__style.setProperty("-webkit-user-select","text",null);
					textField.__style.setProperty("-moz-user-select","text",null);
					textField.__style.setProperty("-ms-user-select","text",null);
					textField.__style.setProperty("-o-user-select","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
				} else {
					style.removeProperty("background-color");
				}
				var w = textEngine.width;
				var h = textEngine.height;
				var scale = 1;
				var unscaledSize = textField.__textFormat.size;
				var scaledSize = unscaledSize;
				var t = textField.__renderTransform;
				if(t.a != 1.0 || t.d != 1.0) {
					if(t.a == t.d) {
						scale = t.a;
						t.a = t.d = 1.0;
					} else if(t.a > t.d) {
						scale = t.a;
						t.d /= t.a;
						t.a = 1.0;
					} else {
						scale = t.d;
						t.a /= t.d;
						t.d = 1.0;
					}
					scaledSize *= scale;
					w = Math.ceil(w * scale);
					h = Math.ceil(h * scale);
				}
				textField.__textFormat.size = scaledSize;
				var text = textEngine.text;
				var adjustment = 0;
				if(!textField.__isHTML) {
					text = StringTools.htmlEscape(text);
				} else {
					var matchText = text;
					while(openfl__$internal_renderer_dom_DOMTextField.__regexFont.match(matchText)) {
						var fontText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matched(0);
						var style1 = "";
						if(openfl__$internal_renderer_dom_DOMTextField.__regexFace.match(fontText)) {
							style1 += "font-family:'" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexFace) + "';";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexColor.match(fontText)) {
							style1 += "color:#" + openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexColor) + ";";
						}
						if(openfl__$internal_renderer_dom_DOMTextField.__regexSize.match(fontText)) {
							var sizeAttr = openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch(openfl__$internal_renderer_dom_DOMTextField.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							var size;
							adjustment = Std.parseFloat(sizeAttr) * scale;
							if(firstChar == 43 || firstChar == 45) {
								size = scaledSize + adjustment;
							} else {
								size = adjustment;
							}
							style1 += "font-size:" + size + "px;";
						}
						text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
						matchText = openfl__$internal_renderer_dom_DOMTextField.__regexFont.matchedRight();
					}
					text = openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont.replace(text,"</span>");
				}
				text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
				var unscaledLeading = textField.__textFormat.leading;
				textField.__textFormat.leading += Std["int"](adjustment);
				textField.__div.innerHTML = new EReg("\r\n","g").replace(text,"<br>");
				textField.__div.innerHTML = new EReg("\n","g").replace(textField.__div.innerHTML,"<br>");
				textField.__div.innerHTML = new EReg("\r","g").replace(textField.__div.innerHTML,"<br>");
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				textField.__textFormat.size = unscaledSize;
				textField.__textFormat.leading = unscaledLeading;
				style.setProperty("top","3px",null);
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
					textField.__renderTransform.translate(-1,-1);
					textField.__renderTransformChanged = true;
					textField.__transformDirty = true;
				} else if(style.border != "") {
					style.removeProperty("border");
					textField.__renderTransformChanged = true;
				}
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color & 16777215,6),null);
				style.setProperty("width",w + "px",null);
				style.setProperty("height",h + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderer.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			var old = renderer.__roundPixels;
			renderer.__roundPixels = true;
			renderer.__updateClip(textField);
			renderer.__applyStyle(textField,true,true,true);
			renderer.__roundPixels = old;
		}
	} else {
		openfl__$internal_renderer_dom_DOMTextField.clear(textField,renderer);
	}
};
openfl__$internal_renderer_dom_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl__$internal_symbols_SWFSymbol = function() {
};
$hxClasses["openfl._internal.symbols.SWFSymbol"] = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SWFSymbol.__name__ = ["openfl","_internal","symbols","SWFSymbol"];
openfl__$internal_symbols_SWFSymbol.prototype = {
	className: null
	,id: null
	,__createObject: function(swf) {
		return null;
	}
	,__class__: openfl__$internal_symbols_SWFSymbol
};
var openfl__$internal_symbols_BitmapSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.BitmapSymbol"] = openfl__$internal_symbols_BitmapSymbol;
openfl__$internal_symbols_BitmapSymbol.__name__ = ["openfl","_internal","symbols","BitmapSymbol"];
openfl__$internal_symbols_BitmapSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_BitmapSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	alpha: null
	,path: null
	,smooth: null
	,__createObject: function(swf) {
		return new openfl_display_Bitmap(openfl_display_BitmapData.fromImage(swf.library.getImage(this.path)),1,this.smooth != false);
	}
	,__class__: openfl__$internal_symbols_BitmapSymbol
});
var openfl__$internal_symbols_ButtonSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ButtonSymbol"] = openfl__$internal_symbols_ButtonSymbol;
openfl__$internal_symbols_ButtonSymbol.__name__ = ["openfl","_internal","symbols","ButtonSymbol"];
openfl__$internal_symbols_ButtonSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ButtonSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	downState: null
	,hitState: null
	,overState: null
	,upState: null
	,__createObject: function(swf) {
		var simpleButton = null;
		openfl_display_SimpleButton.__initSWF = swf;
		openfl_display_SimpleButton.__initSymbol = this;
		if(this.className != null) {
			var symbolType = Type.resolveClass(this.className);
			if(symbolType != null) {
				simpleButton = Type.createInstance(symbolType,[]);
			}
		}
		if(simpleButton == null) {
			simpleButton = new openfl_display_SimpleButton();
		}
		return simpleButton;
	}
	,__class__: openfl__$internal_symbols_ButtonSymbol
});
var openfl__$internal_symbols_DynamicTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.DynamicTextSymbol"] = openfl__$internal_symbols_DynamicTextSymbol;
openfl__$internal_symbols_DynamicTextSymbol.__name__ = ["openfl","_internal","symbols","DynamicTextSymbol"];
openfl__$internal_symbols_DynamicTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_DynamicTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	align: null
	,border: null
	,color: null
	,fontHeight: null
	,fontID: null
	,fontName: null
	,height: null
	,html: null
	,indent: null
	,input: null
	,leading: null
	,leftMargin: null
	,multiline: null
	,password: null
	,rightMargin: null
	,selectable: null
	,text: null
	,width: null
	,wordWrap: null
	,x: null
	,y: null
	,__createObject: function(swf) {
		var textField = new openfl_text_TextField();
		textField.__fromSymbol(swf,this);
		return textField;
	}
	,__class__: openfl__$internal_symbols_DynamicTextSymbol
});
var openfl__$internal_symbols_FontSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.FontSymbol"] = openfl__$internal_symbols_FontSymbol;
openfl__$internal_symbols_FontSymbol.__name__ = ["openfl","_internal","symbols","FontSymbol"];
openfl__$internal_symbols_FontSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_FontSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	advances: null
	,ascent: null
	,bold: null
	,codes: null
	,descent: null
	,glyphs: null
	,italic: null
	,leading: null
	,name: null
	,__class__: openfl__$internal_symbols_FontSymbol
});
var openfl__$internal_symbols_ShapeSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.ShapeSymbol"] = openfl__$internal_symbols_ShapeSymbol;
openfl__$internal_symbols_ShapeSymbol.__name__ = ["openfl","_internal","symbols","ShapeSymbol"];
openfl__$internal_symbols_ShapeSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_ShapeSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	commands: null
	,rendered: null
	,__createObject: function(swf) {
		var shape = new openfl_display_Shape();
		var graphics = shape.get_graphics();
		if(this.rendered != null) {
			graphics.copyFrom(this.rendered.get_graphics());
			return shape;
		}
		var _g = 0;
		var _g1 = this.commands;
		while(_g < _g1.length) {
			var command = _g1[_g];
			++_g;
			switch(Type.enumIndex(command)) {
			case 0:
				var smooth = command[5];
				var repeat = command[4];
				var matrix = command[3];
				var bitmapID = command[2];
				var bitmapSymbol = swf.symbols.get(bitmapID);
				var bitmap = swf.library.getImage(bitmapSymbol.path);
				if(bitmap != null) {
					graphics.beginBitmapFill(openfl_display_BitmapData.fromImage(bitmap),matrix,repeat,smooth);
				}
				break;
			case 1:
				var alpha = command[3];
				var color = command[2];
				graphics.beginFill(color,alpha);
				break;
			case 2:
				var focalPointRatio = command[9];
				var interpolationMethod = command[8];
				var spreadMethod = command[7];
				var matrix1 = command[6];
				var ratios = command[5];
				var alphas = command[4];
				var colors = command[3];
				var fillType = command[2];
				graphics.beginGradientFill(fillType,colors,alphas,ratios,matrix1,spreadMethod,interpolationMethod,focalPointRatio);
				break;
			case 3:
				var anchorY = command[5];
				var anchorX = command[4];
				var controlY = command[3];
				var controlX = command[2];
				graphics.curveTo(controlX,controlY,anchorX,anchorY);
				break;
			case 4:
				graphics.endFill();
				break;
			case 5:
				var miterLimit = command[9];
				var joints = command[8];
				var caps = command[7];
				var scaleMode = command[6];
				var pixelHinting = command[5];
				var alpha1 = command[4];
				var color1 = command[3];
				var thickness = command[2];
				if(thickness != null) {
					graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
				} else {
					graphics.lineStyle();
				}
				break;
			case 6:
				var y = command[3];
				var x = command[2];
				graphics.lineTo(x,y);
				break;
			case 7:
				var y1 = command[3];
				var x1 = command[2];
				graphics.moveTo(x1,y1);
				break;
			}
		}
		this.commands = null;
		this.rendered = new openfl_display_Shape();
		this.rendered.get_graphics().copyFrom(shape.get_graphics());
		return shape;
	}
	,__class__: openfl__$internal_symbols_ShapeSymbol
});
var openfl__$internal_symbols_SpriteSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
	this.frames = [];
};
$hxClasses["openfl._internal.symbols.SpriteSymbol"] = openfl__$internal_symbols_SpriteSymbol;
openfl__$internal_symbols_SpriteSymbol.__name__ = ["openfl","_internal","symbols","SpriteSymbol"];
openfl__$internal_symbols_SpriteSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_SpriteSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	baseClassName: null
	,frames: null
	,__createObject: function(swf) {
		openfl_display_MovieClip.__initSWF = swf;
		openfl_display_MovieClip.__initSymbol = this;
		var symbolType = null;
		if(this.className != null) {
			symbolType = Type.resolveClass(this.className);
			var tmp = symbolType == null;
		}
		if(symbolType == null && this.baseClassName != null) {
			symbolType = Type.resolveClass(this.baseClassName);
			var tmp1 = symbolType == null;
		}
		var movieClip = null;
		if(symbolType != null) {
			movieClip = Type.createInstance(symbolType,[]);
		} else {
			movieClip = new openfl_display_MovieClip();
		}
		return movieClip;
	}
	,__class__: openfl__$internal_symbols_SpriteSymbol
});
var openfl__$internal_symbols_StaticTextSymbol = function() {
	openfl__$internal_symbols_SWFSymbol.call(this);
};
$hxClasses["openfl._internal.symbols.StaticTextSymbol"] = openfl__$internal_symbols_StaticTextSymbol;
openfl__$internal_symbols_StaticTextSymbol.__name__ = ["openfl","_internal","symbols","StaticTextSymbol"];
openfl__$internal_symbols_StaticTextSymbol.__super__ = openfl__$internal_symbols_SWFSymbol;
openfl__$internal_symbols_StaticTextSymbol.prototype = $extend(openfl__$internal_symbols_SWFSymbol.prototype,{
	matrix: null
	,records: null
	,rendered: null
	,__createObject: function(swf) {
		var staticText = new openfl_text_StaticText();
		var graphics = staticText.__graphics;
		if(this.rendered != null) {
			staticText.text = this.rendered.text;
			graphics.copyFrom(this.rendered.__graphics);
			return staticText;
		}
		var text = "";
		if(this.records != null) {
			var font = null;
			var color = 16777215;
			var offsetX = this.matrix.tx;
			var offsetY = this.matrix.ty;
			var scale;
			var index;
			var code;
			var _g = 0;
			var _g1 = this.records;
			while(_g < _g1.length) {
				var record = _g1[_g];
				++_g;
				if(record.fontID != null) {
					font = swf.symbols.get(record.fontID);
				}
				if(record.offsetX != null) {
					offsetX = this.matrix.tx + record.offsetX * 0.05;
				}
				if(record.offsetY != null) {
					offsetY = this.matrix.ty + record.offsetY * 0.05;
				}
				if(record.color != null) {
					color = record.color;
				}
				if(font != null) {
					scale = record.fontHeight / 1024 * 0.05;
					var _g3 = 0;
					var _g2 = record.glyphs.length;
					while(_g3 < _g2) {
						var i = _g3++;
						index = record.glyphs[i];
						text += String.fromCharCode(font.codes[index]);
						var _g4 = 0;
						var _g5 = font.glyphs[index];
						while(_g4 < _g5.length) {
							var command = _g5[_g4];
							++_g4;
							switch(Type.enumIndex(command)) {
							case 1:
								var alpha = command[3];
								graphics.beginFill(color & 16777215,(color >> 24 & 255) / 255);
								break;
							case 3:
								var anchorY = command[5];
								var anchorX = command[4];
								var controlY = command[3];
								var controlX = command[2];
								graphics.curveTo(controlX * scale + offsetX,controlY * scale + offsetY,anchorX * scale + offsetX,anchorY * scale + offsetY);
								break;
							case 4:
								graphics.endFill();
								break;
							case 5:
								var miterLimit = command[9];
								var joints = command[8];
								var caps = command[7];
								var scaleMode = command[6];
								var pixelHinting = command[5];
								var alpha1 = command[4];
								var color1 = command[3];
								var thickness = command[2];
								if(thickness != null) {
									graphics.lineStyle(thickness,color1,alpha1,pixelHinting,scaleMode,caps,joints,miterLimit);
								} else {
									graphics.lineStyle();
								}
								break;
							case 6:
								var y = command[3];
								var x = command[2];
								graphics.lineTo(x * scale + offsetX,y * scale + offsetY);
								break;
							case 7:
								var y1 = command[3];
								var x1 = command[2];
								graphics.moveTo(x1 * scale + offsetX,y1 * scale + offsetY);
								break;
							default:
							}
						}
						offsetX += record.advances[i] * 0.05;
					}
				}
			}
		}
		staticText.text = text;
		this.records = null;
		this.rendered = new openfl_text_StaticText();
		this.rendered.text = text;
		this.rendered.__graphics.copyFrom(staticText.__graphics);
		return staticText;
	}
	,__class__: openfl__$internal_symbols_StaticTextSymbol
});
var openfl__$internal_symbols_StaticTextRecord = function() {
};
$hxClasses["openfl._internal.symbols.StaticTextRecord"] = openfl__$internal_symbols_StaticTextRecord;
openfl__$internal_symbols_StaticTextRecord.__name__ = ["openfl","_internal","symbols","StaticTextRecord"];
openfl__$internal_symbols_StaticTextRecord.prototype = {
	advances: null
	,color: null
	,fontHeight: null
	,fontID: null
	,glyphs: null
	,offsetX: null
	,offsetY: null
	,__class__: openfl__$internal_symbols_StaticTextRecord
};
var openfl__$internal_symbols_timeline_Frame = function() {
};
$hxClasses["openfl._internal.symbols.timeline.Frame"] = openfl__$internal_symbols_timeline_Frame;
openfl__$internal_symbols_timeline_Frame.__name__ = ["openfl","_internal","symbols","timeline","Frame"];
openfl__$internal_symbols_timeline_Frame.prototype = {
	label: null
	,objects: null
	,script: null
	,scriptSource: null
	,__class__: openfl__$internal_symbols_timeline_Frame
};
var openfl__$internal_symbols_timeline_FrameObject = function() {
};
$hxClasses["openfl._internal.symbols.timeline.FrameObject"] = openfl__$internal_symbols_timeline_FrameObject;
openfl__$internal_symbols_timeline_FrameObject.__name__ = ["openfl","_internal","symbols","timeline","FrameObject"];
openfl__$internal_symbols_timeline_FrameObject.prototype = {
	blendMode: null
	,cacheAsBitmap: null
	,clipDepth: null
	,colorTransform: null
	,depth: null
	,filters: null
	,id: null
	,matrix: null
	,name: null
	,symbol: null
	,type: null
	,visible: null
	,__class__: openfl__$internal_symbols_timeline_FrameObject
};
var openfl__$internal_symbols_timeline_FrameObjectType = $hxClasses["openfl._internal.symbols.timeline.FrameObjectType"] = { __ename__ : ["openfl","_internal","symbols","timeline","FrameObjectType"], __constructs__ : ["CREATE","UPDATE","DESTROY"] };
openfl__$internal_symbols_timeline_FrameObjectType.CREATE = ["CREATE",0];
openfl__$internal_symbols_timeline_FrameObjectType.CREATE.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.CREATE.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE = ["UPDATE",1];
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.UPDATE.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY = ["DESTROY",2];
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY.toString = $estr;
openfl__$internal_symbols_timeline_FrameObjectType.DESTROY.__enum__ = openfl__$internal_symbols_timeline_FrameObjectType;
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineBreaks = openfl__$Vector_Vector_$Impl_$.toIntVector(null);
	this.lineDescents = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineLeadings = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineHeights = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.lineWidths = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
	this.layoutGroups = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	this.textFormatRanges = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	openfl__$internal_text_TextEngine.__canvas = js_Browser.get_document().createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.findFont = function(name) {
	return openfl_text_Font.__fontByName.get(name);
};
openfl__$internal_text_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) {
		return openfl__$internal_text_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl__$internal_text_TextEngine.findFont(fontName);
};
openfl__$internal_text_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	var leading;
	openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(format);
	var font = openfl__$internal_text_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	leading = format.leading;
	return ascent + descent + leading;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && openfl_text_Font.__fontByName.exists(fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		font1 = "'" + new EReg("^[\\s'\"]+(.*)[\\s'\"]+$","").replace(fontName,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return openfl__$internal_text_TextEngine.findFontVariant(format);
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textBounds: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__hasFocus: null
	,__restrictRegexp: null
	,__useIntAdvances: null
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.offsetX < x) {
				x = group.offsetX;
			}
			if(group.offsetY < y) {
				y = group.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLineBreakIndex: function(startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		var br = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"<br>",startIndex);
		var cr = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\n",startIndex);
		var lf = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text,"\r",startIndex);
		if(cr == -1 && br == -1) {
			return lf;
		}
		if(lf == -1 && br == -1) {
			return cr;
		}
		if(lf == -1 && cr == -1) {
			return br;
		}
		if(cr == -1) {
			return Std["int"](Math.min(br,lf));
		}
		if(lf == -1) {
			return Std["int"](Math.min(br,cr));
		}
		if(br == -1) {
			return Std["int"](Math.min(cr,lf));
		}
		return Std["int"](Math.min(Math.min(cr,lf),br));
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Std["int"](Math.max(currentLineLeading,group.leading));
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group.offsetY - 2 + group.ascent + group.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var leading;
			var heightValue;
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.autoSize != 2) {
			var _g2 = this.autoSize;
			switch(_g2) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = Std["int"](this.textWidth - this.width + 4);
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
		if(this.scrollV > this.maxScrollV) {
			this.scrollV = this.maxScrollV;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || lime_text__$UTF8String_UTF8String_$Impl_$.equals(this.text,"")) {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0.0;
		var maxHeightValue = 0.0;
		var previousSpaceIndex = -2;
		var spaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ");
		var breakIndex = this.getLineBreakIndex();
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		var getPositions = function(text,startIndex,endIndex) {
			var positions1 = [];
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			if(_gthis.__useIntAdvances == null) {
				var getPositions1 = new EReg("Trident/7.0","");
				_gthis.__useIntAdvances = getPositions1.match(js_Browser.get_navigator().userAgent);
			}
			if(_gthis.__useIntAdvances) {
				var previousWidth = 0.0;
				var width;
				var _g1 = startIndex;
				var _g = endIndex;
				while(_g1 < _g) {
					var i = _g1++;
					width = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(text,startIndex,i + 1)).width;
					positions1.push(width - previousWidth);
					previousWidth = width;
				}
			} else {
				var _g11 = startIndex;
				var _g2 = endIndex;
				while(_g11 < _g2) {
					var i1 = _g11++;
					var advance;
					if(i1 < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(text) - 1) {
						var nextWidth = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text,i1 + 1)).width;
						var twoWidths = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.substr(text,i1,2)).width;
						advance = twoWidths - nextWidth;
					} else {
						advance = openfl__$internal_text_TextEngine.__context.measureText(lime_text__$UTF8String_UTF8String_$Impl_$.charAt(text,i1)).width;
					}
					positions1.push(advance);
				}
			}
			return positions1;
		};
		var getPositionsWidth = function(positions2) {
			var width1 = 0.0;
			var _g3 = 0;
			while(_g3 < positions2.length) {
				var position = positions2[_g3];
				++_g3;
				width1 += position;
			}
			return width1;
		};
		var getTextWidth = function(text1) {
			return openfl__$internal_text_TextEngine.__context.measureText(text1).width;
		};
		var nextLayoutGroup = function(startIndex1,endIndex1) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,startIndex1,endIndex1);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex1;
				layoutGroup.endIndex = endIndex1;
			}
		};
		var nextFormatRange = function() {
			var nextFormatRange1 = _gthis.textFormatRanges.get_length() - 1;
			if(rangeIndex < nextFormatRange1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				font = openfl__$internal_text_TextEngine.getFontInstance(currentFormat);
				if(currentFormat.__ascent != null) {
					ascent = currentFormat.size * currentFormat.__ascent;
					descent = currentFormat.size * currentFormat.__descent;
				} else if(font != null && font.unitsPerEM != 0) {
					ascent = font.ascender / font.unitsPerEM * currentFormat.size;
					descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
				} else {
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
				}
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var alignBaseline = function() {
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			var i2 = _gthis.layoutGroups.get_length();
			while(--i2 > -1) {
				var lg = _gthis.layoutGroups.get(i2);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0.0;
			lineIndex += 1;
			offsetX = 2;
		};
		var breakLongWords = function(endIndex2) {
			var tempWidth = lime_text__$UTF8String_UTF8String_$Impl_$.substring(_gthis.text,textIndex,endIndex2);
			var tempWidth1 = getTextWidth(tempWidth);
			while(offsetX + tempWidth1 > _gthis.width - 2) {
				var i3 = 1;
				while(textIndex + i3 < endIndex2 + 1) {
					var tempWidth2 = lime_text__$UTF8String_UTF8String_$Impl_$.substr(_gthis.text,textIndex,i3);
					tempWidth1 = getTextWidth(tempWidth2);
					if(offsetX + tempWidth1 > _gthis.width - 2) {
						--i3;
						break;
					}
					++i3;
				}
				if(i3 == 0 && tempWidth1 > _gthis.width - 4) {
					i3 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(_gthis.text);
				}
				if(i3 == 0) {
					offsetX = 2;
					offsetY += layoutGroup.height;
					lineIndex += 1;
					break;
				} else {
					nextLayoutGroup(textIndex,textIndex + i3);
					layoutGroup.positions = getPositions(_gthis.text,textIndex,textIndex + i3);
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = getPositionsWidth(layoutGroup.positions);
					layoutGroup.height = heightValue;
					layoutGroup = null;
					alignBaseline();
					textIndex += i3;
					positions = getPositions(_gthis.text,textIndex,endIndex2);
					widthValue = getPositionsWidth(positions);
					tempWidth1 = widthValue;
				}
			}
		};
		nextFormatRange();
		lineFormat = formatRange.format;
		var wrap;
		var maxLoops = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			if(textIndex <= breakIndex) {
				if(this.wordWrap && previousSpaceIndex <= textIndex && this.width >= 4) {
					breakLongWords(breakIndex);
				}
				nextLayoutGroup(textIndex,breakIndex);
				layoutGroup.positions = getPositions(this.text,textIndex,breakIndex);
				layoutGroup.offsetX = offsetX;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY;
				layoutGroup.width = getPositionsWidth(layoutGroup.positions);
				layoutGroup.height = heightValue;
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.getAdvance(layoutGroup.positions.length - 1);
				}
				layoutGroup = null;
			}
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				lineFormat = formatRange.format;
			}
			if(breakIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) - 1) {
				offsetY -= maxHeightValue;
			}
			alignBaseline();
			textIndex = breakIndex + 1;
			breakIndex = this.getLineBreakIndex(textIndex);
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1 && textIndex < formatRange.end) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex != formatRange.end) {
				var endIndex3 = -1;
				if(spaceIndex == -1) {
					endIndex3 = breakIndex;
				} else {
					endIndex3 = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex3) {
						endIndex3 = breakIndex;
					}
				}
				if(endIndex3 == -1 || endIndex3 > formatRange.end) {
					endIndex3 = formatRange.end;
				}
				positions = getPositions(this.text,textIndex,endIndex3);
				widthValue = getPositionsWidth(positions);
				if(lineFormat.align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex3 == spaceIndex + 1) {
						--endIndex3;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
						if(positions.length > 0 && endIndex3 == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= this.width - 2) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(lineFormat.align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.getAdvance(previous.positions.length - 1);
						previous.endIndex--;
					}
					var i4 = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i4);
						if(i4 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i4;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g12 = this.layoutGroups.get_length() - offsetCount;
						var _g4 = this.layoutGroups.get_length();
						while(_g12 < _g4) {
							var i5 = _g12++;
							layoutGroup = this.layoutGroups.get(i5);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					if(this.width >= 4) {
						breakLongWords(endIndex3);
					}
					nextLayoutGroup(textIndex,endIndex3);
					layoutGroup.positions = positions;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = endIndex3;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(lineFormat.align != 2) {
							layoutGroup.endIndex = spaceIndex;
							layoutGroup.positions = layoutGroup.positions.concat(positions);
							layoutGroup.width += widthValue;
						}
					} else if(layoutGroup == null || lineFormat.align == 2) {
						nextLayoutGroup(textIndex,endIndex3);
						layoutGroup.positions = positions;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
					} else {
						layoutGroup.endIndex = endIndex3;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
						if(breakIndex == endIndex3) {
							++endIndex3;
						}
					}
					offsetX += widthValue;
					textIndex = endIndex3;
				}
				var nextSpaceIndex = lime_text__$UTF8String_UTF8String_$Impl_$.indexOf(this.text," ",textIndex);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					textIndex = formatRange.end;
					nextFormatRange();
				} else {
					if(breakIndex == previousSpaceIndex) {
						layoutGroup.endIndex = breakIndex;
						if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
							layoutGroup.positions.push(0.0);
						}
						textIndex = breakIndex + 1;
					}
					previousSpaceIndex = spaceIndex;
					spaceIndex = nextSpaceIndex;
				}
				var tmp;
				var tmp1;
				if(!(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1))) {
					var tmp2 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
					tmp1 = textIndex > tmp2;
				} else {
					tmp1 = true;
				}
				if(!tmp1) {
					tmp = spaceIndex > formatRange.end;
				} else {
					tmp = true;
				}
				if(tmp) {
					break;
				}
			}
		} else {
			if(textIndex > formatRange.end) {
				break;
			} else {
				var tmp3;
				if(textIndex >= formatRange.end) {
					var tmp4 = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text);
					tmp3 = textIndex == tmp4;
				} else {
					tmp3 = true;
				}
				if(tmp3) {
					if(this.wordWrap && this.width >= 4) {
						breakLongWords(formatRange.end);
					}
					positions = getPositions(this.text,textIndex,formatRange.end);
					widthValue = getPositionsWidth(positions);
					nextLayoutGroup(textIndex,formatRange.end);
					layoutGroup.positions = getPositions(this.text,textIndex,formatRange.end);
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = getPositionsWidth(layoutGroup.positions);
					layoutGroup.height = heightValue;
					offsetX += widthValue;
					textIndex = formatRange.end;
				}
			}
			nextFormatRange();
			if(textIndex == formatRange.end) {
				alignBaseline();
				textIndex += 1;
				break;
			}
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g1 = 0;
		var _g = this.layoutGroups.get_length();
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.get_length();
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = lime_text__$UTF8String_UTF8String_$Impl_$.charCodeAt(this.text,group.endIndex);
							if(group.endIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.text) && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl__$internal_text_TextEngine
	,__properties__: {set_text:"set_text"}
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,positions: null
	,startIndex: null
	,width: null
	,getAdvance: function(index) {
		return this.positions[index];
	}
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl__$internal_utils_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl._internal.utils.TouchData"] = openfl__$internal_utils_TouchData;
openfl__$internal_utils_TouchData.__name__ = ["openfl","_internal","utils","TouchData"];
openfl__$internal_utils_TouchData.prototype = {
	rollOutStack: null
	,touch: null
	,touchDownTarget: null
	,touchOverTarget: null
	,reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl__$internal_utils_TouchData
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl__$internal_Lib.application == null) {
		openfl__$internal_Lib.application = this;
	}
	if(openfl__$internal_Lib.current == null) {
		openfl__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl__$internal_Lib.current.__loaderInfo.content = openfl__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.set($window.id,$window);
		var f = $bind(this,this.__onWindowClose);
		var a1 = $window;
		var tmp = function() {
			f(a1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	pixelSnapping: null
	,smoothing: null
	,__image: null
	,__bitmapData: null
	,__imageVersion: null
	,__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			this.__setRenderDirty();
		}
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__pool.get();
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
			openfl_geom_Rectangle.__pool.release(bounds);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCairoMask: function(renderer) {
		renderer.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderer);
			openfl__$internal_renderer_canvas_CanvasBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		renderer.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			openfl__$internal_renderer_dom_DOMBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_dom_DOMDisplayObject.render(this,renderer);
			openfl__$internal_renderer_dom_DOMBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMBitmap.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__bitmapData != null && this.__bitmapData.image != null) {
			this.__imageVersion = this.__bitmapData.image.version;
		}
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_context3D_Context3DDisplayObject.render(this,renderer);
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_context3D_Context3DBitmap.renderMask(this,renderer);
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__bitmapData == null || this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__updateCacheBitmap.call(this,renderer,this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion);
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		this.__setRenderDirty();
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,get_height: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.height * Math.abs(this.get_scaleY());
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.height) {
				this.__setRenderDirty();
				this.set_scaleY(value / this.__bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.__bitmapData != null) {
			return this.__bitmapData.width * Math.abs(this.__scaleX);
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			if(value != this.__bitmapData.width) {
				this.__setRenderDirty();
				this.set_scaleX(value / this.__bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = ["openfl","display","DisplayObjectRenderer"];
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__allowSmoothing: null
	,__blendMode: null
	,__cleared: null
	,__context: null
	,__overrideBlendMode: null
	,__roundPixels: null
	,__stage: null
	,__tempColorTransform: null
	,__type: null
	,__worldAlpha: null
	,__worldColorTransform: null
	,__worldTransform: null
	,__clear: function() {
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__render: function(object) {
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = ["openfl","display","CairoRenderer"];
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	cairo: null
	,__matrix: null
	,__matrix3: null
	,applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		mask.__renderCairoMask(this);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		object.__renderCairo(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.cairo.setOperator(12);
			break;
		case 2:
			this.cairo.setOperator(17);
			break;
		case 3:
			this.cairo.setOperator(23);
			break;
		case 5:
			this.cairo.setOperator(21);
			break;
		case 7:
			this.cairo.setOperator(2);
			break;
		case 8:
			this.cairo.setOperator(18);
			break;
		case 9:
			this.cairo.setOperator(14);
			break;
		case 11:
			this.cairo.setOperator(16);
			break;
		case 12:
			this.cairo.setOperator(15);
			break;
		default:
			this.cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = ["openfl","display","CanvasRenderer"];
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	context: null
	,pixelRatio: null
	,__isDOM: null
	,__tempMatrix: null
	,applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,Std["int"](transform.tx),Std["int"](transform.ty));
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.get_scale(),this.__stage.stageHeight * this.__stage.window.get_scale());
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.get_scale(),this.__stage.stageHeight * this.__stage.window.get_scale());
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		mask.__renderCanvasMask(this);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		object.__renderCanvas(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.context.globalCompositeOperation = "lighter";
			break;
		case 1:
			this.context.globalCompositeOperation = "destination-in";
			break;
		case 2:
			this.context.globalCompositeOperation = "darken";
			break;
		case 3:
			this.context.globalCompositeOperation = "difference";
			break;
		case 4:
			this.context.globalCompositeOperation = "destination-out";
			break;
		case 5:
			this.context.globalCompositeOperation = "hard-light";
			break;
		case 7:
			this.context.globalCompositeOperation = "source-over";
			break;
		case 8:
			this.context.globalCompositeOperation = "lighten";
			break;
		case 9:
			this.context.globalCompositeOperation = "multiply";
			break;
		case 11:
			this.context.globalCompositeOperation = "overlay";
			break;
		case 12:
			this.context.globalCompositeOperation = "screen";
			break;
		default:
			this.context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('') 
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = ["openfl","display","DOMRenderer"];
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	element: null
	,pixelRatio: null
	,__canvasRenderer: null
	,__clipRects: null
	,__currentClipRect: null
	,__numClipRects: null
	,__transformOriginProperty: null
	,__transformProperty: null
	,__vendorPrefix: null
	,__z: null
	,__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			style.setProperty(this.__transformProperty,displayObject.__renderTransform.to3DString(this.__roundPixels),null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		object.__renderDOM(this);
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\n\t\tif (color.a == 0.0) {\n\t\t\t\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t} else if (openfl_HasColorTransform) {\n\t\t\t\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\t\t\t\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\t\t\t\n\t\t\tif (color.a > 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tif (openfl_HasColorTransform) {\n\t\t\t\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t\t\n\t\t}\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = ["openfl","display","DisplayObjectShader"];
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_display_DisplayObjectShader
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__displayAsPassword: null
	,__domRender: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__mouseWheelEnabled: null
	,__offsetX: null
	,__offsetY: null
	,__selectionIndex: null
	,__showCursor: null
	,__symbol: null
	,__text: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,__renderedOnCanvasWhileOnDOM: null
	,__rawHtmlText: null
	,__forceCachedBitmapUpdate: null
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__stopCursorTimer();
		this.__startCursorTimer();
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		if(this.__selectionIndex == this.__caretIndex || this.__caretIndex < this.__selectionIndex) {
			this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
		} else {
			this.__selectionIndex = this.getLineOffset(this.getLineIndexOfChar(this.__selectionIndex));
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex;
		if(this.__selectionIndex == this.__caretIndex) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		} else {
			lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex,this.__selectionIndex)));
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex < this.__textEngine.numLines - 1) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex + 1);
		} else {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function(lineIndex,caretIndex) {
		if(lineIndex == null) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		}
		if(lineIndex > 0) {
			if(caretIndex == null) {
				caretIndex = this.__caretIndex;
			}
			this.__caretIndex = this.__getCharIndexOnDifferentLine(caretIndex,lineIndex - 1);
		} else {
			this.__caretIndex = 0;
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.set_textInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.set_textInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.set_textInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		this.set_width(symbol.width);
		this.set_height(symbol.height);
		this.__offsetX = symbol.x;
		this.__offsetY = symbol.y;
		this.set_multiline(symbol.multiline);
		this.set_wordWrap(symbol.wordWrap);
		this.set_displayAsPassword(symbol.password);
		if(symbol.border) {
			this.set_border(true);
			this.set_background(true);
		}
		this.set_selectable(symbol.selectable);
		if(symbol.input) {
			this.set_type(1);
		}
		var format = new openfl_text_TextFormat();
		if(symbol.color != null) {
			format.color = symbol.color & 16777215;
		}
		format.size = Math.round(symbol.fontHeight / 20);
		var font = swf.symbols.get(symbol.fontID);
		if(font != null) {
			format.__ascent = font.ascent / 20 / 1024;
			format.__descent = font.descent / 20 / 1024;
		}
		format.font = symbol.fontName;
		var found = false;
		var _g = format.font;
		if(_g == null) {
			found = true;
		} else {
			switch(_g) {
			case "":case "_sans":case "_serif":case "_typewriter":
				found = true;
				break;
			default:
				var _g1 = 0;
				var _g11 = openfl_text_Font.enumerateFonts();
				while(_g1 < _g11.length) {
					var font1 = _g11[_g1];
					++_g1;
					if(font1.get_fontName() == format.font) {
						found = true;
						break;
					}
				}
			}
		}
		if(!found) {
			var alpha = new EReg("[^a-zA-Z]+","g");
			var _g12 = 0;
			var _g2 = openfl_text_Font.enumerateFonts();
			while(_g12 < _g2.length) {
				var font2 = _g2[_g12];
				++_g12;
				if(HxOverrides.substr(alpha.replace(font2.get_fontName(),""),0,symbol.fontName.length) == symbol.fontName) {
					format.font = font2.get_fontName();
					found = true;
					break;
				}
			}
		}
		if(found) {
			this.set_embedFonts(true);
		} else if(!openfl_text_TextField.__missingFontWarning.exists(format.font)) {
			openfl_text_TextField.__missingFontWarning.set(format.font,true);
			lime_utils_Log.warn("Could not find required font \"" + format.font + "\", it has not been embedded",{ fileName : "TextField.hx", lineNumber : 1668, className : "openfl.text.TextField", methodName : "__fromSymbol"});
		}
		if(symbol.align != null) {
			if(symbol.align == "center") {
				format.align = 0;
			} else if(symbol.align == "right") {
				format.align = 4;
			} else if(symbol.align == "justify") {
				format.align = 2;
			}
			format.leftMargin = Std["int"](symbol.leftMargin / 20);
			format.rightMargin = Std["int"](symbol.rightMargin / 20);
			format.indent = Std["int"](symbol.indent / 20);
			format.leading = Std["int"](symbol.leading / 20);
		}
		this.set_defaultTextFormat(format);
		if(symbol.text != null) {
			if(symbol.html) {
				this.set_htmlText(symbol.text);
			} else {
				this.set_text(symbol.text);
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		matrix.tx += this.__offsetX;
		matrix.ty += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) - 1) {
			return false;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				try {
					var x = group.offsetX;
					var _g3 = 0;
					var _g2 = charIndex - group.startIndex;
					while(_g3 < _g2) {
						var i = _g3++;
						x += group.getAdvance(i);
					}
					var lastPosition = group.getAdvance(charIndex - group.startIndex);
					rect.setTo(x,group.offsetY,lastPosition,group.ascent + group.descent);
					return true;
				} catch( e ) {
					haxe_CallStack.lastException = e;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.get_length()) {
			var group = _g1.get(_g);
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.getAdvance(i);
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group.lineIndex == lineIndex) {
				y = group.offsetY + group.height / 2;
				var _g31 = 0;
				var _g21 = this.get_scrollV() - 1;
				while(_g31 < _g21) {
					var i1 = _g31++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return lime_ui_MouseCursor.POINTER;
		} else if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.get_length();
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups.get(i1);
			if(i1 < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i1 + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var advance = 0.0;
		var _g1 = 0;
		var _g = group.positions.length;
		while(_g1 < _g) {
			var i = _g1++;
			advance += group.getAdvance(i);
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.getAdvance(i)) + group.getAdvance(i) / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var px = this.__renderTransform.__transformInverseX(x,y);
		var py = this.__renderTransform.__transformInverseY(x,y);
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderer) {
	}
	,__renderCanvas: function(renderer) {
		if(renderer.__isDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__renderedOnCanvasWhileOnDOM = true;
			if(this.get_type() == 1) {
				this.replaceText(0,lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text),this.__text);
			}
			if(this.__isHTML) {
				this.__updateText(openfl__$internal_formats_html_HTMLParser.parse(this.__text,this.__textFormat,this.__textEngine.textFormatRanges));
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		if(this.get_mask() == null || this.get_mask().get_width() > 0 && this.get_mask().get_height() > 0) {
			this.__updateCacheBitmap(renderer,false);
			if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
				openfl__$internal_renderer_canvas_CanvasBitmap.render(this.__cacheBitmap,renderer);
			} else {
				openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderer,this.__worldTransform);
				var smoothingEnabled = false;
				if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
					smoothingEnabled = renderer.context.imageSmoothingEnabled;
					if(smoothingEnabled) {
						renderer.context.imageSmoothingEnabled = false;
					}
				}
				openfl__$internal_renderer_canvas_CanvasDisplayObject.render(this,renderer);
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = true;
				}
			}
		}
	}
	,__renderDOM: function(renderer) {
		this.__domRender = true;
		this.__updateCacheBitmap(renderer,this.__forceCachedBitmapUpdate);
		this.__forceCachedBitmapUpdate = false;
		this.__domRender = false;
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			this.__renderDOMClear(renderer);
			this.__cacheBitmap.stage = this.stage;
			openfl__$internal_renderer_dom_DOMBitmap.render(this.__cacheBitmap,renderer);
		} else {
			if(this.__renderedOnCanvasWhileOnDOM) {
				this.__renderedOnCanvasWhileOnDOM = false;
				if(this.__isHTML && this.__rawHtmlText != null) {
					this.__updateText(this.__rawHtmlText);
					this.__dirty = true;
					this.__layoutDirty = true;
					this.__setRenderDirty();
				}
			}
			openfl__$internal_renderer_dom_DOMTextField.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderDOMClear: function(renderer) {
		openfl__$internal_renderer_dom_DOMTextField.clear(this,renderer);
	}
	,__renderGL: function(renderer) {
		this.__updateCacheBitmap(renderer,false);
		if(this.__cacheBitmap != null && !this.__isCacheBitmapRender) {
			openfl__$internal_renderer_context3D_Context3DBitmap.render(this.__cacheBitmap,renderer);
		} else {
			openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderer.__softwareRenderer,this.__worldTransform);
			openfl__$internal_renderer_context3D_Context3DDisplayObject.render(this,renderer);
		}
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		openfl__$internal_renderer_canvas_CanvasTextField.render(this,renderer.__softwareRenderer,this.__worldTransform);
		openfl_display_InteractiveObject.prototype.__renderGLMask.call(this,renderer);
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			startIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
		var i = startIndex + lime_text__$UTF8String_UTF8String_$Impl_$.get_length(js_Boot.__cast(value , String));
		if(i > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			i = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		this.setSelection(i,i);
		this.__updateScrollH();
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,0,beginIndex) + newText + lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,endIndex));
		if(endIndex > lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
			endIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				if(i > 0) {
					this.__textEngine.textFormatRanges.splice(i,1);
				} else {
					range.start = 0;
					range.end = beginIndex + newText.length;
					++i;
				}
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__updateScrollH();
		this.__dirty = true;
		this.__layoutDirty = true;
		this.__setRenderDirty();
	}
	,__shouldCacheHardware: function(value) {
		if(value == true) {
			return true;
		} else {
			return false;
		}
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
		this.__setRenderDirty();
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			this.__setRenderDirty();
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateCacheBitmap: function(renderer,force) {
		if(this.__filters == null && renderer.__type == "opengl" && this.__cacheBitmap == null && !this.__domRender) {
			return false;
		}
		if(openfl_display_InteractiveObject.prototype.__updateCacheBitmap.call(this,renderer,force || this.__dirty)) {
			if(this.__cacheBitmap != null) {
				this.__cacheBitmap.__renderTransform.tx -= this.__offsetX;
				this.__cacheBitmap.__renderTransform.ty -= this.__offsetY;
			}
			return true;
		}
		return false;
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			var cacheHeight = this.__textEngine.height;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					var _g = this.__textEngine.autoSize;
					switch(_g) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g2 = this;
						_g2.set_x(_g2.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,__updateScrollH: function() {
		if(!this.get_multiline() && this.get_type() == 1) {
			this.__layoutDirty = true;
			this.__updateLayout();
			var offsetX = this.__textEngine.textWidth - this.__textEngine.width + 4;
			if(offsetX > 0) {
				if(this.__caretIndex >= lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text())) {
					this.set_scrollH(Math.ceil(offsetX));
				} else {
					var caret = openfl_geom_Rectangle.__pool.get();
					this.__getCharBoundaries(this.__caretIndex,caret);
					if(caret.x < this.get_scrollH()) {
						this.set_scrollH(Math.floor(caret.x - 2));
					} else if(caret.x > this.get_scrollH() + this.__textEngine.width) {
						this.set_scrollH(Math.ceil(caret.x - this.__textEngine.width - 2));
					}
					openfl_geom_Rectangle.__pool.release(caret);
				}
			} else {
				this.set_scrollH(0);
			}
		}
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text) < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.get_text());
			var mask = "";
			var _g1 = 0;
			var _g = length;
			while(_g1 < _g) {
				var i = _g1++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		this.__renderTransform.__translateTransformed(this.__offsetX,this.__offsetY);
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.background = value;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.border = value;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		this.__setRenderDirty();
		return value;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl__$internal_formats_html_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.get_length() > 1) {
				this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
			}
			var range = this.__textEngine.textFormatRanges.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		return value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			this.__setRenderDirty();
		}
		return this.__textEngine.multiline = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			this.__setRenderDirty();
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(utfValue);
		this.__isHTML = false;
		this.__updateText(value);
		return value;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.get_length()) {
			var range = _g1.get(_g);
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__setRenderDirty();
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
				} else {
					this.__dirty = true;
					this.__setRenderDirty();
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var px = this.__worldTransform.__transformInverseX(this.get_x(),this.get_y());
			var py = this.__worldTransform.__transformInverseY(this.get_x(),this.get_y());
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Std["int"](Math.min(this.__selectionIndex,upPos));
			rightPos = Std["int"](Math.max(this.__selectionIndex,upPos));
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !Std["is"](event.relatedObject,openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			if(this.stage != null) {
				this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			}
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			this.__setRenderDirty();
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			this.__setRenderDirty();
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
					this.__caretIndex = lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text);
					this.__selectionIndex = 0;
				}
			}
			break;
		case 99:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(lime_text__$UTF8String_UTF8String_$Impl_$.substring(this.__text,this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < lime_text__$UTF8String_UTF8String_$Impl_$.get_length(this.__text)) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				this.__caretBeginningOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				this.__caretEndOfLine();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
					this.__caretEndOfLine();
					if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretNextCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextCharacter();
					} else {
						this.__caretIndex = Std["int"](Math.max(this.__caretIndex,this.__selectionIndex));
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier)) {
					this.__caretBeginningOfLine();
					if(!lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
						this.__selectionIndex = this.__caretIndex;
					}
				} else if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretPreviousCharacter();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousCharacter();
					} else {
						this.__caretIndex = Std["int"](Math.min(this.__caretIndex,this.__selectionIndex));
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__updateScrollH();
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretNextLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretNextLine();
					} else {
						var lineIndex = this.getLineIndexOfChar(Std["int"](Math.max(this.__caretIndex,this.__selectionIndex)));
						this.__caretNextLine(lineIndex,Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(!this.__textEngine.multiline) {
					return;
				}
				if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
					this.__caretPreviousLine();
				} else {
					if(this.__selectionIndex == this.__caretIndex) {
						this.__caretPreviousLine();
					} else {
						var lineIndex1 = this.getLineIndexOfChar(Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
						this.__caretPreviousLine(lineIndex1,Std["int"](Math.min(this.__caretIndex,this.__selectionIndex)));
					}
					this.__selectionIndex = this.__caretIndex;
				}
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",set_type:"set_type",get_type:"get_type",set_textColor:"set_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_selectable:"get_selectable",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_multiline:"set_multiline",get_multiline:"get_multiline",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_embedFonts:"set_embedFonts",set_displayAsPassword:"set_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_border:"set_border",set_background:"set_background"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) {
		color = 0;
	}
	if(y == null) {
		y = 10;
	}
	if(x == null) {
		x = 10;
	}
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,this_onEnterFrame: function(event) {
		var currentTime = haxe_Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) {
			this.set_text("FPS: " + this.currentFPS);
		}
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl__$internal_renderer_ShaderBuffer();
	});
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__bounds: null
	,__commands: null
	,__dirty: null
	,__height: null
	,__positionX: null
	,__positionY: null
	,__quadBuffer: null
	,__renderTransform: null
	,__shaderBufferPool: null
	,__strokePadding: null
	,__transformDirty: null
	,__triangleIndexBuffer: null
	,__triangleIndexBufferCount: null
	,__triangleIndexBufferData: null
	,__usedShaderBuffers: null
	,__vertexBuffer: null
	,__vertexBufferCount: null
	,__vertexBufferCountUVT: null
	,__vertexBufferData: null
	,__vertexBufferDataUVT: null
	,__vertexBufferUVT: null
	,__visible: null
	,__owner: null
	,__width: null
	,__worldTransform: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g1 = 0;
			var _g = colors.length;
			while(_g1 < _g) {
				var i = _g1++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g11 = 0;
			var _g2 = colors.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				ratios.push(Math.ceil(i1 / colors.length * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g3 = 0;
		while(_g3 < alphas.length) {
			var alpha = alphas[_g3];
			++_g3;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		var shaderBuffer = this.__usedShaderBuffers.iterator();
		while(shaderBuffer.hasNext()) {
			var shaderBuffer1 = shaderBuffer.next();
			this.__shaderBufferPool.release(shaderBuffer1);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null ? sourceGraphics.__bounds.clone() : null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var px = matrix.__transformInverseX(x,y);
		var py = matrix.__transformInverseY(x,y);
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__update: function(displayMatrix) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		if(displayMatrix != null) {
			if(displayMatrix.b == 0) {
				scaleX *= displayMatrix.a;
			} else {
				scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
			}
			if(displayMatrix.c == 0) {
				scaleY *= displayMatrix.d;
			} else {
				scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.floor(tx);
		this.__worldTransform.ty = Math.floor(ty);
		this.__renderTransform.tx = this.__worldTransform.__transformInverseX(tx,ty);
		this.__renderTransform.ty = this.__worldTransform.__transformInverseY(tx,ty);
		var newWidth = Math.ceil(width + this.__renderTransform.tx);
		var newHeight = Math.ceil(height + this.__renderTransform.ty);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			this.__owner.__setRenderDirty();
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\t\t\n\t\tif (color.a == 0.0) {\n\t\t\t\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\n\t\t} else if (openfl_HasColorTransform) {\n\t\t\t\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\t\t\t\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\t\t\t\n\t\t\tif (color.a > 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\t\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\t\t\t\n\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tif (openfl_HasColorTransform) {\n\t\t\t\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\t\t\t\n\t\t}\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = ["openfl","display","GraphicsShader"];
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Alpha: null
	,openfl_ColorMultiplier: null
	,openfl_ColorOffset: null
	,openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_HasColorTransform: null
	,openfl_TextureSize: null
	,bitmap: null
	,__class__: openfl_display_GraphicsShader
});
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	contentLoaderInfo: null
	,uncaughtErrorEvents: null
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,loader: null
	,parameters: null
	,uncaughtErrorEvents: null
	,url: null
	,__completed: null
	,__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 1;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
	if(openfl_display_MovieClip.__initSymbol != null) {
		this.__swf = openfl_display_MovieClip.__initSWF;
		this.__symbol = openfl_display_MovieClip.__initSymbol;
		openfl_display_MovieClip.__initSWF = null;
		openfl_display_MovieClip.__initSymbol = null;
		this.__fromSymbol(this.__swf,this.__symbol);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__activeInstances: null
	,__activeInstancesByFrameObjectID: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__frameTime: null
	,__hasDown: null
	,__hasOver: null
	,__hasUp: null
	,__lastFrameScriptEval: null
	,__lastFrameUpdate: null
	,__mouseIsDown: null
	,__playing: null
	,__swf: null
	,__symbol: null
	,__timeElapsed: null
	,__totalFrames: null
	,gotoAndPlay: function(frame,scene) {
		this.play();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,gotoAndStop: function(frame,scene) {
		this.stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,play: function() {
		if(this.__symbol == null || this.__playing || this.__totalFrames < 2) {
			return;
		}
		this.__playing = true;
		this.__frameTime = Std["int"](1000 / this.__swf.frameRate);
		this.__timeElapsed = 0;
	}
	,stop: function() {
		this.__playing = false;
	}
	,__enterFrame: function(deltaTime) {
		if(this.__symbol != null && this.__playing) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		if(this.__symbol != null && this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			var currentInstancesByFrameObjectID = new haxe_ds_IntMap();
			var frame;
			var frameData;
			var instance;
			var _g1 = 0;
			var _g = this.__currentFrame;
			while(_g1 < _g) {
				var i = _g1++;
				frame = i + 1;
				frameData = this.__symbol.frames[i];
				if(frameData.objects == null) {
					continue;
				}
				var _g2 = 0;
				var _g3 = frameData.objects;
				while(_g2 < _g3.length) {
					var frameObject = _g3[_g2];
					++_g2;
					var _g4 = frameObject.type;
					switch(Type.enumIndex(_g4)) {
					case 0:
						instance = this.__activeInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null) {
							currentInstancesByFrameObjectID.set(frameObject.id,instance);
							this.__updateDisplayObject(instance.displayObject,frameObject,true);
						}
						break;
					case 1:
						instance = currentInstancesByFrameObjectID.get(frameObject.id);
						if(instance != null && instance.displayObject != null) {
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
						break;
					case 2:
						currentInstancesByFrameObjectID.remove(frameObject.id);
						break;
					}
				}
			}
			var currentInstances = [];
			var currentMasks = [];
			var instance1 = currentInstancesByFrameObjectID.iterator();
			while(instance1.hasNext()) {
				var instance2 = instance1.next();
				if(currentInstances.indexOf(instance2) == -1) {
					currentInstances.push(instance2);
					if(instance2.clipDepth > 0) {
						currentMasks.push(instance2);
					}
				}
			}
			currentInstances.sort($bind(this,this.__sortDepths));
			var existingChild;
			var targetDepth;
			var targetChild;
			var child;
			var maskApplied;
			var _g11 = 0;
			var _g5 = currentInstances.length;
			while(_g11 < _g5) {
				var i1 = _g11++;
				existingChild = this.__children[i1];
				instance = currentInstances[i1];
				targetDepth = instance.depth;
				targetChild = instance.displayObject;
				if(existingChild != targetChild) {
					child = targetChild;
					this.addChildAt(targetChild,i1);
				} else {
					child = this.__children[i1];
				}
				maskApplied = false;
				var _g21 = 0;
				while(_g21 < currentMasks.length) {
					var mask = currentMasks[_g21];
					++_g21;
					if(targetDepth > mask.depth && targetDepth <= mask.clipDepth) {
						child.set_mask(mask.displayObject);
						maskApplied = true;
						break;
					}
				}
				if(currentMasks.length > 0 && !maskApplied && child.get_mask() != null) {
					child.set_mask(null);
				}
			}
			var child1;
			var i2 = currentInstances.length;
			var length = this.__children.length;
			while(i2 < length) {
				child1 = this.__children[i2];
				var _g6 = 0;
				var _g12 = this.__activeInstances;
				while(_g6 < _g12.length) {
					var instance3 = _g12[_g6];
					++_g6;
					if(instance3.displayObject == child1) {
						if(Std["is"](child1,openfl_display_MovieClip)) {
							var movie = child1;
							movie.gotoAndPlay(1);
						}
						this.removeChild(child1);
						--i2;
						--length;
					}
				}
				++i2;
			}
			this.__lastFrameUpdate = this.__currentFrame;
		}
		openfl_display_Sprite.prototype.__enterFrame.call(this,deltaTime);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		var _g1 = this.__currentFrame;
		var _g = advanceToFrame + 1;
		while(_g1 < _g) {
			var frame = _g1++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.exists(frame)) {
				var script = this.__frameScripts.get(frame);
				script();
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__playing) {
				break;
			}
		}
		return true;
	}
	,__fromSymbol: function(swf,symbol) {
		var _gthis = this;
		if(this.__activeInstances != null) {
			return;
		}
		this.__swf = swf;
		this.__symbol = symbol;
		this.__activeInstances = [];
		this.__activeInstancesByFrameObjectID = new haxe_ds_IntMap();
		this.__currentFrame = 1;
		this.__lastFrameScriptEval = -1;
		this.__lastFrameUpdate = -1;
		this.__totalFrames = this.__symbol.frames.length;
		var frame;
		var frameData;
		var _g1 = 0;
		var _g = this.__symbol.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			frame = i + 1;
			frameData = this.__symbol.frames[i];
			if(frameData.label != null) {
				this.__currentLabels.push(new openfl_display_FrameLabel(frameData.label,i + 1));
			}
			if(frameData.script != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				this.__frameScripts.set(frame,frameData.script);
			} else if(frameData.scriptSource != null) {
				if(this.__frameScripts == null) {
					this.__frameScripts = new haxe_ds_IntMap();
				}
				try {
					var script = [eval("(function(){" + frameData.scriptSource + "})")];
					var wrapper = (function(script1) {
						return function() {
							try {
								script1[0].call(_gthis);
							} catch( e ) {
								haxe_CallStack.lastException = e;
								if (e instanceof js__$Boot_HaxeError) e = e.val;
								haxe_Log.trace("Error evaluating frame script\n " + Std.string(e) + "\n" + haxe_CallStack.exceptionStack().map((function() {
									return function(a) {
										return a[2];
									};
								})()).join("\n") + "\n" + Std.string(e.stack) + "\n" + script1[0].toString(),{ fileName : "MovieClip.hx", lineNumber : 699, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
							}
						};
					})(script);
					this.__frameScripts.set(frame,wrapper);
				} catch( e1 ) {
					haxe_CallStack.lastException = e1;
					if(this.__symbol.className != null) {
						lime_utils_Log.warn("Unable to evaluate frame script source for symbol \"" + this.__symbol.className + "\" frame " + frame + "\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 715, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					} else {
						lime_utils_Log.warn("Unable to evaluate frame script source:\n" + frameData.scriptSource,{ fileName : "MovieClip.hx", lineNumber : 719, className : "openfl.display.MovieClip", methodName : "__fromSymbol"});
					}
				}
			}
		}
		var frame1;
		var frameData1;
		var instance;
		var duplicate;
		var symbol1;
		var displayObject;
		var _g11 = 0;
		var _g2 = this.__totalFrames;
		while(_g11 < _g2) {
			var i1 = _g11++;
			frame1 = i1 + 1;
			frameData1 = this.__symbol.frames[i1];
			if(frameData1.objects == null) {
				continue;
			}
			var _g21 = 0;
			var _g3 = frameData1.objects;
			while(_g21 < _g3.length) {
				var frameObject = _g3[_g21];
				++_g21;
				if(frameObject.type == openfl__$internal_symbols_timeline_FrameObjectType.CREATE) {
					if(this.__activeInstancesByFrameObjectID.exists(frameObject.id)) {
						continue;
					} else {
						instance = null;
						duplicate = false;
						var _g4 = 0;
						var _g5 = this.__activeInstances;
						while(_g4 < _g5.length) {
							var activeInstance = _g5[_g4];
							++_g4;
							if(activeInstance.displayObject != null && activeInstance.characterID == frameObject.symbol && activeInstance.depth == frameObject.depth) {
								instance = activeInstance;
								duplicate = true;
								break;
							}
						}
					}
					if(instance == null) {
						symbol1 = this.__swf.symbols.get(frameObject.symbol);
						if(symbol1 != null) {
							displayObject = symbol1.__createObject(this.__swf);
							if(displayObject != null) {
								displayObject.parent = this;
								displayObject.stage = this.stage;
								if(this.stage != null) {
									displayObject.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
								}
								instance = new openfl_display__$MovieClip_FrameSymbolInstance(frame1,frameObject.id,frameObject.symbol,frameObject.depth,displayObject,frameObject.clipDepth);
							}
						}
					}
					if(instance != null) {
						this.__activeInstancesByFrameObjectID.set(frameObject.id,instance);
						if(!duplicate) {
							this.__activeInstances.push(instance);
							this.__updateDisplayObject(instance.displayObject,frameObject);
						}
					}
				}
			}
		}
		if(this.__totalFrames > 1) {
			this.play();
		}
		this.__enterFrame(0);
		var _g6 = 0;
		var _g12 = Type.getInstanceFields(Type.getClass(this));
		while(_g6 < _g12.length) {
			var field = _g12[_g6];
			++_g6;
			var _g22 = 0;
			var _g31 = this.__children;
			while(_g22 < _g31.length) {
				var child = _g31[_g22];
				++_g22;
				if(child.get_name() == field) {
					Reflect.setField(this,field,child);
				}
			}
		}
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		this.__timeElapsed += deltaTime;
		nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
		if(nextFrame < 1) {
			nextFrame = 1;
		}
		if(nextFrame > this.__totalFrames) {
			nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
		}
		this.__timeElapsed %= this.__frameTime;
		return nextFrame;
	}
	,__goto: function(frame) {
		if(this.__symbol == null) {
			return;
		}
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__currentFrame = frame;
		this.__enterFrame(0);
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.get_name() == label) {
					return frameLabel.get_frame();
				}
			}
			throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw new js__$Boot_HaxeError("Invalid type for frame " + Type.getClassName(frame));
		}
	}
	,__sortDepths: function(a,b) {
		return a.depth - b.depth;
	}
	,__updateDisplayObject: function(displayObject,frameObject,reset) {
		if(reset == null) {
			reset = false;
		}
		if(displayObject == null) {
			return;
		}
		if(frameObject.name != null) {
			displayObject.set_name(frameObject.name);
		}
		if(frameObject.matrix != null) {
			displayObject.get_transform().set_matrix(frameObject.matrix);
		}
		if(frameObject.colorTransform != null) {
			displayObject.get_transform().set_colorTransform(frameObject.colorTransform);
		} else if(reset && !displayObject.get_transform().get_colorTransform().__isDefault()) {
			displayObject.get_transform().set_colorTransform(new openfl_geom_ColorTransform());
		}
		if(frameObject.filters != null) {
			var filters = [];
			var _g = 0;
			var _g1 = frameObject.filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				switch(Type.enumIndex(filter)) {
				case 0:
					var quality = filter[4];
					var blurY = filter[3];
					var blurX = filter[2];
					filters.push(new openfl_filters_BlurFilter(blurX,blurY,quality));
					break;
				case 1:
					var matrix = filter[2];
					filters.push(new openfl_filters_ColorMatrixFilter(matrix));
					break;
				case 2:
					var hideObject = filter[12];
					var knockout = filter[11];
					var inner = filter[10];
					var quality1 = filter[9];
					var strength = filter[8];
					var blurY1 = filter[7];
					var blurX1 = filter[6];
					var alpha = filter[5];
					var color = filter[4];
					var angle = filter[3];
					var distance = filter[2];
					filters.push(new openfl_filters_DropShadowFilter(distance,angle,color,alpha,blurX1,blurY1,strength,quality1,inner,knockout,hideObject));
					break;
				case 3:
					var knockout1 = filter[9];
					var inner1 = filter[8];
					var quality2 = filter[7];
					var strength1 = filter[6];
					var blurY2 = filter[5];
					var blurX2 = filter[4];
					var alpha1 = filter[3];
					var color1 = filter[2];
					filters.push(new openfl_filters_GlowFilter(color1,alpha1,blurX2,blurY2,strength1,quality2,inner1,knockout1));
					break;
				}
			}
			displayObject.set_filters(filters);
		} else {
			displayObject.set_filters(null);
		}
		if(frameObject.visible != null) {
			displayObject.set_visible(frameObject.visible);
		}
		if(frameObject.blendMode != null) {
			displayObject.set_blendMode(frameObject.blendMode);
		}
		var tmp = frameObject.cacheAsBitmap != null;
	}
	,__updateFrameLabel: function() {
		this.__currentFrameLabel = this.__symbol.frames[this.__currentFrame - 1].label;
		if(this.__currentFrameLabel != null) {
			this.__currentLabel = this.__currentFrameLabel;
		} else {
			this.__currentLabel = null;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var label = _g1[_g];
				++_g;
				if(label.get_frame() < this.__currentFrame) {
					this.__currentLabel = label.get_name();
				} else {
					break;
				}
			}
		}
	}
	,__onMouseDown: function(event) {
		if(this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp));
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(event.currentTarget == this && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.__currentLabels;
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					var _g2 = frameLabel.get_name();
					switch(_g2) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseUp",$bind(this,this.__onMouseUp));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,__class__: openfl_display_MovieClip
});
var openfl_display__$MovieClip_FrameSymbolInstance = function(initFrame,initFrameObjectID,characterID,depth,displayObject,clipDepth) {
	this.initFrame = initFrame;
	this.initFrameObjectID = initFrameObjectID;
	this.characterID = characterID;
	this.depth = depth;
	this.displayObject = displayObject;
	this.clipDepth = clipDepth;
};
$hxClasses["openfl.display._MovieClip.FrameSymbolInstance"] = openfl_display__$MovieClip_FrameSymbolInstance;
openfl_display__$MovieClip_FrameSymbolInstance.__name__ = ["openfl","display","_MovieClip","FrameSymbolInstance"];
openfl_display__$MovieClip_FrameSymbolInstance.prototype = {
	characterID: null
	,clipDepth: null
	,depth: null
	,displayObject: null
	,initFrame: null
	,initFrameObjectID: null
	,__class__: openfl_display__$MovieClip_FrameSymbolInstance
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__projectionFlipped = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl__$internal_renderer_context3D_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = ["openfl","display","OpenGLRenderer"];
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	gl: null
	,__context3D: null
	,__clipRects: null
	,__currentDisplayShader: null
	,__currentGraphicsShader: null
	,__currentShader: null
	,__currentShaderBuffer: null
	,__defaultDisplayShader: null
	,__defaultGraphicsShader: null
	,__defaultRenderTarget: null
	,__defaultShader: null
	,__displayHeight: null
	,__displayWidth: null
	,__flipped: null
	,__gl: null
	,__height: null
	,__maskShader: null
	,__matrix: null
	,__maskObjects: null
	,__numClipRects: null
	,__offsetX: null
	,__offsetY: null
	,__projection: null
	,__projectionFlipped: null
	,__scrollRectMasks: null
	,__softwareRenderer: null
	,__stencilReference: null
	,__tempRect: null
	,__updatedStencil: null
	,__upscaled: null
	,__values: null
	,__width: null
	,applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault();
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math__$Matrix4_Matrix4_$Impl_$.identity(this.__matrix);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,0,_matrix.a);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,1,_matrix.b);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,4,_matrix.c);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,5,_matrix.d);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,12,_matrix.tx);
		lime_math__$Matrix4_Matrix4_$Impl_$.set(this.__matrix,13,_matrix.ty);
		lime_math__$Matrix4_Matrix4_$Impl_$.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			this.__values[i] = lime_math__$Matrix4_Matrix4_$Impl_$.get(this.__matrix,i);
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			mask.__renderGLMask(this);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		mask.__renderGLMask(this);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			object.__renderGL(this);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.clear(0,0,0,1,0,0,1);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.clear(0,0,0,1,0,0,1);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.clear(0,0,0,1,0,0,1);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.clear(0,0,0,1,0,0,1);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			object.__renderGL(this);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		this.__offsetX = this.__defaultRenderTarget == null ? Math.round(this.__worldTransform.__transformX(0,0)) : 0;
		this.__offsetY = this.__defaultRenderTarget == null ? Math.round(this.__worldTransform.__transformY(0,0)) : 0;
		this.__displayWidth = this.__defaultRenderTarget == null ? Math.round(this.__worldTransform.__transformX(w,0) - this.__offsetX) : w;
		this.__displayHeight = this.__defaultRenderTarget == null ? Math.round(this.__worldTransform.__transformY(0,h) - this.__offsetY) : h;
		lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.__projection,this.__offsetX,this.__displayWidth + this.__offsetX,this.__offsetY,this.__displayHeight + this.__offsetY,-1000,1000);
		lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho(this.__projectionFlipped,this.__offsetX,this.__displayWidth + this.__offsetX,this.__displayHeight + this.__offsetY,this.__offsetY,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_Preloader = $hx_exports["openfl"]["display"]["Preloader"] = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
		haxe_Log.trace("start",{ fileName : "Preloader.hx", lineNumber : 39, className : "openfl.display.Preloader", methodName : "new"});
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.prototype = {
	onComplete: null
	,complete: null
	,display: null
	,ready: null
	,start: function() {
		this.ready = true;
		haxe_Log.trace("finish",{ fileName : "Preloader.hx", lineNumber : 55, className : "openfl.display.Preloader", methodName : "start"});
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = ["openfl","display","DefaultPreloader"];
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	endAnimation: null
	,outline: null
	,progress: null
	,startAnimation: null
	,getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Reflect.hasField(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.get_height();
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.get_width();
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(percent);
		this.progress.set_alpha(percent);
	}
	,this_onProgress: function(event) {
		this.onUpdate(Std["int"](event.bytesLoaded),Std["int"](event.bytesTotal));
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display__$ShaderData_ShaderData_$Impl_$ = {};
$hxClasses["openfl.display._ShaderData.ShaderData_Impl_"] = openfl_display__$ShaderData_ShaderData_$Impl_$;
openfl_display__$ShaderData_ShaderData_$Impl_$.__name__ = ["openfl","display","_ShaderData","ShaderData_Impl_"];
openfl_display__$ShaderData_ShaderData_$Impl_$._new = function(byteArray) {
	var this1 = { };
	return this1;
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = ["openfl","display","ShaderInput"];
openfl_display_ShaderInput.prototype = {
	channels: null
	,filter: null
	,height: null
	,index: null
	,input: null
	,mipFilter: null
	,name: null
	,width: null
	,wrap: null
	,__isUniform: null
	,__disableGL: function(context,id) {
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = ["openfl","display","ShaderParameter"];
openfl_display_ShaderParameter.prototype = {
	index: null
	,name: null
	,type: null
	,value: null
	,__arrayLength: null
	,__isBool: null
	,__isFloat: null
	,__isInt: null
	,__isUniform: null
	,__length: null
	,__uniformMatrix: null
	,__useArray: null
	,__disableGL: function(context) {
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g1 = 0;
			var _g = this.__arrayLength;
			while(_g1 < _g) {
				var i = _g1++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				var _g = this.type;
				switch(_g) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						this.__uniformMatrix[i] = floatValue[i];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g2 = 0;
					while(_g2 < 9) {
						var i1 = _g2++;
						this.__uniformMatrix[i1] = floatValue[i1];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g3 = 0;
					while(_g3 < 16) {
						var i2 = _g3++;
						this.__uniformMatrix[i2] = floatValue[i2];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				var _g4 = this.type;
				switch(_g4) {
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 12:
					var _g5 = 0;
					while(_g5 < 4) {
						var i3 = _g5++;
						this.__uniformMatrix[i3] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g6 = 0;
					while(_g6 < 9) {
						var i4 = _g6++;
						this.__uniformMatrix[i4] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g7 = 0;
					while(_g7 < 16) {
						var i5 = _g7++;
						this.__uniformMatrix[i5] = 0;
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g11 = 0;
			var _g8 = this.__arrayLength;
			while(_g11 < _g8) {
				var i6 = _g11++;
				gl.disableVertexAttribArray(this.index + i6);
			}
			if(value != null) {
				var _g9 = this.type;
				switch(_g9) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					var _g10 = 0;
					while(_g10 < 2) {
						var i7 = _g10++;
						gl.vertexAttrib2f(this.index + i7,floatValue[i7 * 2],floatValue[i7 * 2 + 1]);
					}
					break;
				case 16:
					var _g12 = 0;
					while(_g12 < 3) {
						var i8 = _g12++;
						gl.vertexAttrib3f(this.index + i8,floatValue[i8 * 3],floatValue[i8 * 3 + 1],floatValue[i8 * 3 + 2]);
					}
					break;
				case 20:
					var _g13 = 0;
					while(_g13 < 4) {
						var i9 = _g13++;
						gl.vertexAttrib4f(this.index + i9,floatValue[i9 * 4],floatValue[i9 * 4 + 1],floatValue[i9 * 4 + 2],floatValue[i9 * 4 + 3]);
					}
					break;
				default:
				}
			} else {
				var _g14 = this.type;
				switch(_g14) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					var _g15 = 0;
					while(_g15 < 2) {
						var i10 = _g15++;
						gl.vertexAttrib2f(this.index + i10,0,0);
					}
					break;
				case 16:
					var _g16 = 0;
					while(_g16 < 3) {
						var i11 = _g16++;
						gl.vertexAttrib3f(this.index + i11,0,0,0);
					}
					break;
				case 20:
					var _g17 = 0;
					while(_g17 < 4) {
						var i12 = _g17++;
						gl.vertexAttrib4f(this.index + i12,0,0,0,0);
					}
					break;
				default:
				}
			}
		} else {
			var _g18 = 0;
			var _g19 = this.__arrayLength;
			while(_g18 < _g19) {
				var i13 = _g18++;
				gl.enableVertexAttribArray(this.index + i13);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				var _g = this.type;
				switch(_g) {
				case 1:case 9:
					gl.uniform2i(this.index,Std["int"](buffer[position]),Std["int"](buffer[position + 1]));
					break;
				case 3:case 11:
					gl.uniform4i(this.index,Std["int"](buffer[position]),Std["int"](buffer[position + 1]),Std["int"](buffer[position + 2]),Std["int"](buffer[position + 3]));
					break;
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,Std["int"](buffer[position]));
					break;
				case 2:case 10:
					gl.uniform3i(this.index,Std["int"](buffer[position]),Std["int"](buffer[position + 1]),Std["int"](buffer[position + 2]));
					break;
				case 12:
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						this.__uniformMatrix[i] = buffer[position + i];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					var _g2 = 0;
					while(_g2 < 9) {
						var i1 = _g2++;
						this.__uniformMatrix[i1] = buffer[position + i1];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					var _g3 = 0;
					while(_g3 < 16) {
						var i2 = _g3++;
						this.__uniformMatrix[i2] = buffer[position + i2];
					}
					lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!StringTools.startsWith(this.name,"openfl_") && (length == 0 || length == this.__length)) {
			var _g11 = 0;
			var _g4 = this.__arrayLength;
			while(_g11 < _g4) {
				var i3 = _g11++;
				gl.disableVertexAttribArray(this.index + i3);
			}
			if(length > 0) {
				var _g5 = this.type;
				switch(_g5) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 12:
					var _g6 = 0;
					while(_g6 < 2) {
						var i4 = _g6++;
						gl.vertexAttrib2f(this.index + i4,buffer[position + i4 * 2],buffer[position + i4 * 2 + 1]);
					}
					break;
				case 16:
					var _g7 = 0;
					while(_g7 < 3) {
						var i5 = _g7++;
						gl.vertexAttrib3f(this.index + i5,buffer[position + i5 * 3],buffer[position + i5 * 3 + 1],buffer[position + i5 * 3 + 2]);
					}
					break;
				case 20:
					var _g8 = 0;
					while(_g8 < 4) {
						var i6 = _g8++;
						gl.vertexAttrib4f(this.index + i6,buffer[position + i6 * 4],buffer[position + i6 * 4 + 1],buffer[position + i6 * 4 + 2],buffer[position + i6 * 4 + 3]);
					}
					break;
				default:
				}
			} else {
				var _g9 = this.type;
				switch(_g9) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					var _g10 = 0;
					while(_g10 < 2) {
						var i7 = _g10++;
						gl.vertexAttrib2f(this.index + i7,0,0);
					}
					break;
				case 16:
					var _g12 = 0;
					while(_g12 < 3) {
						var i8 = _g12++;
						gl.vertexAttrib3f(this.index + i8,0,0,0);
					}
					break;
				case 20:
					var _g13 = 0;
					while(_g13 < 4) {
						var i9 = _g13++;
						gl.vertexAttrib4f(this.index + i9,0,0,0,0);
					}
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g14 = 0;
			var _g15 = this.__arrayLength;
			while(_g14 < _g15) {
				var i10 = _g14++;
				gl.enableVertexAttribArray(this.index + i10);
			}
			if(length > 0) {
				var _g16 = 0;
				var _g17 = this.__arrayLength;
				while(_g16 < _g17) {
					var i11 = _g16++;
					gl.vertexAttribPointer(this.index + i11,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i11 * this.__arrayLength) * 4);
				}
			}
		}
	}
	,__class__: openfl_display_ShaderParameter
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__initSymbol != null) {
		var swf = openfl_display_SimpleButton.__initSWF;
		this.__symbol = openfl_display_SimpleButton.__initSymbol;
		openfl_display_SimpleButton.__initSWF = null;
		openfl_display_SimpleButton.__initSymbol = null;
		this.__fromSymbol(swf,this.__symbol);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = ["openfl","display","SimpleButton"];
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	enabled: null
	,trackAsMenu: null
	,useHandCursor: null
	,__currentState: null
	,__downState: null
	,__hitTestState: null
	,__ignoreEvent: null
	,__overState: null
	,__previousStates: null
	,__symbol: null
	,__upState: null
	,__fromSymbol: function(swf,symbol) {
		this.__symbol = symbol;
		if(symbol.downState != null) {
			this.set_downState(symbol.downState.__createObject(swf));
		}
		if(symbol.hitState != null) {
			this.set_hitTestState(symbol.hitState.__createObject(swf));
		}
		if(symbol.overState != null) {
			this.set_overState(symbol.overState.__createObject(swf));
		}
		if(symbol.upState != null) {
			this.set_upState(symbol.upState.__createObject(swf));
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		openfl_display_DisplayObject.__calculateAbsoluteTransform(this.__currentState.__transform,matrix,childWorldTransform);
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = true;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__renderCairo: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCairo(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCairoMask: function(renderer) {
		this.__currentState.__renderCairoMask(renderer);
	}
	,__renderCanvas: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderCanvas(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderCanvasMask: function(renderer) {
		this.__currentState.__renderCanvasMask(renderer);
	}
	,__renderDOM: function(renderer) {
		renderer.__pushMaskObject(this);
		var _g = 0;
		var _g1 = this.__previousStates;
		while(_g < _g1.get_length()) {
			var previousState = _g1.get(_g);
			++_g;
			previousState.__renderDOM(renderer);
		}
		this.__previousStates.set_length(0);
		if(this.__currentState != null) {
			if(this.__currentState.stage != this.stage) {
				this.__currentState.__setStageReference(this.stage);
			}
			this.__currentState.__renderDOM(renderer);
		}
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGL: function(renderer) {
		if(!this.__renderable || this.__worldAlpha <= 0 || this.__currentState == null) {
			return;
		}
		renderer.__pushMaskObject(this);
		this.__currentState.__renderGL(renderer);
		renderer.__popMaskObject(this);
		this.__renderEvent(renderer);
	}
	,__renderGLMask: function(renderer) {
		if(this.__currentState == null) {
			return;
		}
		this.__currentState.__renderGLMask(renderer);
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,set_downState: function(downState) {
		if(this.__downState != null && this.__currentState == this.__downState) {
			this.set___currentState(this.__downState);
		}
		return this.__downState = downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			hitTestState.__setRenderDirty();
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,set_overState: function(overState) {
		if(this.__overState != null && this.__currentState == this.__overState) {
			this.set___currentState(overState);
		}
		return this.__overState = overState;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set_upState: function(upState) {
		if(this.__upState != null && this.__currentState == this.__upState) {
			this.set___currentState(upState);
		}
		return this.__upState = upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					this.__previousStates.splice(index,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				value.__setRenderDirty();
			}
			this.__setRenderDirty();
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		this.set___currentState(this.get_downState());
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",set_upState:"set_upState",get_upState:"get_upState",set_overState:"set_overState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",set_downState:"set_downState",get_downState:"get_downState"})
});
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__renderDirty = true;
	this.stage3Ds = openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.stage3Ds.push(new openfl_display_Stage3D(this));
	}
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	this.application = window.application;
	this.window = window;
	this.set_color(color);
	this.__contentsScaleFactor = window.get_scale();
	this.__wasFullscreen = window.get_fullscreen();
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,context3D: null
	,showDefaultContextMenu: null
	,softKeyboardRect: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__cacheFocus: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__contentsScaleFactor: null
	,__deltaTime: null
	,__displayMatrix: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__forceRender: null
	,__invalidated: null
	,__lastClickTime: null
	,__logicalWidth: null
	,__logicalHeight: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseOverTarget: null
	,__mouseX: null
	,__mouseY: null
	,__pendingMouseEvent: null
	,__pendingMouseX: null
	,__pendingMouseY: null
	,__primaryTouch: null
	,__quality: null
	,__renderer: null
	,__rendering: null
	,__rollOutStack: null
	,__scaleMode: null
	,__stack: null
	,__touchData: null
	,__transparent: null
	,__wasDirty: null
	,__wasFullscreen: null
	,onGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcastEvent(new openfl_events_Event("deactivate"));
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,Std["int"](x * window.get_scale()),Std["int"](y * window.get_scale()),button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = Std["int"](x * window.get_scale());
		this.__pendingMouseY = Std["int"](y * window.get_scale());
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,Std["int"](x * window.get_scale()),Std["int"](y * window.get_scale()),button);
		if(!this.showDefaultContextMenu && button == 2) {
			window.onMouseUp.cancel();
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(Std["int"](deltaX * window.get_scale()),Std["int"](deltaY * window.get_scale()),deltaMode);
		} else {
			this.__onMouseWheel(Std["int"](deltaX),Std["int"](deltaY),deltaMode);
		}
	}
	,onRenderContextLost: function() {
		this.__renderer = null;
	}
	,onRenderContextRestored: function(context) {
		this.__createRenderer();
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			window.onTextInput.cancel();
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		if(this.__primaryTouch == touch) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.context != null) {
			this.__createRenderer();
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowExpose: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__renderDirty = true;
		this.__broadcastEvent(new openfl_events_Event("activate"));
		this.set_focus(this.__cacheFocus);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__primaryTouch = null;
		this.__broadcastEvent(new openfl_events_Event("deactivate"));
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !window.get_fullscreen()) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,onWindowRestore: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__wasFullscreen && !window.get_fullscreen()) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,render: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			this.__broadcastEvent(new openfl_events_Event("render"));
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var _g = 0;
				var _g1 = this.stage3Ds;
				while(_g < _g1.get_length()) {
					var stage3D = _g1.get(_g);
					++_g;
					this.context3D.__renderStage3D(stage3D);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				this.window.onRender.cancel();
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					this.window.onRender.cancel();
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__addWindow: function(window) {
		if(this.window != window) {
			return;
		}
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1,false,-9000);
		var f2 = $bind(this,this.onWindowDeactivate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onDeactivate.add(tmp2);
		var f3 = $bind(this,this.onWindowDropFile);
		var a13 = window;
		var tmp3 = function(a2) {
			f3(a13,a2);
		};
		window.onDropFile.add(tmp3);
		var f4 = $bind(this,this.onWindowEnter);
		var a14 = window;
		var tmp4 = function() {
			f4(a14);
		};
		window.onEnter.add(tmp4);
		var f5 = $bind(this,this.onWindowExpose);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onExpose.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32,a4) {
			f17(a117,a25,a32,a4);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		window.onRender.add($bind(this,this.render));
		window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
		window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a41) {
			f21(a121,a27,a34,a41);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		this.onWindowCreate(window);
	}
	,__broadcastEvent: function(event) {
		if(openfl_display_DisplayObject.__broadcastEvents.exists(event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.get(event.type);
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if (e instanceof js__$Boot_HaxeError) e = e.val;
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var pixelRatio = 1;
		if(this.window.get_scale() > 1) {
			if(!this.window.devicePixelRatio) {
				pixelRatio = 1;
			} else {
				pixelRatio = true;
			}
		}
		var _g = this.window.context.type;
		switch(_g) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			(js_Boot.__cast(this.__renderer , openfl_display_CanvasRenderer)).pixelRatio = pixelRatio;
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			(js_Boot.__cast(this.__renderer , openfl_display_DOMRenderer)).pixelRatio = pixelRatio;
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(this.stageWidth,this.stageHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(Std["int"](this.window.get_width() * this.window.get_scale()),Std["int"](this.window.get_height() * this.window.get_scale()));
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g1 = 0;
				var _g = length - 1;
				while(_g1 < _g) {
					var i = _g1++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i1 = length - 2;
					while(i1 >= 0) {
						stack[i1].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i1;
					}
				}
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			parent.__getWorldTransform().__transformInversePoint(mouse);
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
		}
		if(!event.__preventDefault) {
			try {
				var exc = haxe_CallStack.lastException;
				if(exc != null && Reflect.hasField(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( e2 ) {
				haxe_CallStack.lastException = e2;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation = openfl_ui_Keyboard.__getKeyLocation(keyCode);
			var keyCode1 = openfl_ui_Keyboard.__convertKeyCode(keyCode);
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseX < 0 || this.__mouseY < 0 || this.__mouseX > this.stageWidth || this.__mouseY > this.stageHeight) {
					this.__dispatchEvent(openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this));
				} else if(this.__mouseDownLeft == target) {
					clickType = "click";
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		this.__dispatchStack(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
		if(clickType != null) {
			this.__dispatchStack(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__dispatchStack(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						this.window.set_cursor(cursor);
						break;
					}
				}
			}
			if(cursor == null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var _g1 = 0;
		var _g11 = this.__rollOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__rollOutStack,target2);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				event.bubbles = false;
				this.__dispatchTarget(target2,event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__rollOutStack.indexOf(target3) == -1 && this.__mouseOverTarget != null) {
				if(target3.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),target3);
					event.bubbles = false;
					this.__dispatchTarget(target3,event);
				}
				if(target3.hasEventListener("rollOut") || target3.hasEventListener("rollOver")) {
					this.__rollOutStack.push(target3);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack1 = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack1,true,this)) {
					dropTarget = stack1[stack1.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var delta = Std["int"](deltaY);
		this.__dispatchStack(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta),stack);
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.get_width() * this.window.get_scale()),Math.round(touch.y * this.window.get_height() * this.window.get_scale()));
		this.__displayMatrix.__transformInversePoint(targetPoint);
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.exists(touchId)) {
			touchData = this.__touchData.get(touchId);
		} else {
			touchData = openfl__$internal_utils_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.set(touchId,touchData);
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var _g = 0;
		while(_g < touchOutStack.length) {
			var target1 = touchOutStack[_g];
			++_g;
			if(stack.indexOf(target1) == -1) {
				HxOverrides.remove(touchOutStack,target1);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target1,touchEvent);
			}
		}
		var _g1 = 0;
		while(_g1 < stack.length) {
			var target2 = stack[_g1];
			++_g1;
			if(touchOutStack.indexOf(target2) == -1) {
				if(target2.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),target2);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(target2,touchEvent);
				}
				if(target2.hasEventListener("touchRollOut")) {
					touchOutStack.push(target2);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl__$internal_utils_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__addWindow));
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = Std["int"](this.window.get_width() * this.window.get_scale());
		var windowHeight = Std["int"](this.window.get_height() * this.window.get_scale());
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
			this.stageWidth = windowWidth;
			this.stageHeight = windowHeight;
		} else {
			this.stageWidth = this.__logicalWidth;
			this.stageHeight = this.__logicalHeight;
			var scaleX = windowWidth / this.stageWidth;
			var scaleY = windowHeight / this.stageHeight;
			var targetScale = Math.min(scaleX,scaleY);
			var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
			var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
			this.__displayMatrix.scale(targetScale,targetScale);
			this.__displayMatrix.translate(offsetX,offsetY);
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(this.stageWidth,this.stageHeight,0,true,true,true);
		}
		var _g = 0;
		var _g1 = this.stage3Ds;
		while(_g < _g1.get_length()) {
			var stage3D = _g1.get(_g);
			++_g;
			stage3D.__resize(this.stageWidth,this.stageHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__renderDirty = true;
			this.__setTransformDirty();
			this.__dispatchEvent(new openfl_events_Event("resize"));
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack1 = [];
				value.__getInteractive(stack1);
				stack1.reverse();
				this.__dispatchStack(event1,stack1);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.get_frameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.window != null) {
			return this.window.set_frameRate(value);
		}
		return value;
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleMode: function(value) {
		return this.__scaleMode = value;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_scaleMode:"set_scaleMode",get_quality:"get_quality",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_color:"set_color"})
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,__height: null
	,__indexBuffer: null
	,__projectionTransform: null
	,__renderTransform: null
	,__stage: null
	,__vertexBuffer: null
	,__width: null
	,__x: null
	,__y: null
	,__canvas: null
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			var tmp = this.__projectionTransform;
			var a = [2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0];
			var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
			var _g1 = 0;
			var _g = a.length;
			while(_g1 < _g) {
				var i = _g1++;
				vector.set(i,a[i]);
			}
			tmp.copyRawDataFrom(vector);
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,get_x: function() {
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {get_y:"get_y",get_x:"get_x"}
});
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Reflect.hasField(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Reflect.hasField(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	if(Reflect.hasField(attributes,"resizable") && !attributes.resizable) {
		this.stage.__setLogicalSize(attributes.width,attributes.height);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl__$internal_renderer_context3D_Context3DState();
	}
	this.__state = new openfl__$internal_renderer_context3D_Context3DState();
	var this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var this2 = new Float32Array(512);
	this.__fragmentConstants = this2;
	var array = [1.0,1.0,1.0,1.0];
	var this3;
	if(array != null) {
		this3 = new Float32Array(array);
	} else {
		this3 = null;
	}
	this.__positionScale = this3;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS == -1) {
		openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS;
	this.maxBackBufferHeight = openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS;
	if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Reflect.hasField(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Reflect.hasField(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = 0;
			openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0;
		}
	}
	if(openfl_display3D_Context3D.GL_DEPTH_STENCIL == -1) {
		openfl_display3D_Context3D.GL_DEPTH_STENCIL = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var this4;
	if(elements != null) {
		this4 = new Uint16Array(elements);
	} else {
		this4 = null;
	}
	var data = this4;
	var index = 0;
	var vertex = 0;
	var _g1 = 0;
	var _g = this.__quadIndexBufferElements;
	while(_g1 < _g) {
		var i = _g1++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	backBufferHeight: null
	,backBufferWidth: null
	,driverInfo: null
	,maxBackBufferHeight: null
	,maxBackBufferWidth: null
	,gl: null
	,__backBufferAntiAlias: null
	,__backBufferTexture: null
	,__backBufferWantsBestResolution: null
	,__backBufferWantsBestResolutionOnBrowserZoom: null
	,__context: null
	,__contextState: null
	,__renderStage3DProgram: null
	,__enableErrorChecking: null
	,__fragmentConstants: null
	,__frontBufferTexture: null
	,__positionScale: null
	,__present: null
	,__programs: null
	,__quadIndexBuffer: null
	,__quadIndexBufferCount: null
	,__quadIndexBufferElements: null
	,__stage: null
	,__stage3D: null
	,__state: null
	,__vertexConstants: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var vertexData = openfl__$Vector_Vector_$Impl_$.toFloatVector(null,null,null,[width,height,0,1,1,0,height,0,0,1,width,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl__$Vector_Vector_$Impl_$.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString(format),optimizeForRenderToTexture);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString(bufferUsage));
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,indexBuffer.__elementType,firstIndex);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null) {
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.__state.blendSourceFactor = sourceFactor;
		this.__state.blendDestinationFactor = destinationFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g1 = 0;
			var _g = program.__samplerStates.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var this1 = new Float32Array(16);
			var data = this1;
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				data[i] = matrix.rawData.get(i);
			}
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i1 = firstRegister * 4;
			if(transposedMatrix) {
				dest[i1++] = source.get(0);
				dest[i1++] = source.get(4);
				dest[i1++] = source.get(8);
				dest[i1++] = source.get(12);
				dest[i1++] = source.get(1);
				dest[i1++] = source.get(5);
				dest[i1++] = source.get(9);
				dest[i1++] = source.get(13);
				dest[i1++] = source.get(2);
				dest[i1++] = source.get(6);
				dest[i1++] = source.get(10);
				dest[i1++] = source.get(14);
				dest[i1++] = source.get(3);
				dest[i1++] = source.get(7);
				dest[i1++] = source.get(11);
				dest[i1++] = source.get(15);
			} else {
				dest[i1++] = source.get(0);
				dest[i1++] = source.get(1);
				dest[i1++] = source.get(2);
				dest[i1++] = source.get(3);
				dest[i1++] = source.get(4);
				dest[i1++] = source.get(5);
				dest[i1++] = source.get(6);
				dest[i1++] = source.get(7);
				dest[i1++] = source.get(8);
				dest[i1++] = source.get(9);
				dest[i1++] = source.get(10);
				dest[i1++] = source.get(11);
				dest[i1++] = source.get(12);
				dest[i1++] = source.get(13);
				dest[i1++] = source.get(14);
				dest[i1++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl__$internal_renderer_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		this.__flushGLColor();
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationFactor != this.__state.blendDestinationFactor || this.__contextState.blendSourceFactor != this.__state.blendSourceFactor) {
			var src = this.gl.ONE;
			var dest = this.gl.ZERO;
			var _g = this.__state.blendSourceFactor;
			switch(_g) {
			case 0:
				src = this.gl.DST_ALPHA;
				break;
			case 1:
				src = this.gl.DST_COLOR;
				break;
			case 2:
				src = this.gl.ONE;
				break;
			case 3:
				src = this.gl.ONE_MINUS_DST_ALPHA;
				break;
			case 4:
				src = this.gl.ONE_MINUS_DST_COLOR;
				break;
			case 5:
				src = this.gl.ONE_MINUS_SRC_ALPHA;
				break;
			case 6:
				src = this.gl.ONE_MINUS_SRC_COLOR;
				break;
			case 7:
				src = this.gl.SRC_ALPHA;
				break;
			case 8:
				src = this.gl.SRC_COLOR;
				break;
			case 9:
				src = this.gl.ZERO;
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			var _g1 = this.__state.blendDestinationFactor;
			switch(_g1) {
			case 0:
				dest = this.gl.DST_ALPHA;
				break;
			case 1:
				dest = this.gl.DST_COLOR;
				break;
			case 2:
				dest = this.gl.ONE;
				break;
			case 3:
				dest = this.gl.ONE_MINUS_DST_ALPHA;
				break;
			case 4:
				dest = this.gl.ONE_MINUS_DST_COLOR;
				break;
			case 5:
				dest = this.gl.ONE_MINUS_SRC_ALPHA;
				break;
			case 6:
				dest = this.gl.ONE_MINUS_SRC_COLOR;
				break;
			case 7:
				dest = this.gl.SRC_ALPHA;
				break;
			case 8:
				dest = this.gl.SRC_COLOR;
				break;
			case 9:
				dest = this.gl.ZERO;
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			this.__setGLBlend(true);
			this.gl.blendFunc(src,dest);
			this.__contextState.blendDestinationFactor = this.__state.blendDestinationFactor;
			this.__contextState.blendSourceFactor = this.__state.blendSourceFactor;
		}
	}
	,__flushGLColor: function() {
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				var _g = this.__state.culling;
				switch(_g) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			var _g = this.__state.depthCompareMode;
			switch(_g) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError());
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_Error("Context3D backbuffer has not been configured"));
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = Std["int"](this.__state.scissorRectangle.x);
			var scissorY = Std["int"](this.__state.scissorRectangle.y);
			var scissorWidth = Std["int"](this.__state.scissorRectangle.width);
			var scissorHeight = Std["int"](this.__state.scissorRectangle.height);
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = Std["int"](this.__stage.window.get_height() * this.__stage.window.get_scale());
				scissorY = contextHeight - Std["int"](this.__state.scissorRectangle.height) - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		var _gthis = this;
		var getGLCompareMode = function(mode) {
			switch(mode) {
			case 0:
				return _gthis.gl.ALWAYS;
			case 1:
				return _gthis.gl.EQUAL;
			case 2:
				return _gthis.gl.GREATER;
			case 3:
				return _gthis.gl.GEQUAL;
			case 4:
				return _gthis.gl.LESS;
			case 5:
				return _gthis.gl.LEQUAL;
			case 6:
				return _gthis.gl.NEVER;
			case 7:
				return _gthis.gl.NOTEQUAL;
			default:
				return _gthis.gl.EQUAL;
			}
		};
		var getGLTriangleFace = function(face) {
			switch(face) {
			case 0:
				return _gthis.gl.BACK;
			case 1:
				return _gthis.gl.FRONT;
			case 2:
				return _gthis.gl.FRONT_AND_BACK;
			case 3:
				return _gthis.gl.NONE;
			default:
				return _gthis.gl.FRONT_AND_BACK;
			}
		};
		var getGLStencilAction = function(action) {
			switch(action) {
			case 0:
				return _gthis.gl.DECR;
			case 1:
				return _gthis.gl.DECR_WRAP;
			case 2:
				return _gthis.gl.INCR;
			case 3:
				return _gthis.gl.INCR_WRAP;
			case 4:
				return _gthis.gl.INVERT;
			case 5:
				return _gthis.gl.KEEP;
			case 6:
				return _gthis.gl.REPLACE;
			case 7:
				return _gthis.gl.ZERO;
			default:
				return _gthis.gl.KEEP;
			}
		};
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(getGLTriangleFace(this.__state.stencilTriangleFace),getGLStencilAction(this.__state.stencilFail),getGLStencilAction(this.__state.stencilDepthFail),getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g1 = 0;
		var _g = this.__state.textures.length;
		while(_g1 < _g) {
			var i = _g1++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl__$internal_renderer_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var x = this.__stage3D == null ? 0 : Std["int"](this.__stage3D.get_x());
				var y = Std["int"](this.__stage.window.get_height() * this.__stage.window.get_scale() - this.backBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()));
				this.gl.viewport(x,y,this.backBufferWidth,this.backBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(Std["is"](this.__state.renderToTexture,openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(Std["is"](this.__state.renderToTexture,openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(Std["is"](this.__state.renderToTexture,openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DBufferUsage.Context3DBufferUsage_Impl_"] = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$;
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.__name__ = ["openfl","display3D","_Context3DBufferUsage","Context3DBufferUsage_Impl_"];
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DProgramType.Context3DProgramType_Impl_"] = openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$;
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.__name__ = ["openfl","display3D","_Context3DProgramType","Context3DProgramType_Impl_"];
openfl_display3D__$Context3DProgramType_Context3DProgramType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTextureFormat.Context3DTextureFormat_Impl_"] = openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$;
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.__name__ = ["openfl","display3D","_Context3DTextureFormat","Context3DTextureFormat_Impl_"];
openfl_display3D__$Context3DTextureFormat_Context3DTextureFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__elementType = gl.UNSIGNED_SHORT;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	__context: null
	,__elementType: null
	,__id: null
	,__numIndices: null
	,__tempUInt16Array: null
	,__usage: null
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g1 = startOffset;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new List();
		this.__agalSamplerUniforms = new List();
		this.__agalAlphaSamplerUniforms = new List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	__agalAlphaSamplerEnabled: null
	,__agalAlphaSamplerUniforms: null
	,__agalFragmentUniformMap: null
	,__agalPositionScale: null
	,__agalSamplerUniforms: null
	,__agalSamplerUsageMask: null
	,__agalUniforms: null
	,__agalVertexUniformMap: null
	,__context: null
	,__format: null
	,__glFragmentShader: null
	,__glFragmentSource: null
	,__glProgram: null
	,__glslAttribNames: null
	,__glslAttribTypes: null
	,__glslSamplerNames: null
	,__glslUniformNames: null
	,__glslUniformTypes: null
	,__glVertexShader: null
	,__glVertexSource: null
	,__samplerStates: null
	,upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl__$internal_formats_agal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "Program3D.hx", lineNumber : 176, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "Program3D.hx", lineNumber : 177, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g1 = 0;
		var _g = samplerStates.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new List();
		var fragmentUniforms = new List();
		var _g1 = 0;
		var _g = numActive;
		while(_g1 < _g) {
			var i = _g1++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			var _g2 = uniform.type;
			switch(_g2) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g4 = 0;
				var _g3 = uniform.regCount;
				while(_g4 < _g3) {
					var reg = _g4++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				haxe_Log.trace("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "Program3D.hx", lineNumber : 361, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var sampler = this.__agalSamplerUniforms.iterator();
			while(sampler.hasNext()) {
				var sampler1 = sampler.next();
				if(sampler1.regCount == 1) {
					gl.uniform1i(sampler1.location,sampler1.regIndex);
				} else {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
			var sampler2 = this.__agalAlphaSamplerUniforms.iterator();
			while(sampler2.hasNext()) {
				var sampler3 = sampler2.next();
				if(sampler3.regCount == 1) {
					gl.uniform1i(sampler3.location,sampler3.regIndex);
				} else {
					throw new js__$Boot_HaxeError(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			gl.uniform4fv(location,positionScale);
		}
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "Program3D.hx", lineNumber : 692, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message1 = "Error compiling fragment shader";
			message1 += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message1 += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message1,{ fileName : "Program3D.hx", lineNumber : 705, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g1 = 0;
			var _g11 = this.__glslAttribNames;
			while(_g1 < _g11.length) {
				var name1 = _g11[_g1];
				++_g1;
				if(name1.indexOf("Position") > -1 && StringTools.startsWith(name1,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name1);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message2 = "Unable to initialize the shader program";
			message2 += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message2,{ fileName : "Program3D.hx", lineNumber : 751, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = ["openfl","display3D","Uniform"];
openfl_display3D_Uniform.prototype = {
	name: null
	,location: null
	,type: null
	,size: null
	,regData: null
	,regIndex: null
	,regCount: null
	,isDirty: null
	,context: null
	,regDataPointer: null
	,flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		var _g = this.type;
		switch(_g) {
		case 35664:
			lime_graphics__$WebGL2RenderContext_WebGL2RenderContext_$Impl_$.uniform2fv(gl,this.location,this.__getUniformRegisters(index,this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.__getUniformRegisters(index,this.regCount * 3);
			gl.uniform3fv(location,data);
			break;
		case 35666:
			var location1 = this.location;
			var data1 = this.__getUniformRegisters(index,this.regCount * 4);
			gl.uniform4fv(location1,data1);
			break;
		case 35674:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix2fv(gl,this.location,false,this.__getUniformRegisters(index,this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix3fv(gl,this.location,false,this.__getUniformRegisters(index,this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.uniformMatrix4fv(gl,this.location,false,this.__getUniformRegisters(index,this.size * 4 * 4));
			break;
		default:
			var location2 = this.location;
			var data2 = this.__getUniformRegisters(index,this.regCount * 4);
			gl.uniform4fv(location2,data2);
		}
	}
	,__getUniformRegisters: function(index,size) {
		return this.regData.subarray(index,index + size);
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl__$Vector_Vector_$Impl_$.toObjectVector(null,total);
	var _g2 = 0;
	var _g11 = this.__uniforms;
	while(_g2 < _g11.length) {
		var uniform1 = _g11[_g2];
		++_g2;
		var _g3 = 0;
		var _g21 = uniform1.regCount;
		while(_g3 < _g21) {
			var i = _g3++;
			this.__registerLookup.set(uniform1.regIndex + i,uniform1);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = ["openfl","display3D","UniformMap"];
openfl_display3D_UniformMap.prototype = {
	__allDirty: null
	,__anyDirty: null
	,__registerLookup: null
	,__uniforms: null
	,flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D__$Context3DBufferUsage_Context3DBufferUsage_$Impl_$.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	__context: null
	,__id: null
	,__numVertices: null
	,__stride: null
	,__tempFloat32Array: null
	,__usage: null
	,__vertexSize: null
	,uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g1 = start;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempFloat32Array);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.set(0,v);
			var v1 = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.set(0,v1);
		}
		if(etc1Extension != null) {
			var v2 = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.set(2,v2);
			var v3 = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.set(2,v3);
		}
		if(pvrtcExtension != null) {
			var v4 = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.set(1,v4);
			var v5 = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.set(1,v5);
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__alphaTexture: null
	,__context: null
	,__format: null
	,__glDepthRenderbuffer: null
	,__glFramebuffer: null
	,__glStencilRenderbuffer: null
	,__height: null
	,__internalFormat: null
	,__optimizeForRenderToTexture: null
	,__samplerState: null
	,__streamingLevels: null
	,__textureContext: null
	,__textureID: null
	,__textureTarget: null
	,__width: null
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "TextureBase.hx", lineNumber : 176, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.GL_DEPTH_STENCIL != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.GL_DEPTH_STENCIL,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code1 = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code1 != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code1 + " width:" + this.__width + " height:" + this.__height,{ fileName : "TextureBase.hx", lineNumber : 218, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			var wrapModeS = 0;
			var wrapModeT = 0;
			var _g = state.wrap;
			switch(_g) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_Error("wrap bad enum"));
			}
			var magFilter = 0;
			var minFilter = 0;
			var _g1 = state.filter;
			if(_g1 == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			var _g2 = state.mipfilter;
			switch(_g2) {
			case 0:
				if(state.filter == 5) {
					minFilter = gl.NEAREST_MIPMAP_LINEAR;
				} else {
					minFilter = gl.LINEAR_MIPMAP_LINEAR;
				}
				break;
			case 1:
				if(state.filter == 5) {
					minFilter = gl.NEAREST_MIPMAP_NEAREST;
				} else {
					minFilter = gl.LINEAR_MIPMAP_NEAREST;
				}
				break;
			case 2:
				if(state.filter == 5) {
					minFilter = gl.NEAREST;
				} else {
					minFilter = gl.LINEAR;
				}
				break;
			default:
				throw new js__$Boot_HaxeError(new openfl_errors_Error("mipfiter bad enum"));
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__framebufferSurface: null
	,__size: null
	,__uploadedSides: null
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					haxe_Log.trace("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "CubeTexture.hx", lineNumber : 165, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT != 0) {
				var aniso;
				var _g = state.filter;
				switch(_g) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT) {
					aniso = openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = ["openfl","display3D","textures","VideoTexture"];
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__netStream: null
	,__getTexture: function() {
		if(!this.__netStream.__video.paused || this.__netStream.get___seeking()) {
			this.__netStream.set___seeking(false);
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics__$WebGLRenderContext_WebGLRenderContext_$Impl_$.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
		}
		return this.__textureID;
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = ["openfl","errors","IllegalOperationError"];
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = ["openfl","events","_EventDispatcher","DispatchIterator"];
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	active: null
	,index: null
	,isCopy: null
	,list: null
	,copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g1 = this.index;
				var _g = this.list.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,isRelatedObjectInaccessible: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = ["openfl","events","RenderEvent"];
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	allowSmoothing: null
	,objectColorTransform: null
	,objectMatrix: null
	,renderer: null
	,__class__: openfl_events_RenderEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = ["openfl","events","TimerEvent"];
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = ["openfl","events","UncaughtErrorEvent"];
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	error: null
	,__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.prototype = {
	__bottomExtension: null
	,__leftExtension: null
	,__needSecondBitmapData: null
	,__numShaderPasses: null
	,__preserveObject: null
	,__renderDirty: null
	,__rightExtension: null
	,__shaderBlendMode: null
	,__smooth: null
	,__topExtension: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters.BitmapFilterShader"] = openfl_filters_BitmapFilterShader;
openfl_filters_BitmapFilterShader.__name__ = ["openfl","filters","BitmapFilterShader"];
openfl_filters_BitmapFilterShader.__super__ = openfl_display_Shader;
openfl_filters_BitmapFilterShader.prototype = $extend(openfl_display_Shader.prototype,{
	openfl_Position: null
	,openfl_TextureCoord: null
	,openfl_Matrix: null
	,openfl_TextureSize: null
	,openfl_Texture: null
	,__class__: openfl_filters_BitmapFilterShader
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 sum = vec4(0.0);\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[0]) * 0.00443;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[1]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[2]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[3]) * 0.39894;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[4]) * 0.24197;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[5]) * 0.05399;\n\t\t\tsum += texture2D(openfl_Texture, vBlurCoords[6]) * 0.00443;\n\t\t\t\n\t\t\tgl_FragColor = sum;\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\tuniform vec2 uTextureSize;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t\tvec2 r = uRadius / uTextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__update: function() {
		this.uTextureSize.value = [this.__texture.input.width,this.__texture.input.height];
		openfl_filters_BitmapFilterShader.prototype.__update.call(this);
	}
	,uRadius: null
	,uTextureSize: null
	,__class__: openfl_filters__$BlurFilter_BlurShader
});
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.set_quality(quality);
	this.__needSecondBitmapData = true;
	this.__preserveObject = false;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__blurX: null
	,__blurY: null
	,__horizontalPasses: null
	,__quality: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_BlurFilter.__blurShader.uRadius.value[0] = 0;
			openfl_filters_BlurFilter.__blurShader.uRadius.value[1] = this.get_blurY() * scale1;
		}
		return openfl_filters_BlurFilter.__blurShader;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX"}
});
var openfl_filters__$ColorMatrixFilter_ColorMatrixShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\t\tuniform sampler2D openfl_Texture;\n\t\t\n\t\tuniform mat4 uMultipliers;\n\t\tuniform vec4 uOffsets;\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\t\t\t\n\t\t\tif (color.a == 0.0) {\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\t\t\t\tcolor = uOffsets + color * uMultipliers;\n\t\t\t\t\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a, color.a);\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tvarying vec2 openfl_TextureCoordv;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\t\t\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uMultipliers.value = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
	this.uOffsets.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._ColorMatrixFilter.ColorMatrixShader"] = openfl_filters__$ColorMatrixFilter_ColorMatrixShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__name__ = ["openfl","filters","_ColorMatrixFilter","ColorMatrixShader"];
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$ColorMatrixFilter_ColorMatrixShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	init: function(matrix) {
		var multipliers = this.uMultipliers.value;
		var offsets = this.uOffsets.value;
		multipliers[0] = matrix[0];
		multipliers[1] = matrix[1];
		multipliers[2] = matrix[2];
		multipliers[3] = matrix[3];
		multipliers[4] = matrix[5];
		multipliers[5] = matrix[6];
		multipliers[6] = matrix[7];
		multipliers[7] = matrix[8];
		multipliers[8] = matrix[10];
		multipliers[9] = matrix[11];
		multipliers[10] = matrix[12];
		multipliers[11] = matrix[13];
		multipliers[12] = matrix[15];
		multipliers[13] = matrix[16];
		multipliers[14] = matrix[17];
		multipliers[15] = matrix[18];
		offsets[0] = matrix[4] / 255.0;
		offsets[1] = matrix[9] / 255.0;
		offsets[2] = matrix[14] / 255.0;
		offsets[3] = matrix[19] / 255.0;
	}
	,uMultipliers: null
	,uOffsets: null
	,__class__: openfl_filters__$ColorMatrixFilter_ColorMatrixShader
});
var openfl_filters_ColorMatrixFilter = function(matrix) {
	openfl_filters_BitmapFilter.call(this);
	this.set_matrix(matrix);
	this.__numShaderPasses = 1;
	this.__needSecondBitmapData = false;
};
$hxClasses["openfl.filters.ColorMatrixFilter"] = openfl_filters_ColorMatrixFilter;
openfl_filters_ColorMatrixFilter.__name__ = ["openfl","filters","ColorMatrixFilter"];
openfl_filters_ColorMatrixFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_ColorMatrixFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__matrix: null
	,__applyFilter: function(destBitmapData,sourceBitmapData,sourceRect,destPoint) {
		var sourceImage = sourceBitmapData.image;
		var image = destBitmapData.image;
		lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
		var sourceData = sourceImage.get_data();
		var destData = image.get_data();
		var offsetX = Std["int"](destPoint.x - sourceRect.x);
		var offsetY = Std["int"](destPoint.y - sourceRect.y);
		var sourceStride = sourceBitmapData.width * 4;
		var destStride = destBitmapData.width * 4;
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourcePixel;
		var destPixel = 0;
		var sourceOffset;
		var destOffset;
		var _g1 = Std["int"](sourceRect.y);
		var _g = Std["int"](sourceRect.height);
		while(_g1 < _g) {
			var row = _g1++;
			var _g3 = Std["int"](sourceRect.x);
			var _g2 = Std["int"](sourceRect.width);
			while(_g3 < _g2) {
				var column = _g3++;
				sourceOffset = row * sourceStride + column * 4;
				destOffset = (row + offsetX) * destStride + (column + offsetY) * 4;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourceOffset] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset + 2] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourceOffset + 1] & 255) << 24 | (sourceData[sourceOffset + 2] & 255) << 16 | (sourceData[sourceOffset + 3] & 255) << 8 | sourceData[sourceOffset] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourceOffset + 2] & 255) << 24 | (sourceData[sourceOffset + 1] & 255) << 16 | (sourceData[sourceOffset] & 255) << 8 | sourceData[sourceOffset + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if((sourcePixel & 255) == 0) {
					destPixel = 0;
				} else {
					var value = Std["int"](Math.max(0,Math.min(this.__matrix[0] * (sourcePixel >>> 24 & 255) + this.__matrix[1] * (sourcePixel >>> 16 & 255) + this.__matrix[2] * (sourcePixel >>> 8 & 255) + this.__matrix[3] * (sourcePixel & 255) + this.__matrix[4],255)));
					destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value1 = Std["int"](Math.max(0,Math.min(this.__matrix[5] * (sourcePixel >>> 24 & 255) + this.__matrix[6] * (sourcePixel >>> 16 & 255) + this.__matrix[7] * (sourcePixel >>> 8 & 255) + this.__matrix[8] * (sourcePixel & 255) + this.__matrix[9],255)));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
					var value2 = Std["int"](Math.max(0,Math.min(this.__matrix[10] * (sourcePixel >>> 24 & 255) + this.__matrix[11] * (sourcePixel >>> 16 & 255) + this.__matrix[12] * (sourcePixel >>> 8 & 255) + this.__matrix[13] * (sourcePixel & 255) + this.__matrix[14],255)));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
					var value3 = Std["int"](Math.max(0,Math.min(this.__matrix[15] * (sourcePixel >>> 24 & 255) + this.__matrix[16] * (sourcePixel >>> 16 & 255) + this.__matrix[17] * (sourcePixel >>> 8 & 255) + this.__matrix[18] * (sourcePixel & 255) + this.__matrix[19],255)));
					destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
				}
				if(destPremultiplied) {
					if((destPixel & 255) == 0) {
						if(destPixel != 0) {
							destPixel = 0;
						}
					} else if((destPixel & 255) != 255) {
						lime_math__$RGBA_RGBA_$Impl_$.a16 = lime_math__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
						destPixel = ((destPixel >>> 24 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destOffset] = destPixel >>> 24 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 8 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				case 1:
					destData[destOffset] = destPixel & 255;
					destData[destOffset + 1] = destPixel >>> 24 & 255;
					destData[destOffset + 2] = destPixel >>> 16 & 255;
					destData[destOffset + 3] = destPixel >>> 8 & 255;
					break;
				case 2:
					destData[destOffset] = destPixel >>> 8 & 255;
					destData[destOffset + 1] = destPixel >>> 16 & 255;
					destData[destOffset + 2] = destPixel >>> 24 & 255;
					destData[destOffset + 3] = destPixel & 255;
					break;
				}
			}
		}
		destBitmapData.image.dirty = true;
		return destBitmapData;
	}
	,__initShader: function(renderer,pass) {
		openfl_filters_ColorMatrixFilter.__colorMatrixShader.init(this.get_matrix());
		return openfl_filters_ColorMatrixFilter.__colorMatrixShader;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,set_matrix: function(value) {
		if(value == null) {
			value = [1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0];
		}
		return this.__matrix = value;
	}
	,__class__: openfl_filters_ColorMatrixFilter
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = !this.__hideObject;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__angle: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__distance: null
	,__hideObject: null
	,__inner: null
	,__knockout: null
	,__offsetX: null
	,__offsetY: null
	,__quality: null
	,__strength: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		sourceBitmapData.colorTransform(sourceBitmapData.rect,new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0));
		var point = new openfl_geom_Point(this.__offsetX,this.__offsetY);
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),point.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__updateSize: function() {
		this.__offsetX = Std["int"](this.__distance * Math.cos(this.__angle * Math.PI / 180));
		this.__offsetY = Std["int"](this.__distance * Math.sin(this.__angle * Math.PI / 180));
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
	}
	,__class__: openfl_filters_DropShadowFilter
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "uniform sampler2D openfl_Texture;\n\t\t\n\t\tuniform vec4 uColor;\n\t\t\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tfloat a = 0.0;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[0]).a * 0.00443;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[1]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[2]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[3]).a * 0.39894;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[4]).a * 0.24197;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[5]).a * 0.05399;\n\t\t\ta += texture2D(openfl_Texture, vBlurCoords[6]).a * 0.00443;\n\t\t\ta *= uColor.a;\n\t\t\t\n\t\t\tgl_FragColor = vec4(uColor.rgb * a, a);\n\t\t\t\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\t\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\t\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vBlurCoords[7];\n\t\t\n\t\tvoid main(void) {\n\t\t\t\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\t\n\t\t\tvec2 r = uRadius / openfl_TextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * 1.0;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * 0.75;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * 0.5;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * 0.5;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * 0.75;\n\t\t\tvBlurCoords[6] = openfl_TextureCoord + r * 1.0;\n\t\t\t\n\t\t}";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.uColor.value = [0,0,0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	uRadius: null
	,uColor: null
	,__class__: openfl_filters__$GlowFilter_GlowShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.set_blurX(blurX);
	this.set_blurY(blurY);
	this.__strength = strength;
	this.set_quality(quality);
	this.__inner = inner;
	this.__knockout = knockout;
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__alpha: null
	,__blurX: null
	,__blurY: null
	,__color: null
	,__horizontalPasses: null
	,__inner: null
	,__knockout: null
	,__quality: null
	,__strength: null
	,__verticalPasses: null
	,__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		bitmapData.colorTransform(bitmapData.rect,new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0));
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass) {
		if(pass <= this.__horizontalPasses) {
			var scale = Math.pow(0.5,pass >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = this.get_blurX() * scale;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = 0;
		} else {
			var scale1 = Math.pow(0.5,pass - this.__horizontalPasses >> 1);
			openfl_filters_GlowFilter.__glowShader.uRadius.value[0] = 0;
			openfl_filters_GlowFilter.__glowShader.uRadius.value[1] = this.get_blurY() * scale1;
		}
		openfl_filters_GlowFilter.__glowShader.uColor.value[0] = (this.get_color() >> 16 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[1] = (this.get_color() >> 8 & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[2] = (this.get_color() & 255) / 255;
		openfl_filters_GlowFilter.__glowShader.uColor.value[3] = this.get_alpha();
		return openfl_filters_GlowFilter.__glowShader;
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,set_blurX: function(value) {
		if(value != this.__blurX) {
			this.__blurX = value;
			this.__renderDirty = true;
			this.__leftExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__rightExtension = this.__leftExtension;
		}
		return value;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,set_blurY: function(value) {
		if(value != this.__blurY) {
			this.__blurY = value;
			this.__renderDirty = true;
			this.__topExtension = value > 0 ? Math.ceil(value * 1.5) : 0;
			this.__bottomExtension = this.__topExtension;
		}
		return value;
	}
	,get_color: function() {
		return this.__color;
	}
	,set_quality: function(value) {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (value / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (value / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses;
		if(value != this.__quality) {
			this.__renderDirty = true;
		}
		return this.__quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",get_color:"get_color",set_blurY:"set_blurY",get_blurY:"get_blurY",set_blurX:"set_blurX",get_blurX:"get_blurX",get_alpha:"get_alpha"}
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.prototype = {
	rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g1 = this.rawData;
		_g1.set(13,_g1.get(13) + y);
		var _g2 = this.rawData;
		_g2.set(14,_g2.get(14) + z);
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,identity: function() {
		var a = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vector = openfl__$Vector_Vector_$Impl_$.toFloatVector(null);
		var _g1 = 0;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			vector.set(i,a[i]);
		}
		this.rawData = vector;
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,__class__: openfl_geom_Matrix3D
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		openfl_geom_Point.__limeVector2.setTo(this.x,this.y);
		return openfl_geom_Point.__limeVector2;
	}
	,__class__: openfl_geom_Point
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			this.__displayObject.__setRenderDirty();
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = a;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = a;
			this.__displayObject.__transform.b = b;
			this.__displayObject.__transform.c = c;
			this.__displayObject.__transform.d = d;
			this.__displayObject.__transform.tx = tx;
			this.__displayObject.__transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.prototype = {
	__class__: openfl_geom_Vector3D
};
var openfl_media_ID3Info = function() { };
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && defaultLibrary.cachedAudioBuffers.exists(this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.get(this.url));
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__soundTransform: null
	,__source: null
	,stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime(Std["int"](value) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = ["openfl","media","SoundMixer"];
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__video = js_Browser.get_document().createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = ["openfl","net","NetStream"];
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,time: null
	,__connection: null
	,__seeking: null
	,__video: null
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Complete"}));
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Stop"}));
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( e ) {
				haxe_CallStack.lastException = e;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Play.Start"}));
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__connection.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,false,{ code : "NetStream.Seek.Complete"}));
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,get___seeking: function() {
		if(!this.__seeking) {
			return this.__video.seeking;
		} else {
			return true;
		}
	}
	,set___seeking: function(value) {
		return this.__seeking = value;
	}
	,__class__: openfl_net_NetStream
	,__properties__: {set___seeking:"set___seeking",get___seeking:"get___seeking"}
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = openfl_net_SharedObject.defaultObjectEncoding;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(localPath == null) {
		localPath = js_Browser.get_window().location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		if(lime_app_Application.current != null) {
			lime_app_Application.current.onExit.add(openfl_net_SharedObject.application_onExit);
		}
	}
	var id = localPath + "/" + name;
	if(!openfl_net_SharedObject.__sharedObjects.exists(id)) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
			}
		}
		openfl_net_SharedObject.__sharedObjects.set(id,sharedObject);
	}
	return openfl_net_SharedObject.__sharedObjects.get(id);
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var sharedObject = openfl_net_SharedObject.__sharedObjects.iterator();
	while(sharedObject.hasNext()) {
		var sharedObject1 = sharedObject.next();
		sharedObject1.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 1;
		}
		return 0;
	}
	,__class__: openfl_net_SharedObject
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,__httpRequest: null
	,load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest1 = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest1,request);
			httpRequest1.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data1) {
				_gthis.__dispatchStatus();
				_gthis.data = data1;
				var event1 = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event1);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		var _g = request.method;
		var tmp;
		switch(_g) {
		case "DELETE":
			tmp = "DELETE";
			break;
		case "HEAD":
			tmp = "HEAD";
			break;
		case "OPTIONS":
			tmp = "OPTIONS";
			break;
		case "POST":
			tmp = "POST";
			break;
		case "PUT":
			tmp = "PUT";
			break;
		default:
			tmp = "GET";
		}
		this.__httpRequest.method = tmp;
		if(request.data != null) {
			if(Type["typeof"](request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					this.__httpRequest.formData.set(field,Reflect.field(request.data,field));
				}
			} else if(Std["is"](request.data,haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g11 = 0;
			var _g2 = request.requestHeaders;
			while(_g11 < _g2.length) {
				var header = _g2[_g11];
				++_g11;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = Std["int"](request.idleTimeout);
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event1 = new openfl_events_IOErrorEvent("ioError");
			event1.text = Std.string(error);
			this.dispatchEvent(event1);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout > 0 ? openfl_net_URLRequestDefaults.idleTimeout : 30000;
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,followRedirects: null
	,idleTimeout: null
	,manageCookies: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = ["openfl","net","URLRequestDefaults"];
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,__class__: openfl_system_ApplicationDomain
};
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,get_fontName: function() {
		return this.name;
	}
	,__class__: openfl_text_Font
	,__properties__: {get_fontName:"get_fontName"}
});
var openfl_text_StaticText = function() {
	openfl_display_DisplayObject.call(this);
	this.__graphics = new openfl_display_Graphics(this);
};
$hxClasses["openfl.text.StaticText"] = openfl_text_StaticText;
openfl_text_StaticText.__name__ = ["openfl","text","StaticText"];
openfl_text_StaticText.__super__ = openfl_display_DisplayObject;
openfl_text_StaticText.prototype = $extend(openfl_display_DisplayObject.prototype,{
	text: null
	,__class__: openfl_text_StaticText
});
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,__ascent: null
	,__descent: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null && format.url != "") {
			this.url = format.url;
		}
		if(format.url == "" && this.url == null) {
			this.url = "";
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(!openfl_ui_GameInput.__devices.exists(gamepad)) {
		var device = new openfl_ui_GameInputDevice(gamepad.get_guid(),gamepad.get_name());
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.get(gamepad);
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.exists(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.set(axis,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__axis.get(axis);
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.exists(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.set(button,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__button.get(button);
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.exists(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.set(button,control1);
			device.__controls.push(control1);
		}
		var control2 = device.__button.get(button);
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.get(gamepad);
	if(device != null) {
		if(openfl_ui_GameInput.__devices.exists(gamepad)) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.get(gamepad));
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.set(i,control);
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.set(i1,control);
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,__axis: null
	,__button: null
	,__controls: null
	,__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 13;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = ["openfl","utils","AGALMiniAssembler"];
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.set("mov",v);
	var this2 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v1 = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this2.set("add",v1);
	var this3 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v2 = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this3.set("sub",v2);
	var this4 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v3 = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this4.set("mul",v3);
	var this5 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v4 = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this5.set("div",v4);
	var this6 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v5 = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this6.set("rcp",v5);
	var this7 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v6 = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this7.set("min",v6);
	var this8 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v7 = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this8.set("max",v7);
	var this9 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v8 = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this9.set("frc",v8);
	var this10 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v9 = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this10.set("sqt",v9);
	var this11 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v10 = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this11.set("rsq",v10);
	var this12 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v11 = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this12.set("pow",v11);
	var this13 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v12 = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this13.set("log",v12);
	var this14 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v13 = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this14.set("exp",v13);
	var this15 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v14 = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this15.set("nrm",v14);
	var this16 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v15 = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this16.set("sin",v15);
	var this17 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v16 = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this17.set("cos",v16);
	var this18 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v17 = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this18.set("crs",v17);
	var this19 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v18 = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this19.set("dp3",v18);
	var this20 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v19 = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this20.set("dp4",v19);
	var this21 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v20 = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this21.set("abs",v20);
	var this22 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v21 = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this22.set("neg",v21);
	var this23 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v22 = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this23.set("sat",v22);
	var this24 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v23 = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this24.set("m33",v23);
	var this25 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v24 = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this25.set("m44",v24);
	var this26 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v25 = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this26.set("m34",v25);
	var this27 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v26 = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this27.set("ddx",v26);
	var this28 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v27 = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this28.set("ddy",v27);
	var this29 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v28 = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this29.set("ife",v28);
	var this30 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v29 = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this30.set("ine",v29);
	var this31 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v30 = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this31.set("ifg",v30);
	var this32 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v31 = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this32.set("ifl",v31);
	var this33 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v32 = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this33.set("els",v32);
	var this34 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v33 = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this34.set("eif",v33);
	var this35 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v34 = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this35.set("kil",v34);
	var this36 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v35 = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this36.set("tex",v35);
	var this37 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v36 = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this37.set("sge",v36);
	var this38 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v37 = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this38.set("slt",v37);
	var this39 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v38 = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this39.set("sgn",v38);
	var this40 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v39 = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this40.set("seq",v39);
	var this41 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v40 = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this41.set("sne",v40);
	var this42 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v41 = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this42.set("rgba",v41);
	var this43 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v42 = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this43.set("compressed",v42);
	var this44 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v43 = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this44.set("compressedalpha",v43);
	var this45 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v44 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this45.set("dxt1",v44);
	var this46 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v45 = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this46.set("dxt5",v45);
	var this47 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v46 = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this47.set("video",v46);
	var this48 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v47 = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this48.set("2d",v47);
	var this49 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v48 = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this49.set("3d",v48);
	var this50 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v49 = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this50.set("cube",v49);
	var this51 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v50 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this51.set("mipnearest",v50);
	var this52 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v51 = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this52.set("miplinear",v51);
	var this53 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v52 = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this53.set("mipnone",v52);
	var this54 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v53 = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this54.set("nomip",v53);
	var this55 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v54 = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this55.set("nearest",v54);
	var this56 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v55 = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this56.set("linear",v55);
	var this57 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v56 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this57.set("anisotropic2x",v56);
	var this58 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v57 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this58.set("anisotropic4x",v57);
	var this59 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v58 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this59.set("anisotropic8x",v58);
	var this60 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v59 = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this60.set("anisotropic16x",v59);
	var this61 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v60 = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this61.set("centroid",v60);
	var this62 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v61 = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this62.set("single",v61);
	var this63 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v62 = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this63.set("ignoresampler",v62);
	var this64 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v63 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this64.set("repeat",v63);
	var this65 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v64 = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this65.set("wrap",v64);
	var this66 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v65 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this66.set("clamp",v65);
	var this67 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v66 = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this67.set("clamp_u_repeat_v",v66);
	var this68 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v67 = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this68.set("repeat_u_clamp_v",v67);
};
openfl_utils_AGALMiniAssembler.prototype = {
	agalcode: null
	,error: null
	,verbose: null
	,debugEnabled: null
	,assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.set_endian(1);
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nest = 0;
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.get(opCode);
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 284, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				haxe_Log.trace(opFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 296, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					haxe_Log.trace("warning: bad line " + i + ": " + lines[i],{ fileName : "AGALMiniAssembler.hx", lineNumber : 304, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				haxe_Log.trace("emit opcode=" + Std.string(opFound),{ fileName : "AGALMiniAssembler.hx", lineNumber : 338, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g1 = 0;
			var _g = regLength;
			while(_g1 < _g) {
				var j = _g1++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						haxe_Log.trace("IS REL",{ fileName : "AGALMiniAssembler.hx", lineNumber : 377, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.get(res[0]);
				if(this.debugEnabled) {
					haxe_Log.trace(regFound,{ fileName : "AGALMiniAssembler.hx", lineNumber : 399, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				var pos = regs[j].indexOf(regFound.name) + regFound.name.length;
				regs[j] = HxOverrides.substr(regs[j],pos,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(_$UInt_UInt_$Impl_$.gt(regidx,regFound.range)) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + Std.string(_$UInt_UInt_$Impl_$.toFloat(regFound.range + 1)) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(_$UInt_UInt_$Impl_$.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else if(isDest) {
					regmask = 15;
				} else {
					regmask = 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.get(relname[0]);
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(_$UInt_UInt_$Impl_$.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						haxe_Log.trace("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(relsel)) + "==" + selmatch[0] + " idx=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + " offset=" + reloffset,{ fileName : "AGALMiniAssembler.hx", lineNumber : 574, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					haxe_Log.trace("  emit argcode=" + Std.string(regFound) + "[" + Std.string(_$UInt_UInt_$Impl_$.toFloat(regidx)) + "][" + regmask + "]",{ fileName : "AGALMiniAssembler.hx", lineNumber : 582, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						haxe_Log.trace("  emit sampler",{ fileName : "AGALMiniAssembler.hx", lineNumber : 599, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g3 = 0;
					var _g2 = optsLength;
					while(_g3 < _g2) {
						var k1 = _g3++;
						if(this.verbose) {
							haxe_Log.trace("    opt: " + opts[k1],{ fileName : "AGALMiniAssembler.hx", lineNumber : 611, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.get(opts[k1]);
						if(optfound == null) {
							bias = Std.parseFloat(opts[k1]);
							if(this.verbose) {
								haxe_Log.trace("    bias: " + bias,{ fileName : "AGALMiniAssembler.hx", lineNumber : 625, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(Std["int"](bias * 8.0));
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						haxe_Log.trace("    bits: " + (samplerbits - 5),{ fileName : "AGALMiniAssembler.hx", lineNumber : 650, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(this.agalcode,0);
			haxe_Log.trace(this.error,{ fileName : "AGALMiniAssembler.hx", lineNumber : 703, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(this.agalcode);
			var _g11 = 0;
			var _g4 = agalLength;
			while(_g11 < _g4) {
				var index = _g11++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.get(index),2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			haxe_Log.trace(dbgLine,{ fileName : "AGALMiniAssembler.hx", lineNumber : 739, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			haxe_Log.trace("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "AGALMiniAssembler.hx", lineNumber : 745, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.set("va",v);
		var this2 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v1 = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this2.set("vc",v1);
		var this3 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v2 = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this3.set("vt",v2);
		var this4 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v3 = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this4.set("vo",v3);
		var this5 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v4 = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this5.set("vi",v4);
		var this6 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v5 = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this6.set("fc",v5);
		var this7 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v6 = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this7.set("ft",v6);
		var this8 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v7 = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this8.set("fs",v7);
		var this9 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v8 = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this9.set("fo",v8);
		var this10 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v9 = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this10.set("fd",v9);
		var this11 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v10 = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this11.set("iid",v10);
		var this12 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v11 = openfl_utils_AGALMiniAssembler.REGMAP.get("vo");
		this12.set("op",v11);
		var this13 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v12 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this13.set("i",v12);
		var this14 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v13 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this14.set("v",v13);
		var this15 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v14 = openfl_utils_AGALMiniAssembler.REGMAP.get("fo");
		this15.set("oc",v14);
		var this16 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v15 = openfl_utils_AGALMiniAssembler.REGMAP.get("fd");
		this16.set("od",v15);
		var this17 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v16 = openfl_utils_AGALMiniAssembler.REGMAP.get("vi");
		this17.set("fi",v16);
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = ["openfl","utils","_AGALMiniAssembler","OpCode"];
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	emitCode: null
	,flags: null
	,name: null
	,numRegister: null
	,toString: function() {
		return "[OpCode name=\"" + this.name + "\", numRegister=" + this.numRegister + ", emitCode=" + this.emitCode + ", flags=" + this.flags + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = ["openfl","utils","_AGALMiniAssembler","Register"];
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	emitCode: null
	,name: null
	,longName: null
	,flags: null
	,range: null
	,toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.emitCode)) + ", range=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.range)) + ", flags=" + Std.string(_$UInt_UInt_$Impl_$.toFloat(this.flags)) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = ["openfl","utils","_AGALMiniAssembler","Sampler"];
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	flag: null
	,mask: null
	,name: null
	,__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = ["openfl","utils","IAssetCache"];
openfl_utils_IAssetCache.prototype = {
	get_enabled: null
	,getBitmapData: null
	,hasBitmapData: null
	,removeBitmapData: null
	,setBitmapData: null
	,__class__: openfl_utils_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = ["openfl","utils","AssetCache"];
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,getBitmapData: function(id) {
		return this.bitmapData.get(id);
	}
	,hasBitmapData: function(id) {
		return this.bitmapData.exists(id);
	}
	,removeBitmapData: function(id) {
		lime_utils_Assets.cache.image.remove(id);
		return this.bitmapData.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.set(id,bitmapData);
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = ["openfl","utils","Assets"];
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(Std["is"](bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = haxe_io_Bytes.alloc(length);
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.set_endian(openfl_utils_ByteArrayData.__defaultEndian);
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	position: null
	,__endian: null
	,__length: null
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.get(this.position++);
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.get_endian() == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.set(this.position++,value & 255);
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.get_endian() == 1) {
			this.set(this.position++,value & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 24 & 255);
		} else {
			this.set(this.position++,value >> 24 & 255);
			this.set(this.position++,value >> 16 & 255);
			this.set(this.position++,value >> 8 & 255);
			this.set(this.position++,value & 255);
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.get_endian() == 1) {
			this.set(this.position++,value);
			this.set(this.position++,value >> 8);
		} else {
			this.set(this.position++,value >> 8);
			this.set(this.position++,value);
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,__fromBytes: function(bytes) {
		this.__setData(bytes);
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = haxe_io_Bytes.alloc((size + 1) * 3 >> 1);
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.__setData(bytes);
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
});
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.__repeatCount = repeatCount;
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = ["openfl","utils","Timer"];
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	currentCount: null
	,running: null
	,__delay: null
	,__repeatCount: null
	,__timerID: null
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = js_Browser.get_window().setInterval($bind(this,this.timer_onTimer),Std["int"](this.__delay));
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			js_Browser.get_window().clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,set_delay: function(value) {
		this.__delay = value;
		if(this.running) {
			this.stop();
			this.start();
		}
		return this.__delay;
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.__repeatCount > 0 && this.currentCount >= this.__repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
	,__properties__: {set_delay:"set_delay"}
});
var spritesheet_AnimatedSprite = function(sheet,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	this.BoxId = 0;
	this.OpenDirection = "";
	this.StopTime = 0;
	this.Start = 0;
	this.Try = 0;
	this.Speed = 0;
	this.EndPoint = "none";
	this.End = 0;
	this.AutoChange = false;
	this.Enabled = false;
	this.Activate = "";
	this.ChangeDirection = "";
	this.Switch = "";
	this.Closed = false;
	this.Direction = "";
	this.w2 = null;
	this.w1 = null;
	this.blades = null;
	this.beam = null;
	this.light = null;
	this.cargo = null;
	this.sensor = null;
	this.magnetic2 = null;
	this.magnet = null;
	this.magnetic1 = null;
	this.spark2 = null;
	this.spark1 = null;
	openfl_display_Sprite.call(this);
	this.smoothing = smoothing;
	this.spritesheet = sheet;
	this.behaviorQueue = [];
	this.bitmap = new openfl_display_Bitmap();
	this.addChild(this.bitmap);
};
$hxClasses["spritesheet.AnimatedSprite"] = spritesheet_AnimatedSprite;
spritesheet_AnimatedSprite.__name__ = ["spritesheet","AnimatedSprite"];
spritesheet_AnimatedSprite.__super__ = openfl_display_Sprite;
spritesheet_AnimatedSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	bitmap: null
	,currentBehavior: null
	,currentFrameIndex: null
	,smoothing: null
	,spritesheet: null
	,behaviorComplete: null
	,behaviorQueue: null
	,loopTime: null
	,timeElapsed: null
	,spark1: null
	,spark2: null
	,magnetic1: null
	,magnet: null
	,magnetic2: null
	,sensor: null
	,cargo: null
	,light: null
	,beam: null
	,blades: null
	,w1: null
	,w2: null
	,Direction: null
	,Closed: null
	,Switch: null
	,ChangeDirection: null
	,Activate: null
	,Enabled: null
	,AutoChange: null
	,End: null
	,EndPoint: null
	,Speed: null
	,Try: null
	,Start: null
	,StopTime: null
	,OpenDirection: null
	,BoxId: null
	,resolveBehavior: function(behavior) {
		if(Std["is"](behavior,spritesheet_data_BehaviorData)) {
			return behavior;
		} else if(typeof(behavior) == "string") {
			if(this.spritesheet != null) {
				return this.spritesheet.behaviors.get(behavior);
			}
		}
		return null;
	}
	,showBehavior: function(behavior,restart) {
		if(restart == null) {
			restart = true;
		}
		this.behaviorQueue = [];
		this.updateBehavior(this.resolveBehavior(behavior),restart);
	}
	,update: function(deltaTime) {
		if(!this.behaviorComplete) {
			this.timeElapsed += deltaTime;
			var ratio = this.timeElapsed / this.loopTime;
			if(ratio >= 1) {
				if(this.currentBehavior.loop) {
					ratio -= Math.floor(ratio);
				} else {
					this.behaviorComplete = true;
					ratio = 1;
				}
			}
			this.currentFrameIndex = Math.round(ratio * (this.currentBehavior.frames.length - 1));
			var frame = this.spritesheet.getFrame(this.currentBehavior.frames[this.currentFrameIndex]);
			this.bitmap.set_bitmapData(frame.bitmapData);
			this.bitmap.smoothing = this.smoothing;
			this.bitmap.set_x(frame.offsetX - this.currentBehavior.originX);
			this.bitmap.set_y(frame.offsetY - this.currentBehavior.originY);
			if(this.behaviorComplete) {
				if(this.behaviorQueue.length > 0) {
					this.updateBehavior(this.behaviorQueue.shift());
				} else if(this.hasEventListener("complete")) {
					this.dispatchEvent(new openfl_events_Event("complete"));
				}
			}
		}
	}
	,updateBehavior: function(behavior,restart) {
		if(restart == null) {
			restart = true;
		}
		if(behavior != null) {
			if(restart || behavior != this.currentBehavior) {
				this.currentBehavior = behavior;
				this.timeElapsed = 0;
				this.behaviorComplete = false;
				this.loopTime = Std["int"](behavior.frames.length / behavior.frameRate * 1000);
				if(this.bitmap.get_bitmapData() == null) {
					this.update(0);
				}
			}
		} else {
			this.bitmap.set_bitmapData(null);
			this.currentBehavior = null;
			this.currentFrameIndex = -1;
			this.behaviorComplete = true;
		}
	}
	,__class__: spritesheet_AnimatedSprite
});
var spritesheet_Spritesheet = function(image,frames,behaviors,imageAlpha) {
	this.sourceImage = image;
	this.sourceImageAlpha = imageAlpha;
	if(frames == null) {
		this.frames = [];
		this.totalFrames = 0;
	} else {
		this.frames = frames;
		this.totalFrames = frames.length;
	}
	if(behaviors == null) {
		this.behaviors = new haxe_ds_StringMap();
	} else {
		this.behaviors = behaviors;
	}
};
$hxClasses["spritesheet.Spritesheet"] = spritesheet_Spritesheet;
spritesheet_Spritesheet.__name__ = ["spritesheet","Spritesheet"];
spritesheet_Spritesheet.prototype = {
	behaviors: null
	,totalFrames: null
	,frames: null
	,sourceImage: null
	,sourceImageAlpha: null
	,addBehavior: function(behavior) {
		this.behaviors.set(behavior.name,behavior);
	}
	,addFrame: function(frame) {
		this.frames.push(frame);
		this.totalFrames++;
	}
	,generateBitmap: function(index) {
		var frame = this.frames[index];
		var bitmapData = new openfl_display_BitmapData(frame.width,frame.height,true);
		var sourceRectangle = new openfl_geom_Rectangle(frame.x,frame.y,frame.width,frame.height);
		var targetPoint = new openfl_geom_Point();
		bitmapData.copyPixels(this.sourceImage,sourceRectangle,targetPoint);
		if(this.sourceImageAlpha != null) {
			bitmapData.copyChannel(this.sourceImageAlpha,sourceRectangle,targetPoint,2,8);
		}
		frame.bitmapData = bitmapData;
	}
	,getFrame: function(index,autoGenerate) {
		if(autoGenerate == null) {
			autoGenerate = true;
		}
		var frame = this.frames[index];
		if(frame != null && frame.bitmapData == null && autoGenerate) {
			this.generateBitmap(index);
		}
		return frame;
	}
	,updateImage: function(image,imageAlpha) {
		this.sourceImage = image;
		this.sourceImageAlpha = imageAlpha;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.bitmapData != null) {
				frame.bitmapData = null;
			}
		}
	}
	,__class__: spritesheet_Spritesheet
};
var spritesheet_data_BehaviorData = function(name,frames,loop,frameRate,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(frameRate == null) {
		frameRate = 30;
	}
	if(loop == null) {
		loop = false;
	}
	if(name == null) {
		name = "";
	}
	if(name == "") {
		name = "behavior" + spritesheet_data_BehaviorData.uniqueID++;
	}
	if(frames == null) {
		frames = [];
	}
	this.name = name;
	this.frames = frames;
	this.loop = loop;
	this.frameRate = frameRate;
	this.originX = originX;
	this.originY = originY;
	this.frameData = [];
	var _g1 = 0;
	var _g = this.frames.length;
	while(_g1 < _g) {
		var i = _g1++;
		this.frameData.push(null);
	}
};
$hxClasses["spritesheet.data.BehaviorData"] = spritesheet_data_BehaviorData;
spritesheet_data_BehaviorData.__name__ = ["spritesheet","data","BehaviorData"];
spritesheet_data_BehaviorData.prototype = {
	frameData: null
	,frameRate: null
	,frames: null
	,loop: null
	,name: null
	,originX: null
	,originY: null
	,__class__: spritesheet_data_BehaviorData
};
var spritesheet_data_SpritesheetFrame = function(x,y,width,height,offsetX,offsetY) {
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
};
$hxClasses["spritesheet.data.SpritesheetFrame"] = spritesheet_data_SpritesheetFrame;
spritesheet_data_SpritesheetFrame.__name__ = ["spritesheet","data","SpritesheetFrame"];
spritesheet_data_SpritesheetFrame.prototype = {
	bitmapData: null
	,height: null
	,offsetX: null
	,offsetY: null
	,width: null
	,x: null
	,y: null
	,__class__: spritesheet_data_SpritesheetFrame
};
var spritesheet_importers_BitmapImporter = function() { };
$hxClasses["spritesheet.importers.BitmapImporter"] = spritesheet_importers_BitmapImporter;
spritesheet_importers_BitmapImporter.__name__ = ["spritesheet","importers","BitmapImporter"];
spritesheet_importers_BitmapImporter.create = function(bitmapData,columns,rows,tileWidth,tileHeight,adjustLength,scale) {
	if(scale == null) {
		scale = 1;
	}
	if(adjustLength == null) {
		adjustLength = 0;
	}
	var frames = [];
	var totalLength = rows * columns + adjustLength;
	var _g1 = 0;
	var _g = rows;
	while(_g1 < _g) {
		var row = _g1++;
		var _g3 = 0;
		var _g2 = columns;
		while(_g3 < _g2) {
			var column = _g3++;
			if(frames.length < totalLength) {
				var x = tileWidth * column;
				var y = tileHeight * row;
				var frame = new spritesheet_data_SpritesheetFrame(x,y,tileWidth,tileHeight,0,0);
				if(scale != 1) {
					var sourceBitmapData = new openfl_display_BitmapData(tileWidth,tileHeight,true,0);
					sourceBitmapData.copyPixels(bitmapData,new openfl_geom_Rectangle(x,y,tileWidth,tileHeight),new openfl_geom_Point());
					var bitmap = new openfl_display_Bitmap(sourceBitmapData);
					bitmap.smoothing = true;
					var matrix = new openfl_geom_Matrix();
					matrix.scale(scale,scale);
					var bitmapData1 = new openfl_display_BitmapData(Math.round(tileWidth * scale),Math.round(tileHeight * scale),true,0);
					bitmapData1.draw(bitmap,matrix);
					frame.bitmapData = bitmapData1;
				}
				frames.push(frame);
			}
		}
	}
	while(frames.length < totalLength) frames.push(new spritesheet_data_SpritesheetFrame());
	return new spritesheet_Spritesheet(bitmapData,frames);
};
var tjson_TJSON = function() { };
$hxClasses["tjson.TJSON"] = tjson_TJSON;
tjson_TJSON.__name__ = ["tjson","TJSON"];
tjson_TJSON.parse = function(json,fileName,stringProcessor) {
	if(fileName == null) {
		fileName = "JSON Data";
	}
	var t = new tjson_TJSONParser(json,fileName,stringProcessor);
	return t.doParse();
};
var tjson_TJSONParser = function(vjson,vfileName,stringProcessor) {
	if(vfileName == null) {
		vfileName = "JSON Data";
	}
	this.json = vjson;
	this.fileName = vfileName;
	this.currentLine = 1;
	this.lastSymbolQuoted = false;
	this.pos = 0;
	this.floatRegex = new EReg("^-?[0-9]*\\.[0-9]+$","");
	this.intRegex = new EReg("^-?[0-9]+$","");
	this.strProcessor = stringProcessor == null ? $bind(this,this.defaultStringProcessor) : stringProcessor;
	this.cache = [];
};
$hxClasses["tjson.TJSONParser"] = tjson_TJSONParser;
tjson_TJSONParser.__name__ = ["tjson","TJSONParser"];
tjson_TJSONParser.prototype = {
	pos: null
	,json: null
	,lastSymbolQuoted: null
	,fileName: null
	,currentLine: null
	,cache: null
	,floatRegex: null
	,intRegex: null
	,strProcessor: null
	,doParse: function() {
		try {
			var _g = this.getNextSymbol();
			switch(_g) {
			case "[":
				return this.doArray();
			case "{":
				return this.doObject();
			default:
				var s = _g;
				return this.convertSymbolToProperType(s);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				throw new js__$Boot_HaxeError(this.fileName + " on line " + this.currentLine + ": " + e);
			} else throw(e);
		}
	}
	,doObject: function() {
		var o = { };
		var val = "";
		var key;
		var isClassOb = false;
		this.cache.push(o);
		while(this.pos < this.json.length) {
			key = this.getNextSymbol();
			if(key == "," && !this.lastSymbolQuoted) {
				continue;
			}
			if(key == "}" && !this.lastSymbolQuoted) {
				if(isClassOb && o.TJ_unserialize != null) {
					o.TJ_unserialize();
				}
				return o;
			}
			var seperator = this.getNextSymbol();
			if(seperator != ":") {
				throw new js__$Boot_HaxeError("Expected ':' but got '" + seperator + "' instead.");
			}
			var v = this.getNextSymbol();
			if(key == "_hxcls") {
				var cls = Type.resolveClass(v);
				if(cls == null) {
					throw new js__$Boot_HaxeError("Invalid class name - " + v);
				}
				o = Type.createEmptyInstance(cls);
				this.cache.pop();
				this.cache.push(o);
				isClassOb = true;
				continue;
			}
			if(v == "{" && !this.lastSymbolQuoted) {
				val = this.doObject();
			} else if(v == "[" && !this.lastSymbolQuoted) {
				val = this.doArray();
			} else {
				val = this.convertSymbolToProperType(v);
			}
			Reflect.setField(o,key,val);
		}
		throw new js__$Boot_HaxeError("Unexpected end of file. Expected '}'");
	}
	,doArray: function() {
		var a = [];
		var val;
		while(this.pos < this.json.length) {
			val = this.getNextSymbol();
			if(val == "," && !this.lastSymbolQuoted) {
				continue;
			} else if(val == "]" && !this.lastSymbolQuoted) {
				return a;
			} else if(val == "{" && !this.lastSymbolQuoted) {
				val = this.doObject();
			} else if(val == "[" && !this.lastSymbolQuoted) {
				val = this.doArray();
			} else {
				val = this.convertSymbolToProperType(val);
			}
			a.push(val);
		}
		throw new js__$Boot_HaxeError("Unexpected end of file. Expected ']'");
	}
	,convertSymbolToProperType: function(symbol) {
		if(this.lastSymbolQuoted) {
			if(StringTools.startsWith(symbol,tjson_TJSON.OBJECT_REFERENCE_PREFIX)) {
				var idx = Std.parseInt(HxOverrides.substr(symbol,tjson_TJSON.OBJECT_REFERENCE_PREFIX.length,null));
				return this.cache[idx];
			}
			return symbol;
		}
		if(this.looksLikeFloat(symbol)) {
			return Std.parseFloat(symbol);
		}
		if(this.looksLikeInt(symbol)) {
			return Std.parseInt(symbol);
		}
		if(symbol.toLowerCase() == "true") {
			return true;
		}
		if(symbol.toLowerCase() == "false") {
			return false;
		}
		if(symbol.toLowerCase() == "null") {
			return null;
		}
		return symbol;
	}
	,looksLikeFloat: function(s) {
		if(!this.floatRegex.match(s)) {
			if(this.intRegex.match(s)) {
				var intStr = this.intRegex.matched(0);
				if(HxOverrides.cca(intStr,0) == 45) {
					return intStr > "-2147483648";
				} else {
					return intStr > "2147483647";
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,looksLikeInt: function(s) {
		return this.intRegex.match(s);
	}
	,getNextSymbol: function() {
		this.lastSymbolQuoted = false;
		var c = "";
		var inQuote = false;
		var quoteType = "";
		var symbol = "";
		var inEscape = false;
		var inSymbol = false;
		var inLineComment = false;
		var inBlockComment = false;
		while(this.pos < this.json.length) {
			c = this.json.charAt(this.pos++);
			if(c == "\n" && !inSymbol) {
				this.currentLine++;
			}
			if(inLineComment) {
				if(c == "\n" || c == "\r") {
					inLineComment = false;
					this.pos++;
				}
				continue;
			}
			if(inBlockComment) {
				if(c == "*" && this.json.charAt(this.pos) == "/") {
					inBlockComment = false;
					this.pos++;
				}
				continue;
			}
			if(inQuote) {
				if(inEscape) {
					inEscape = false;
					if(c == "'" || c == "\"") {
						symbol += c;
						continue;
					}
					if(c == "t") {
						symbol += "\t";
						continue;
					}
					if(c == "n") {
						symbol += "\n";
						continue;
					}
					if(c == "\\") {
						symbol += "\\";
						continue;
					}
					if(c == "r") {
						symbol += "\r";
						continue;
					}
					if(c == "/") {
						symbol += "/";
						continue;
					}
					if(c == "u") {
						var hexValue = 0;
						var _g = 0;
						while(_g < 4) {
							var i = _g++;
							if(this.pos >= this.json.length) {
								throw new js__$Boot_HaxeError("Unfinished UTF8 character");
							}
							var nc = HxOverrides.cca(this.json,this.pos++);
							hexValue <<= 4;
							if(nc >= 48 && nc <= 57) {
								hexValue += nc - 48;
							} else if(nc >= 65 && nc <= 70) {
								hexValue += 10 + nc - 65;
							} else if(nc >= 97 && nc <= 102) {
								hexValue += 10 + nc - 95;
							} else {
								throw new js__$Boot_HaxeError("Not a hex digit");
							}
						}
						var utf = new haxe_Utf8();
						utf.addChar(hexValue);
						symbol += utf.toString();
						continue;
					}
					throw new js__$Boot_HaxeError("Invalid escape sequence '\\" + c + "'");
				} else {
					if(c == "\\") {
						inEscape = true;
						continue;
					}
					if(c == quoteType) {
						return symbol;
					}
					symbol += c;
					continue;
				}
			} else if(c == "/") {
				var c2 = this.json.charAt(this.pos);
				if(c2 == "/") {
					inLineComment = true;
					this.pos++;
					continue;
				} else if(c2 == "*") {
					inBlockComment = true;
					this.pos++;
					continue;
				}
			}
			if(inSymbol) {
				if(c == " " || c == "\n" || c == "\r" || c == "\t" || c == "," || c == ":" || c == "}" || c == "]") {
					this.pos--;
					return symbol;
				} else {
					symbol += c;
					continue;
				}
			} else {
				if(c == " " || c == "\t" || c == "\n" || c == "\r") {
					continue;
				}
				if(c == "{" || c == "}" || c == "[" || c == "]" || c == "," || c == ":") {
					return c;
				}
				if(c == "'" || c == "\"") {
					inQuote = true;
					quoteType = c;
					this.lastSymbolQuoted = true;
					continue;
				} else {
					inSymbol = true;
					symbol = c;
					continue;
				}
			}
		}
		if(inQuote) {
			throw new js__$Boot_HaxeError("Unexpected end of data. Expected ( " + quoteType + " )");
		}
		return symbol;
	}
	,defaultStringProcessor: function(str) {
		return str;
	}
	,__class__: tjson_TJSONParser
};
var zpp_$nape_ZPP_$Const = function() { };
$hxClasses["zpp_nape.ZPP_Const"] = zpp_$nape_ZPP_$Const;
zpp_$nape_ZPP_$Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_$nape_ZPP_$Const.POSINF = function() {
	return Infinity;
};
zpp_$nape_ZPP_$Const.NEGINF = function() {
	return -Infinity;
};
var zpp_$nape_ZPP_$ID = function() { };
$hxClasses["zpp_nape.ZPP_ID"] = zpp_$nape_ZPP_$ID;
zpp_$nape_ZPP_$ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_$nape_ZPP_$ID.Constraint = function() {
	return zpp_$nape_ZPP_$ID._Constraint++;
};
zpp_$nape_ZPP_$ID.Interactor = function() {
	return zpp_$nape_ZPP_$ID._Interactor++;
};
zpp_$nape_ZPP_$ID.CbType = function() {
	return zpp_$nape_ZPP_$ID._CbType++;
};
zpp_$nape_ZPP_$ID.CbSet = function() {
	return zpp_$nape_ZPP_$ID._CbSet++;
};
zpp_$nape_ZPP_$ID.Listener = function() {
	return zpp_$nape_ZPP_$ID._Listener++;
};
var zpp_$nape_callbacks_ZPP_$Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
$hxClasses["zpp_nape.callbacks.ZPP_Callback"] = zpp_$nape_callbacks_ZPP_$Callback;
zpp_$nape_callbacks_ZPP_$Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_$nape_callbacks_ZPP_$Callback.prototype = {
	outer_body: null
	,outer_con: null
	,outer_int: null
	,wrapper_body: function() {
		if(this.outer_body == null) {
			this.outer_body = new nape_callbacks_BodyCallback();
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			this.outer_con = new nape_callbacks_ConstraintCallback();
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			this.outer_int = new nape_callbacks_InteractionCallback();
			this.outer_int.zpp_inner = this;
		}
		this.genarbs();
		return this.outer_int;
	}
	,event: null
	,listener: null
	,next: null
	,prev: null
	,length: null
	,push: function(obj) {
		if(this.prev != null) {
			this.prev.next = obj;
		} else {
			this.next = obj;
		}
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) {
			this.prev = null;
		} else {
			this.next.prev = null;
		}
		this.length--;
		return ret;
	}
	,empty: function() {
		return this.next == null;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) {
			this.wrap_arbiters.zpp_inner.inner = null;
		}
		this.set = null;
	}
	,alloc: function() {
	}
	,int1: null
	,int2: null
	,set: null
	,wrap_arbiters: null
	,pre_arbiter: null
	,pre_swapped: null
	,genarbs: function() {
		if(this.wrap_arbiters == null) {
			this.wrap_arbiters = zpp_$nape_util_ZPP_$ArbiterList.get(this.set.arbiters,true);
		} else {
			this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		}
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,body: null
	,constraint: null
	,__class__: zpp_$nape_callbacks_ZPP_$Callback
};
var zpp_$nape_callbacks_ZPP_$CbSet = function() {
	this.constraints = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.id = zpp_$nape_ZPP_$ID.CbSet();
	this.cbpairs = new zpp_$nape_util_ZNPList_$ZPP_$CbSetPair();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSet"] = zpp_$nape_callbacks_ZPP_$CbSet;
zpp_$nape_callbacks_ZPP_$CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_$nape_callbacks_ZPP_$CbSet.setlt = function(a,b) {
	var i = a.cbTypes.begin();
	var j = b.cbTypes.begin();
	while(i != null && j != null) {
		var ca = i.elem();
		var cb = j.elem();
		if(zpp_$nape_callbacks_ZPP_$CbType.setlt(ca,cb)) {
			return true;
		}
		if(zpp_$nape_callbacks_ZPP_$CbType.setlt(cb,ca)) {
			return false;
		} else {
			i = i.next;
			j = j.next;
		}
	}
	if(j != null) {
		return i == null;
	} else {
		return false;
	}
};
zpp_$nape_callbacks_ZPP_$CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
		ret = new zpp_$nape_callbacks_ZPP_$CbSet();
	} else {
		ret = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	var ite = null;
	var cx_ite = cbTypes.begin();
	while(cx_ite != null) {
		var cb = cx_ite.elem();
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).empty_intersection();
};
zpp_$nape_callbacks_ZPP_$CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
};
zpp_$nape_callbacks_ZPP_$CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
};
zpp_$nape_callbacks_ZPP_$CbSet.prototype = {
	cbTypes: null
	,count: null
	,next: null
	,id: null
	,manager: null
	,cbpairs: null
	,increment: function() {
		this.count++;
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.invalidate();
			cx_ite = cx_ite.next;
		}
	}
	,listeners: null
	,zip_listeners: null
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			var npre = null;
			var nite = this.listeners.begin();
			var cite = cb.listeners.begin();
			while(cite != null) {
				var cx = cite.elem();
				if(nite != null && nite.elem() == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elem())) {
					if(this.manager.valid_listener(cx)) {
						npre = this.listeners.inlined_insert(npre,cx);
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,bodylisteners: null
	,zip_bodylisteners: null
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			var npre = null;
			var nite = this.bodylisteners.begin();
			var cite = cb.bodylisteners.begin();
			while(cite != null) {
				var cx = cite.elem();
				if(nite != null && nite.elem() == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elem())) {
					if(!cx.options.excluded(this.cbTypes) && this.manager.valid_listener(cx)) {
						npre = this.bodylisteners.inlined_insert(npre,cx);
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,conlisteners: null
	,zip_conlisteners: null
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			var npre = null;
			var nite = this.conlisteners.begin();
			var cite = cb.conlisteners.begin();
			while(cite != null) {
				var cx = cite.elem();
				if(nite != null && nite.elem() == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_$nape_callbacks_ZPP_$Listener.setlt(cx,nite.elem())) {
					if(!cx.options.excluded(this.cbTypes) && this.manager.valid_listener(cx)) {
						npre = this.conlisteners.inlined_insert(npre,cx);
					}
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate: function() {
		this.validate_listeners();
		this.validate_bodylisteners();
		this.validate_conlisteners();
	}
	,interactors: null
	,constraints: null
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!this.cbTypes.empty()) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,alloc: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbSetPair"] = zpp_$nape_callbacks_ZPP_$CbSetPair;
zpp_$nape_callbacks_ZPP_$CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_$nape_callbacks_ZPP_$CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool == null) {
		ret = new zpp_$nape_callbacks_ZPP_$CbSetPair();
	} else {
		ret = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
};
zpp_$nape_callbacks_ZPP_$CbSetPair.setlt = function(x,y) {
	if(!zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.a,y.a)) {
		if(x.a == y.a) {
			return zpp_$nape_callbacks_ZPP_$CbSet.setlt(x.b,y.b);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
zpp_$nape_callbacks_ZPP_$CbSetPair.prototype = {
	a: null
	,b: null
	,next: null
	,free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		if(!(i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes))) {
			if(i.options2.compatible(this.a.cbTypes)) {
				return i.options1.compatible(this.b.cbTypes);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,zip_listeners: null
	,listeners: null
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.begin();
		var bite = this.b.listeners.begin();
		while(aite != null && bite != null) {
			var ax = aite.elem();
			var bx = bite.elem();
			if(ax == bx) {
				if(this.compatible(ax)) {
					this.listeners.add(ax);
				}
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_$nape_callbacks_ZPP_$Listener.setlt(ax,bx)) {
				aite = aite.next;
			} else {
				bite = bite.next;
			}
		}
	}
	,empty_intersection: function() {
		return this.listeners.empty();
	}
	,single_intersection: function(i) {
		var ite = this.listeners.begin();
		if(ite != null && ite.elem() == i) {
			return ite.next == null;
		} else {
			return false;
		}
	}
	,forall: function(event,cb) {
		var cx_ite = this.listeners.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x.event == event) {
				cb(x);
			}
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionListener"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPList_$ZPP_$BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_BodyListener"] = zpp_$nape_util_ZNPList_$ZPP_$BodyListener;
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_$nape_util_ZNPList_$ZPP_$BodyListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$BodyListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPList_$ZPP_$Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Constraint"] = zpp_$nape_util_ZNPList_$ZPP_$Constraint;
zpp_$nape_util_ZNPList_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_$nape_util_ZNPList_$ZPP_$Constraint.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Constraint();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPList_$ZPP_$Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Interactor"] = zpp_$nape_util_ZNPList_$ZPP_$Interactor;
zpp_$nape_util_ZNPList_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_$nape_util_ZNPList_$ZPP_$Interactor.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Interactor();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSet"] = zpp_$nape_util_ZNPList_$ZPP_$CbSet;
zpp_$nape_util_ZNPList_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_$nape_util_ZNPList_$ZPP_$CbSet.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSet
};
var zpp_$nape_callbacks_ZPP_$CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.CbType();
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.bodylisteners = new zpp_$nape_util_ZNPList_$ZPP_$BodyListener();
	this.conlisteners = new zpp_$nape_util_ZNPList_$ZPP_$ConstraintListener();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
};
$hxClasses["zpp_nape.callbacks.ZPP_CbType"] = zpp_$nape_callbacks_ZPP_$CbType;
zpp_$nape_callbacks_ZPP_$CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_$nape_callbacks_ZPP_$CbType.setlt = function(a,b) {
	return a.id < b.id;
};
zpp_$nape_callbacks_ZPP_$CbType.prototype = {
	outer: null
	,id: null
	,cbsets: null
	,interactors: null
	,constraints: null
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,listeners: null
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.begin();
		while(cx_ite != null) {
			var j = cx_ite.elem();
			if(zpp_$nape_callbacks_ZPP_$Listener.setlt(x,j)) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.invalidate_listeners();
			cx_ite = cx_ite.next;
		}
	}
	,bodylisteners: null
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.begin();
		while(cx_ite != null) {
			var j = cx_ite.elem();
			if(zpp_$nape_callbacks_ZPP_$Listener.setlt(x,j)) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.invalidate_bodylisteners();
			cx_ite = cx_ite.next;
		}
	}
	,conlisteners: null
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.begin();
		while(cx_ite != null) {
			var j = cx_ite.elem();
			if(zpp_$nape_callbacks_ZPP_$Listener.setlt(x,j)) {
				break;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,invalidateconstraint: function() {
		var cx_ite = this.cbsets.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.invalidate_conlisteners();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$CbType
};
var zpp_$nape_util_ZPP_$Flags = function() { };
$hxClasses["zpp_nape.util.ZPP_Flags"] = zpp_$nape_util_ZPP_$Flags;
zpp_$nape_util_ZPP_$Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
var zpp_$nape_callbacks_ZPP_$Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_$nape_ZPP_$ID.Listener();
};
$hxClasses["zpp_nape.callbacks.ZPP_Listener"] = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_$nape_callbacks_ZPP_$Listener.setlt = function(a,b) {
	if(a.precedence <= b.precedence) {
		if(a.precedence == b.precedence) {
			return a.id > b.id;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
zpp_$nape_callbacks_ZPP_$Listener.prototype = {
	outer: null
	,id: null
	,type: null
	,event: null
	,precedence: null
	,body: null
	,constraint: null
	,interaction: null
	,space: null
	,addedToSpace: function() {
	}
	,removedFromSpace: function() {
	}
	,__class__: zpp_$nape_callbacks_ZPP_$Listener
};
var zpp_$nape_callbacks_ZPP_$BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = 0;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_BodyListener"] = zpp_$nape_callbacks_ZPP_$BodyListener;
zpp_$nape_callbacks_ZPP_$BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_$nape_callbacks_ZPP_$BodyListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$BodyListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zn: null
	,options: null
	,handler: null
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.removebody(this);
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$BodyListener
});
var zpp_$nape_callbacks_ZPP_$ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = 1;
	this.options = options.zpp_inner;
};
$hxClasses["zpp_nape.callbacks.ZPP_ConstraintListener"] = zpp_$nape_callbacks_ZPP_$ConstraintListener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_$nape_callbacks_ZPP_$ConstraintListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$ConstraintListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zn: null
	,options: null
	,handler: null
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.removeconstraint(this);
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,__class__: zpp_$nape_callbacks_ZPP_$ConstraintListener
});
var zpp_$nape_util_ZNPList_$ZPP_$CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbType"] = zpp_$nape_util_ZNPList_$ZPP_$CbType;
zpp_$nape_util_ZNPList_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_$nape_util_ZNPList_$ZPP_$CbType.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbType();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.begin();
		while(cx_ite != null) {
			var npite = cx_ite.elem();
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbType
};
var zpp_$nape_callbacks_ZPP_$InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_$nape_callbacks_ZPP_$Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
$hxClasses["zpp_nape.callbacks.ZPP_InteractionListener"] = zpp_$nape_callbacks_ZPP_$InteractionListener;
zpp_$nape_callbacks_ZPP_$InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_$nape_callbacks_ZPP_$InteractionListener.__super__ = zpp_$nape_callbacks_ZPP_$Listener;
zpp_$nape_callbacks_ZPP_$InteractionListener.prototype = $extend(zpp_$nape_callbacks_ZPP_$Listener.prototype,{
	outer_zni: null
	,outer_znp: null
	,itype: null
	,options1: null
	,options2: null
	,handleri: null
	,allowSleepingCallbacks: null
	,pure: null
	,handlerp: null
	,setInteractionType: function(itype) {
		this.itype = itype;
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet;
		var aite = A.begin();
		var bite = B.begin();
		while(aite != null && bite != null) {
			var a = aite.elem();
			var b = bite.elem();
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_$nape_callbacks_ZPP_$CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elem());
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elem());
			bite = bite.next;
		}
		while(!U.empty()) {
			var x = U.pop_unsafe();
			var cx_ite = B.begin();
			while(cx_ite != null) {
				var y = cx_ite.elem();
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!V.empty()) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.begin();
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elem();
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!W.empty()) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.begin();
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elem();
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType;
		var V = zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType;
		var W = zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType;
		var aite = A.begin();
		var bite = B.begin();
		while(aite != null && bite != null) {
			var a = aite.elem();
			var b = bite.elem();
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_$nape_callbacks_ZPP_$CbType.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elem());
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elem());
			bite = bite.next;
		}
		while(!U.empty()) {
			var x = U.pop_unsafe();
			var cx_ite = B.begin();
			while(cx_ite != null) {
				var y = cx_ite.elem();
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!V.empty()) {
			var x1 = V.pop_unsafe();
			var cx_ite1 = W.begin();
			while(cx_ite1 != null) {
				var y1 = cx_ite1.elem();
				lambda(x1,y1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!W.empty()) {
			var x2 = W.pop_unsafe();
			lambda(x2,x2);
			var cx_ite2 = W.begin();
			while(cx_ite2 != null) {
				var y2 = cx_ite2.elem();
				lambda(x2,y2);
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,with_uniquesets: function(fresh) {
		var _gthis = this;
		var set;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
			set = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
		} else {
			set = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		set.alloc();
		set.lt = zpp_$nape_callbacks_ZPP_$CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_gthis.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_$nape_callbacks_ZPP_$CbSet.single_intersection(a1,b1,_gthis)) {
					var tmp = zpp_$nape_callbacks_ZPP_$CbSetPair.get(a1,b1);
					set.try_insert(tmp);
				}
			});
		});
		set.clear_with(function(pair) {
			if(fresh) {
				_gthis.space.freshListenerType(pair.a,pair.b);
			} else {
				_gthis.space.nullListenerType(pair.a,pair.b);
			}
			var o = pair;
			o.free();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		});
		var o1 = set;
		o1.free();
		o1.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o1;
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.begin();
		var ite2 = this.options2.includes.begin();
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elem();
			var cb2 = ite2.elem();
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(zpp_$nape_callbacks_ZPP_$CbType.setlt(cb1,cb2)) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elem());
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elem());
			ite2 = ite2.next;
		}
	}
	,addedToSpace: function() {
		var _gthis = this;
		var pre = this.type == 3;
		this.with_union(function(cb) {
			cb.addint(_gthis);
			if(pre) {
				var cx_ite = cb.interactors.begin();
				while(cx_ite != null) {
					var i = cx_ite.elem();
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,removedFromSpace: function() {
		var _gthis = this;
		this.with_uniquesets(false);
		var pre = this.type == 3;
		this.with_union(function(cb) {
			cb.removeint(_gthis);
			if(pre) {
				var cx_ite = cb.interactors.begin();
				while(cx_ite != null) {
					var i = cx_ite.elem();
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change: function(options,cb,included,added) {
		this.space.revoke_listener(this);
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		this.space.unrevoke_listener(this);
	}
	,__class__: zpp_$nape_callbacks_ZPP_$InteractionListener
});
var zpp_$nape_callbacks_ZPP_$OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this.excludes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.callbacks.ZPP_OptionType"] = zpp_$nape_callbacks_ZPP_$OptionType;
zpp_$nape_callbacks_ZPP_$OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_$nape_callbacks_ZPP_$OptionType.argument = function(val) {
	if(val == null) {
		return new nape_callbacks_OptionType();
	} else if(Std["is"](val,nape_callbacks_OptionType)) {
		return val;
	} else {
		return new nape_callbacks_OptionType().including(val);
	}
};
zpp_$nape_callbacks_ZPP_$OptionType.prototype = {
	outer: null
	,handler: null
	,includes: null
	,excludes: null
	,wrap_includes: null
	,wrap_excludes: null
	,setup_includes: function() {
		this.wrap_includes = zpp_$nape_util_ZPP_$CbTypeList.get(this.includes,true);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_$nape_util_ZPP_$CbTypeList.get(this.excludes,true);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,compatible: function(xs) {
		if(this.included(xs)) {
			return !this.excluded(xs);
		} else {
			return false;
		}
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.begin();
		var eite = ys.begin();
		while(eite != null && xite != null) {
			var ex = eite.elem();
			var xi = xite.elem();
			if(ex == xi) {
				ret = true;
				break;
			} else if(zpp_$nape_callbacks_ZPP_$CbType.setlt(ex,xi)) {
				eite = eite.next;
			} else {
				xite = xite.next;
			}
		}
		return ret;
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.begin();
				while(cx_ite != null) {
					var j = cx_ite.elem();
					if(zpp_$nape_callbacks_ZPP_$CbType.setlt(val,j)) {
						break;
					}
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else {
				this.includes.remove(val);
			}
		} else if(added) {
			var pre1 = null;
			var cx_ite1 = this.excludes.begin();
			while(cx_ite1 != null) {
				var j1 = cx_ite1.elem();
				if(zpp_$nape_callbacks_ZPP_$CbType.setlt(val,j1)) {
					break;
				}
				pre1 = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			this.excludes.inlined_insert(pre1,val);
		} else {
			this.excludes.remove(val);
		}
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) {
						this.handler(val,true,true);
					} else {
						this.effect_change(val,true,true);
					}
				} else if(this.handler != null) {
					this.handler(val,false,false);
				} else {
					this.effect_change(val,false,false);
				}
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) {
					this.handler(val,false,true);
				} else {
					this.effect_change(val,false,true);
				}
			} else if(this.handler != null) {
				this.handler(val,true,false);
			} else {
				this.effect_change(val,true,false);
			}
		}
	}
	,append: function(list,val) {
		if(Std["is"](val,nape_callbacks_CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(Std["is"](val,nape_callbacks_CbTypeList)) {
			var cbs = val;
			var cb1 = cbs.iterator();
			while(cb1.hasNext()) {
				var cb2 = cb1.next();
				this.append_type(list,cb2.zpp_inner);
			}
		} else if((val instanceof Array) && val.__enum__ == null) {
			var cbs1 = val;
			var _g = 0;
			while(_g < cbs1.length) {
				var cb3 = cbs1[_g];
				++_g;
				var cbx = cb3;
				this.append_type(list,cbx.zpp_inner);
			}
		}
	}
	,__class__: zpp_$nape_callbacks_ZPP_$OptionType
};
var zpp_$nape_constraint_ZPP_$Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_$nape_ZPP_$ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = zpp_$nape_ZPP_$Const.POSINF();
	this.maxError = zpp_$nape_ZPP_$Const.POSINF();
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.constraint.ZPP_Constraint"] = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_$nape_constraint_ZPP_$Constraint.prototype = {
	outer: null
	,id: null
	,compound: null
	,space: null
	,active: null
	,stiff: null
	,frequency: null
	,damping: null
	,maxForce: null
	,maxError: null
	,breakUnderForce: null
	,breakUnderError: null
	,removeOnBreak: null
	,component: null
	,ignore: null
	,__velocity: null
	,immutable_midstep: function(name) {
	}
	,cbTypes: null
	,cbSet: null
	,wrap_cbTypes: null
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.remConstraint(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.addConstraint(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.begin();
			while(cx_ite != null) {
				var j = cx_ite.elem();
				if(zpp_$nape_callbacks_ZPP_$CbType.setlt(cb,j)) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.increment();
			this.cbSet.addConstraint(this);
		}
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.remConstraint(this);
			if(this.cbSet.decrement()) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,activate: function() {
		if(this.space != null) {
			this.activeInSpace();
		}
	}
	,deactivate: function() {
		if(this.space != null) {
			this.inactiveOrOutSpace();
		}
	}
	,addedToSpace: function() {
		if(this.active) {
			this.activeInSpace();
		}
		this.activeBodies();
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.addConstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,removedFromSpace: function() {
		if(this.active) {
			this.inactiveOrOutSpace();
		}
		this.inactiveBodies();
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.remConstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.alloc();
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.free();
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
	}
	,activeBodies: function() {
	}
	,inactiveBodies: function() {
	}
	,clearcache: function() {
	}
	,wake_connected: function() {
	}
	,forest: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,broken: function() {
	}
	,warmStart: function() {
	}
	,pre_dt: null
	,preStep: function(dt) {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,wake: function() {
		if(this.space != null) {
			this.space.wake_constraint(this);
		}
	}
	,__class__: zpp_$nape_constraint_ZPP_$Constraint
};
var zpp_$nape_constraint_ZPP_$AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_AngleJoint"] = zpp_$nape_constraint_ZPP_$AngleJoint;
zpp_$nape_constraint_ZPP_$AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_$nape_constraint_ZPP_$AngleJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$AngleJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,scale: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) {
				return nape_geom_Vec3.get(0,0,-this.scale * this.jAcc);
			} else {
				return nape_geom_Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,b2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			this.slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc > this.jMax) {
				this.jAcc = this.jMax;
			} else if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$AngleJoint
});
var zpp_$nape_constraint_ZPP_$DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_DistanceJoint"] = zpp_$nape_constraint_ZPP_$DistanceJoint;
zpp_$nape_constraint_ZPP_$DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_$nape_constraint_ZPP_$DistanceJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$DistanceJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,nx: null
	,ny: null
	,cx1: null
	,cx2: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) {
				return nape_geom_Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc);
			} else {
				return nape_geom_Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		this.ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = this.nx * this.nx + this.ny * this.ny;
		if(C < nape_Config.epsilon) {
			this.nx = 0;
			this.ny = 0;
			C = 0;
			this.slack = true;
		} else {
			C = zpp_$nape_util_ZPP_$Math.sqrt(C);
			var t = 1.0 / C;
			this.nx *= t;
			this.ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				this.slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				this.nx = -this.nx;
				this.ny = -this.ny;
				this.slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				this.slack = false;
			} else {
				this.nx = 0;
				this.ny = 0;
				C = 0;
				this.slack = true;
			}
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.ny * this.a1relx - this.nx * this.a1rely;
			this.cx2 = this.ny * this.a2relx - this.nx * this.a2rely;
			this.kMass = this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t1;
			this.b2.vely += this.ny * t1;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.nx * t1;
		this.b2.vely += this.ny * t1;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + r2x - (this.b1.posx + r1x);
		ny = this.b2.posy + r2y - (this.b1.posy + r1y);
		var C = nx * nx + ny * ny;
		if(C < nape_Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = zpp_$nape_util_ZPP_$Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t1 = j * this.b1.imass;
						this.b1.posx -= nx * t1;
						this.b1.posy -= ny * t1;
						var t2 = j * this.b2.imass;
						this.b2.posx += nx * t2;
						this.b2.posy += ny * t2;
						nx = this.b2.posx + r2x - (this.b1.posx + r1x);
						ny = this.b2.posy + r2y - (this.b1.posy + r1y);
						var C1 = nx * nx + ny * ny;
						if(C1 < nape_Config.epsilon) {
							nx = 0;
							ny = 0;
							C1 = 0;
							slack = true;
						} else {
							C1 = zpp_$nape_util_ZPP_$Math.sqrt(C1);
							var t3 = 1.0 / C1;
							nx *= t3;
							ny *= t3;
							if(this.equal) {
								C1 -= this.jointMax;
								slack = false;
							} else if(C1 < this.jointMin) {
								C1 = this.jointMin - C1;
								nx = -nx;
								ny = -ny;
								slack = false;
							} else if(C1 > this.jointMax) {
								C1 -= this.jointMax;
								slack = false;
							} else {
								nx = 0;
								ny = 0;
								C1 = 0;
								slack = true;
							}
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			cx1 = ny * r1x - nx * r1y;
			cx2 = ny * r2x - nx * r2y;
			var k1 = this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia;
			if(k1 != 0) {
				k1 = 1 / k1;
			}
			j = -E * k1;
			if(this.equal || j < 0) {
				var t4 = this.b1.imass * j;
				this.b1.posx -= nx * t4;
				this.b1.posy -= ny * t4;
				var t5 = this.b2.imass * j;
				this.b2.posx += nx * t5;
				this.b2.posy += ny * t5;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$DistanceJoint
});
var zpp_$nape_constraint_ZPP_$LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.jointMin = zpp_$nape_ZPP_$Const.NEGINF();
	this.jointMax = zpp_$nape_ZPP_$Const.POSINF();
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_LineJoint"] = zpp_$nape_constraint_ZPP_$LineJoint;
zpp_$nape_constraint_ZPP_$LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_$nape_constraint_ZPP_$LineJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$LineJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,scale: null
	,jointMin: null
	,jointMax: null
	,equal: null
	,dot1: null
	,dot2: null
	,cx1: null
	,cx2: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) {
				return nape_geom_Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx);
			} else {
				return nape_geom_Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,zip_n: null
	,nlocalx: null
	,nlocaly: null
	,nrelx: null
	,nrely: null
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,setup_n: function() {
		this.wrap_n = nape_geom_Vec2.get(this.nlocalx,this.nlocaly);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,wrap_n: null
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,jAccx: null
	,jAccy: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) {
				return true;
			}
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X = ig;
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t1 = this.b2.imass;
		this.b2.velx += J2x * t1;
		this.b2.vely += J2y * t1;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.jAccy > 0) {
			this.jAccy = 0;
		}
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t5 = this.b1.imass;
		this.b1.velx -= J2x * t5;
		this.b1.vely -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.velx += J2x * t6;
		this.b2.vely += J2y * t6;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t1 = this.b1.imass;
				this.b1.posx -= Jx1 * t1;
				this.b1.posy -= Jy1 * t1;
				var t2 = this.b2.imass;
				this.b2.posx += Jx1 * t2;
				this.b2.posy += Jy1 * t2;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t3 = 0.5;
				Ex *= t3;
				Ey *= t3;
			}
		}
		var dot1;
		var dot2;
		var cx1;
		var cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t4 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t4;
		}
		if(Jy > 0) {
			Jy = 0;
		}
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t5 = this.b1.imass;
		this.b1.posx -= J2x * t5;
		this.b1.posy -= J2y * t5;
		var t6 = this.b2.imass;
		this.b2.posx += J2x * t6;
		this.b2.posy += J2y * t6;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$LineJoint
});
var zpp_$nape_constraint_ZPP_$MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
$hxClasses["zpp_nape.constraint.ZPP_MotorJoint"] = zpp_$nape_constraint_ZPP_$MotorJoint;
zpp_$nape_constraint_ZPP_$MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_$nape_constraint_ZPP_$MotorJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$MotorJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,rate: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) {
				return nape_geom_Vec3.get(0,0,-this.jAcc);
			} else {
				return nape_geom_Vec3.get(0,0,this.ratio * this.jAcc);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,b2: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) {
				return true;
			}
		} else if(this.jAcc < -this.jMax) {
			this.jAcc = -this.jMax;
		} else if(this.jAcc > this.jMax) {
			this.jAcc = this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$MotorJoint
});
var zpp_$nape_constraint_ZPP_$PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PivotJoint"] = zpp_$nape_constraint_ZPP_$PivotJoint;
zpp_$nape_constraint_ZPP_$PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_$nape_constraint_ZPP_$PivotJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PivotJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) {
				return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely));
			} else {
				return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,jAccx: null
	,jAccy: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassc += X1 * this.a2relx;
		}
		var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
		var flag;
		if(det != det) {
			this.kMassa = this.kMassb = this.kMassc = 0;
			flag = 3;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassc != 0) {
				this.kMassc = 1 / this.kMassc;
			} else {
				this.kMassc = 0;
				flag1 |= 2;
			}
			this.kMassb = 0;
			flag = flag1;
		} else {
			det = 1 / det;
			var t = this.kMassc * det;
			this.kMassc = this.kMassa * det;
			this.kMassa = t;
			this.kMassb *= -det;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassc *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) {
				return true;
			}
			var t1 = -biasCoef;
			this.biasx *= t1;
			this.biasy *= t1;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t2 * t2) {
				var t3 = t2 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				this.biasx *= t3;
				this.biasy *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t4 = dtratio;
		this.jAccx *= t4;
		this.jAccy *= t4;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t1 = this.gamma;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t2 = 1.0;
		this.jAccx += Jx * t2;
		this.jAccy += Jy * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t3 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t3 * t3) {
				var t4 = t3 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				this.jAccx *= t4;
				this.jAccy *= t4;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t5 = this.b1.imass;
		this.b1.velx -= Jx * t5;
		this.b1.vely -= Jy * t5;
		var t6 = this.b2.imass;
		this.b2.velx += Jx * t6;
		this.b2.vely += Jy * t6;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) {
			return true;
		}
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t1 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t1 * t1) {
					var t2 = t1 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
					Jx *= t2;
					Jy *= t2;
				}
				var t3 = this.b1.imass;
				this.b1.posx -= Jx * t3;
				this.b1.posy -= Jy * t3;
				var t4 = this.b2.imass;
				this.b2.posx += Jx * t4;
				this.b2.posy += Jy * t4;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t5 = 0.5;
				Ex *= t5;
				Ey *= t5;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kc += X1 * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t6 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t6 * t6) {
			var t7 = t6 * zpp_$nape_util_ZPP_$Math.invsqrt(ls1);
			Jx *= t7;
			Jy *= t7;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) {
			Jy = 0;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kc != 0) {
				Jy /= Kc;
			} else {
				Jy = 0;
			}
		} else {
			det = 1 / det;
			var t8 = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t8;
		}
		var t9 = this.b1.imass;
		this.b1.posx -= Jx * t9;
		this.b1.posy -= Jy * t9;
		var t10 = this.b2.imass;
		this.b2.posx += Jx * t10;
		this.b2.posy += Jy * t10;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$PivotJoint
});
var zpp_$nape_constraint_ZPP_$PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_PulleyJoint"] = zpp_$nape_constraint_ZPP_$PulleyJoint;
zpp_$nape_constraint_ZPP_$PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_$nape_constraint_ZPP_$PulleyJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$PulleyJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,ratio: null
	,jointMin: null
	,jointMax: null
	,slack: null
	,equal: null
	,n12x: null
	,n12y: null
	,n34x: null
	,n34y: null
	,cx1: null
	,cx2: null
	,cx3: null
	,cx4: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape_geom_Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				_g.set_x(_g.get_x() - this.jAcc * this.n12x);
				var _g1 = ret;
				_g1.set_y(_g1.get_y() - this.jAcc * this.n12y);
				var _g2 = ret;
				_g2.set_z(_g2.get_z() - this.cx1 * this.jAcc);
			}
			if(b == this.b2) {
				var _g3 = ret;
				_g3.set_x(_g3.get_x() + this.jAcc * this.n12x);
				var _g4 = ret;
				_g4.set_y(_g4.get_y() + this.jAcc * this.n12y);
				var _g5 = ret;
				_g5.set_z(_g5.get_z() + this.cx2 * this.jAcc);
			}
			if(b == this.b3) {
				var _g6 = ret;
				_g6.set_x(_g6.get_x() - this.jAcc * this.n34x);
				var _g7 = ret;
				_g7.set_y(_g7.get_y() - this.jAcc * this.n34y);
				var _g8 = ret;
				_g8.set_z(_g8.get_z() - this.cx3 * this.jAcc);
			}
			if(b == this.b4) {
				var _g9 = ret;
				_g9.set_x(_g9.get_x() + this.jAcc * this.n34x);
				var _g10 = ret;
				_g10.set_y(_g10.get_y() + this.jAcc * this.n34y);
				var _g11 = ret;
				_g11.set_z(_g11.get_z() + this.cx4 * this.jAcc);
			}
			return ret;
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.add(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) {
				this.b3.constraints.remove(this);
			}
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) {
				this.b4.constraints.remove(this);
			}
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,b3: null
	,a3localx: null
	,a3localy: null
	,a3relx: null
	,a3rely: null
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,setup_a3: function() {
		this.wrap_a3 = nape_geom_Vec2.get(this.a3localx,this.a3localy);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,wrap_a3: null
	,b4: null
	,a4localx: null
	,a4localy: null
	,a4relx: null
	,a4rely: null
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,setup_a4: function() {
		this.wrap_a4 = nape_geom_Vec2.get(this.a4localx,this.a4localy);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,wrap_a4: null
	,kMass: null
	,jAcc: null
	,jMax: null
	,gamma: null
	,bias: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
		if(this.b3 != null && this.b3.isDynamic()) {
			this.b3.wake();
		}
		if(this.b4 != null && this.b4.isDynamic()) {
			this.b4.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
		if(this.b3.isDynamic()) {
			var xr2;
			if(this.b3.component == this.b3.component.parent) {
				xr2 = this.b3.component;
			} else {
				var obj4 = this.b3.component;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				xr2 = obj4;
			}
			var yr2;
			if(this.component == this.component.parent) {
				yr2 = this.component;
			} else {
				var obj5 = this.component;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				yr2 = obj5;
			}
			if(xr2 != yr2) {
				if(xr2.rank < yr2.rank) {
					xr2.parent = yr2;
				} else if(xr2.rank > yr2.rank) {
					yr2.parent = xr2;
				} else {
					yr2.parent = xr2;
					xr2.rank++;
				}
			}
		}
		if(this.b4.isDynamic()) {
			var xr3;
			if(this.b4.component == this.b4.component.parent) {
				xr3 = this.b4.component;
			} else {
				var obj6 = this.b4.component;
				var stack6 = null;
				while(obj6 != obj6.parent) {
					var nxt12 = obj6.parent;
					obj6.parent = stack6;
					stack6 = obj6;
					obj6 = nxt12;
				}
				while(stack6 != null) {
					var nxt13 = stack6.parent;
					stack6.parent = obj6;
					stack6 = nxt13;
				}
				xr3 = obj6;
			}
			var yr3;
			if(this.component == this.component.parent) {
				yr3 = this.component;
			} else {
				var obj7 = this.component;
				var stack7 = null;
				while(obj7 != obj7.parent) {
					var nxt14 = obj7.parent;
					obj7.parent = stack7;
					stack7 = obj7;
					obj7 = nxt14;
				}
				while(stack7 != null) {
					var nxt15 = stack7.parent;
					stack7.parent = obj7;
					stack7 = nxt15;
				}
				yr3 = obj7;
			}
			if(xr3 != yr3) {
				if(xr3.rank < yr3.rank) {
					xr3.parent = yr3;
				} else if(xr3.rank > yr3.rank) {
					yr3.parent = xr3;
				} else {
					yr3.parent = xr3;
					xr3.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di))) {
			if(this.b4.id == id) {
				if(!(this.b1.id == di || this.b2.id == di)) {
					return this.b3.id == di;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = zpp_$nape_util_ZPP_$Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = zpp_$nape_util_ZPP_$Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			this.n12x = t12x * t;
			this.n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			this.n34x = t34x * t1;
			this.n34y = t34y * t1;
			var t2 = this.ratio;
			this.n34x *= t2;
			this.n34y *= t2;
		} else {
			var t3 = this.ratio / zpp_$nape_util_ZPP_$Math.sqrt(this.n34x * this.n34x + this.n34y * this.n34y);
			this.n34x *= t3;
			this.n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			this.slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.n12x = -this.n12x;
			this.n12y = -this.n12y;
			this.n34x = -this.n34x;
			this.n34y = -this.n34y;
			this.slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.slack = false;
		} else {
			this.n12x = 0;
			this.n12y = 0;
			this.n34x = 0;
			this.n34y = 0;
			C = 0;
			this.slack = true;
		}
		var C1 = C;
		if(!this.slack) {
			this.cx1 = this.n12y * this.a1relx - this.n12x * this.a1rely;
			this.cx2 = this.n12y * this.a2relx - this.n12x * this.a2rely;
			this.cx3 = this.n34y * this.a3relx - this.n34x * this.a3rely;
			this.cx4 = this.n34y * this.a4relx - this.n34x * this.a4rely;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * this.cx1 * this.cx1 + this.b2.sinertia * this.cx2 * this.cx2 + this.b3.sinertia * this.cx3 * this.cx3 + this.b4.sinertia * this.cx4 * this.cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b1.smass + this.cx1 * this.cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((this.n12x * this.n34x + this.n12y * this.n34y) * this.b2.smass + this.cx2 * this.cx4 * this.b2.sinertia);
			}
			this.kMass = K;
			if(this.kMass != 0) {
				this.kMass = 1 / this.kMass;
			} else {
				this.jAcc = 0;
			}
			if(!this.stiff) {
				if(this.breakUnderError && C1 * C1 > this.maxError * this.maxError) {
					return true;
				}
				var biasCoef;
				var omega = 2 * Math.PI * this.frequency;
				this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
				var ig = 1 / (1 + this.gamma);
				biasCoef = dt * omega * omega * this.gamma;
				this.gamma *= ig;
				this.kMass *= ig;
				this.bias = -C1 * biasCoef;
				if(this.bias < -this.maxError) {
					this.bias = -this.maxError;
				} else if(this.bias > this.maxError) {
					this.bias = this.maxError;
				}
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t1 = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t1;
			this.b2.vely += this.n12y * t1;
			var t2 = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t2;
			this.b3.vely -= this.n34y * t2;
			var t3 = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t3;
			this.b4.vely += this.n34y * t3;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,applyImpulseVel: function() {
		if(this.slack) {
			return false;
		}
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) {
			this.jAcc = 0;
		}
		if(this.breakUnderForce && this.jAcc < -this.jMax) {
			return true;
		}
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) {
				this.jAcc = -this.jMax;
			}
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t1 = this.b2.imass * j;
		this.b2.velx += this.n12x * t1;
		this.b2.vely += this.n12y * t1;
		var t2 = this.b3.imass * j;
		this.b3.velx -= this.n34x * t2;
		this.b3.vely -= this.n34y * t2;
		var t3 = this.b4.imass * j;
		this.b4.velx += this.n34x * t3;
		this.b4.vely += this.n34y * t3;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + r2x - (this.b1.posx + r1x);
		t12y = this.b2.posy + r2y - (this.b1.posy + r1y);
		t34x = this.b4.posx + r4x - (this.b3.posx + r3x);
		t34y = this.b4.posy + r4y - (this.b3.posy + r3y);
		var C12 = zpp_$nape_util_ZPP_$Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = zpp_$nape_util_ZPP_$Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t1 = 1.0 / C34;
			n34x = t34x * t1;
			n34y = t34y * t1;
			var t2 = this.ratio;
			n34x *= t2;
			n34y *= t2;
		} else {
			var t3 = this.ratio / zpp_$nape_util_ZPP_$Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t3;
			n34y *= t3;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		E = C;
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) {
				return true;
			}
			if(E * E < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
				return false;
			}
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape_Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t4 = j * this.b1.imass;
						this.b1.posx -= n12x * t4;
						this.b1.posy -= n12y * t4;
						var t5 = j * this.b2.imass;
						this.b2.posx += n12x * t5;
						this.b2.posy += n12y * t5;
						var t6 = j * this.b3.imass;
						this.b3.posx -= n34x * t6;
						this.b3.posy -= n34y * t6;
						var t7 = j * this.b4.imass;
						this.b4.posx += n34x * t7;
						this.b4.posy += n34y * t7;
						var t12x1 = 0.0;
						var t12y1 = 0.0;
						var t34x1 = 0.0;
						var t34y1 = 0.0;
						t12x1 = this.b2.posx + r2x - (this.b1.posx + r1x);
						t12y1 = this.b2.posy + r2y - (this.b1.posy + r1y);
						t34x1 = this.b4.posx + r4x - (this.b3.posx + r3x);
						t34y1 = this.b4.posy + r4y - (this.b3.posy + r3y);
						var C121 = zpp_$nape_util_ZPP_$Math.sqrt(t12x1 * t12x1 + t12y1 * t12y1);
						var C341 = zpp_$nape_util_ZPP_$Math.sqrt(t34x1 * t34x1 + t34y1 * t34y1);
						if(C121 != 0) {
							var t8 = 1.0 / C121;
							n12x = t12x1 * t8;
							n12y = t12y1 * t8;
						}
						if(C341 != 0) {
							var t9 = 1.0 / C341;
							n34x = t34x1 * t9;
							n34y = t34y1 * t9;
							var t10 = this.ratio;
							n34x *= t10;
							n34y *= t10;
						} else {
							var t11 = this.ratio / zpp_$nape_util_ZPP_$Math.sqrt(n34x * n34x + n34y * n34y);
							n34x *= t11;
							n34y *= t11;
						}
						var C1 = C121 + this.ratio * C341;
						if(this.equal) {
							C1 -= this.jointMax;
							slack = false;
						} else if(C1 < this.jointMin) {
							C1 = this.jointMin - C1;
							n12x = -n12x;
							n12y = -n12y;
							n34x = -n34x;
							n34y = -n34y;
							slack = false;
						} else if(C1 > this.jointMax) {
							C1 -= this.jointMax;
							slack = false;
						} else {
							n12x = 0;
							n12y = 0;
							n34x = 0;
							n34y = 0;
							C1 = 0;
							slack = true;
						}
						E = C1;
						E *= 0.5;
					}
				}
			}
			var cx1;
			var cx2;
			var cx3;
			var cx4;
			cx1 = n12y * r1x - n12x * r1y;
			cx2 = n12y * r2x - n12x * r2y;
			cx3 = n34y * r3x - n34x * r3y;
			cx4 = n34y * r4x - n34x * r4y;
			var ratioSq = this.ratio * this.ratio;
			var K = this.b1.smass + this.b2.smass + ratioSq * (this.b3.smass + this.b4.smass) + this.b1.sinertia * cx1 * cx1 + this.b2.sinertia * cx2 * cx2 + this.b3.sinertia * cx3 * cx3 + this.b4.sinertia * cx4 * cx4;
			if(this.b1 == this.b4) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx4 * this.b1.sinertia);
			}
			if(this.b1 == this.b3) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b1.smass + cx1 * cx3 * this.b1.sinertia);
			}
			if(this.b2 == this.b3) {
				K -= 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx3 * this.b2.sinertia);
			}
			if(this.b2 == this.b4) {
				K += 2 * ((n12x * n34x + n12y * n34y) * this.b2.smass + cx2 * cx4 * this.b2.sinertia);
			}
			var k1 = K;
			if(k1 != 0) {
				k1 = 1 / k1;
			}
			j = -E * k1;
			if(this.equal || j < 0) {
				var t12 = this.b1.imass * j;
				this.b1.posx -= n12x * t12;
				this.b1.posy -= n12y * t12;
				var t13 = this.b2.imass * j;
				this.b2.posx += n12x * t13;
				this.b2.posy += n12y * t13;
				var t14 = this.b3.imass * j;
				this.b3.posx -= n34x * t14;
				this.b3.posy -= n34y * t14;
				var t15 = this.b4.imass * j;
				this.b4.posx += n34x * t15;
				this.b4.posy += n34y * t15;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$PulleyJoint
});
var zpp_$nape_constraint_ZPP_$UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.bodies = [];
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = [];
	this.bias = [];
	this.L = [];
	this.J = [];
	this.jOld = [];
	this.y = [];
	this.Keff = [];
	this.vec3 = nape_geom_Vec3.get(0,0,0);
	var _g1 = 0;
	var _g = dim;
	while(_g1 < _g) {
		var i = _g1++;
		var tmp = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		this.jAcc[i] = tmp;
		var _g3 = 0;
		var _g2 = dim;
		while(_g3 < _g2) {
			var j = _g3++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
$hxClasses["zpp_nape.constraint.ZPP_UserConstraint"] = zpp_$nape_constraint_ZPP_$UserConstraint;
zpp_$nape_constraint_ZPP_$UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_$nape_constraint_ZPP_$UserConstraint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$UserConstraint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bodies: null
	,dim: null
	,jAcc: null
	,bias: null
	,bodyImpulse: function(b) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape_geom_Vec3.get(0,0,0);
		if(this.stepped) {
			this.outer_zn.__impulse(this.J,b.outer,ret);
		}
		return ret;
	}
	,activeBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) {
				b.body.constraints.remove(this);
			}
		}
	}
	,stepped: null
	,wake_connected: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.isDynamic()) {
				b.body.wake();
			}
		}
	}
	,forest: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.isDynamic()) {
				var xr;
				if(b.body.component == b.body.component.parent) {
					xr = b.body.component;
				} else {
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt1 = stack.parent;
						stack.parent = obj;
						stack = nxt1;
					}
					xr = obj;
				}
				var yr;
				if(this.component == this.component.parent) {
					yr = this.component;
				} else {
					var obj1 = this.component;
					var stack1 = null;
					while(obj1 != obj1.parent) {
						var nxt2 = obj1.parent;
						obj1.parent = stack1;
						stack1 = obj1;
						obj1 = nxt2;
					}
					while(stack1 != null) {
						var nxt3 = stack1.parent;
						stack1.parent = obj1;
						stack1 = nxt3;
					}
					yr = obj1;
				}
				if(xr != yr) {
					if(xr.rank < yr.rank) {
						xr.parent = yr;
					} else if(xr.rank > yr.rank) {
						yr.parent = xr;
					} else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = Std["int"](this.bodies.length);
		var _g1 = 0;
		var _g = bl;
		while(_g1 < _g) {
			var bi = _g1++;
			var b = this.bodies[bi].body;
			var _g3 = bi + 1;
			var _g2 = bl;
			while(_g3 < _g2) {
				var ci = _g3++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) {
				break;
			}
		}
		return ret;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,clearcache: function() {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,L: null
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0;
			var _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g31 = j + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var i = _g31++;
					var sum1 = 0.0;
					var _g5 = 0;
					var _g4 = j - 1;
					while(_g5 < _g4) {
						var k1 = _g5++;
						sum1 += this.L[i * this.dim + k1] * this.L[j * this.dim + k1];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g32 = j + 1;
				var _g22 = this.dim;
				while(_g32 < _g22) {
					var i1 = _g32++;
					this.L[i1 * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,y: null
	,transform: function(L,x) {
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g3 = 0;
				var _g2 = i;
				while(_g3 < _g2) {
					var k = _g3++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else {
				this.y[i] = 0.0;
			}
		}
		var _g11 = 0;
		var _g4 = this.dim;
		while(_g11 < _g4) {
			var ix = _g11++;
			var i1 = this.dim - 1 - ix;
			var lii1 = L[i1 * this.dim + i1];
			if(lii1 != 0) {
				var sum1 = this.y[i1];
				var _g31 = i1 + 1;
				var _g21 = this.dim;
				while(_g31 < _g21) {
					var k1 = _g31++;
					sum1 -= L[k1 * this.dim + i1] * x[k1];
				}
				x[i1] = sum1 / lii1;
			} else {
				x[i1] = 0.0;
			}
		}
	}
	,soft: null
	,gamma: null
	,velonly: null
	,jMax: null
	,Keff: null
	,preStep: function(dt) {
		this.outer_zn.__validate();
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			this.soft = ig;
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) {
				return true;
			}
			var _g1 = 0;
			var _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g11 = 0;
			var _g2 = this.dim;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.bias[i1] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.jAcc[i2] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,vec3: null
	,warmStart: function() {
		var _g = 0;
		var _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,J: null
	,jOld: null
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g11 = 0;
		var _g2 = this.dim;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.jOld[i1] = this.jAcc[i1];
			this.jAcc[i1] += this.J[i1] = this.J[i1] * this.soft - this.jAcc[i1] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) {
				return true;
			} else if(!this.stiff) {
				this._clamp(this.jAcc,this.jMax);
			}
		}
		var _g12 = 0;
		var _g3 = this.dim;
		while(_g12 < _g3) {
			var i2 = _g12++;
			this.J[i2] = this.jAcc[i2] - this.jOld[i2];
		}
		var _g4 = 0;
		var _g13 = this.bodies;
		while(_g4 < _g13.length) {
			var bs = _g13[_g4];
			++_g4;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,applyImpulsePos: function() {
		if(this.velonly) {
			return false;
		}
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) {
			return true;
		} else if(lj < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			return false;
		}
		var _g1 = 0;
		var _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g2 = 0;
		var _g11 = this.bodies;
		while(_g2 < _g11.length) {
			var bs = _g11[_g2];
			++_g2;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$UserConstraint
});
var zpp_$nape_constraint_ZPP_$UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
$hxClasses["zpp_nape.constraint.ZPP_UserBody"] = zpp_$nape_constraint_ZPP_$UserBody;
zpp_$nape_constraint_ZPP_$UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_$nape_constraint_ZPP_$UserBody.prototype = {
	cnt: null
	,body: null
	,__class__: zpp_$nape_constraint_ZPP_$UserBody
};
var zpp_$nape_constraint_ZPP_$WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_$nape_constraint_ZPP_$Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = zpp_$nape_ZPP_$Const.POSINF();
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
$hxClasses["zpp_nape.constraint.ZPP_WeldJoint"] = zpp_$nape_constraint_ZPP_$WeldJoint;
zpp_$nape_constraint_ZPP_$WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_$nape_constraint_ZPP_$WeldJoint.__super__ = zpp_$nape_constraint_ZPP_$Constraint;
zpp_$nape_constraint_ZPP_$WeldJoint.prototype = $extend(zpp_$nape_constraint_ZPP_$Constraint.prototype,{
	outer_zn: null
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) {
				return nape_geom_Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz));
			} else {
				return nape_geom_Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
			}
		} else {
			return nape_geom_Vec3.get(0,0,0);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.add(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.add(this);
			}
		}
	}
	,inactiveBodies: function() {
		if(this.b1 != null) {
			this.b1.constraints.remove(this);
		}
		if(this.b2 != this.b1) {
			if(this.b2 != null) {
				this.b2.constraints.remove(this);
			}
		}
	}
	,b1: null
	,a1localx: null
	,a1localy: null
	,a1relx: null
	,a1rely: null
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,setup_a1: function() {
		this.wrap_a1 = nape_geom_Vec2.get(this.a1localx,this.a1localy);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,wrap_a1: null
	,b2: null
	,a2localx: null
	,a2localy: null
	,a2relx: null
	,a2rely: null
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,setup_a2: function() {
		this.wrap_a2 = nape_geom_Vec2.get(this.a2localx,this.a2localy);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,wrap_a2: null
	,phase: null
	,kMassa: null
	,kMassb: null
	,kMassd: null
	,kMassc: null
	,kMasse: null
	,kMassf: null
	,jAccx: null
	,jAccy: null
	,jAccz: null
	,jMax: null
	,gamma: null
	,biasx: null
	,biasy: null
	,biasz: null
	,stepped: null
	,wake_connected: function() {
		if(this.b1 != null && this.b1.isDynamic()) {
			this.b1.wake();
		}
		if(this.b2 != null && this.b2.isDynamic()) {
			this.b2.wake();
		}
	}
	,forest: function() {
		if(this.b1.isDynamic()) {
			var xr;
			if(this.b1.component == this.b1.component.parent) {
				xr = this.b1.component;
			} else {
				var obj = this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt1 = stack.parent;
					stack.parent = obj;
					stack = nxt1;
				}
				xr = obj;
			}
			var yr;
			if(this.component == this.component.parent) {
				yr = this.component;
			} else {
				var obj1 = this.component;
				var stack1 = null;
				while(obj1 != obj1.parent) {
					var nxt2 = obj1.parent;
					obj1.parent = stack1;
					stack1 = obj1;
					obj1 = nxt2;
				}
				while(stack1 != null) {
					var nxt3 = stack1.parent;
					stack1.parent = obj1;
					stack1 = nxt3;
				}
				yr = obj1;
			}
			if(xr != yr) {
				if(xr.rank < yr.rank) {
					xr.parent = yr;
				} else if(xr.rank > yr.rank) {
					yr.parent = xr;
				} else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.isDynamic()) {
			var xr1;
			if(this.b2.component == this.b2.component.parent) {
				xr1 = this.b2.component;
			} else {
				var obj2 = this.b2.component;
				var stack2 = null;
				while(obj2 != obj2.parent) {
					var nxt4 = obj2.parent;
					obj2.parent = stack2;
					stack2 = obj2;
					obj2 = nxt4;
				}
				while(stack2 != null) {
					var nxt5 = stack2.parent;
					stack2.parent = obj2;
					stack2 = nxt5;
				}
				xr1 = obj2;
			}
			var yr1;
			if(this.component == this.component.parent) {
				yr1 = this.component;
			} else {
				var obj3 = this.component;
				var stack3 = null;
				while(obj3 != obj3.parent) {
					var nxt6 = obj3.parent;
					obj3.parent = stack3;
					stack3 = obj3;
					obj3 = nxt6;
				}
				while(stack3 != null) {
					var nxt7 = stack3.parent;
					stack3.parent = obj3;
					stack3 = nxt7;
				}
				yr1 = obj3;
			}
			if(xr1 != yr1) {
				if(xr1.rank < yr1.rank) {
					xr1.parent = yr1;
				} else if(xr1.rank > yr1.rank) {
					yr1.parent = xr1;
				} else {
					yr1.parent = xr1;
					xr1.rank++;
				}
			}
		}
	}
	,pair_exists: function(id,di) {
		if(!(this.b1.id == id && this.b2.id == di)) {
			if(this.b1.id == di) {
				return this.b2.id == id;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = this.a2relx * this.b2.sinertia;
			var Y1 = this.a2rely * this.b2.sinertia;
			this.kMassa += Y1 * this.a2rely;
			this.kMassb += -Y1 * this.a2relx;
			this.kMassd += X1 * this.a2relx;
			this.kMassc += -Y1;
			this.kMasse += X1;
			this.kMassf += this.b2.sinertia;
		}
		var det = this.kMassa * (this.kMassd * this.kMassf - this.kMasse * this.kMasse) + this.kMassb * (this.kMassc * this.kMasse - this.kMassb * this.kMassf) + this.kMassc * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
		var flag;
		if(det != det) {
			this.kMassa = 0;
			this.kMassb = 0;
			this.kMassd = 0;
			this.kMassc = 0;
			this.kMasse = 0;
			this.kMassf = 0;
			flag = 7;
		} else if(det == 0) {
			var flag1 = 0;
			if(this.kMassa != 0) {
				this.kMassa = 1 / this.kMassa;
			} else {
				this.kMassa = 0;
				flag1 |= 1;
			}
			if(this.kMassd != 0) {
				this.kMassd = 1 / this.kMassd;
			} else {
				this.kMassd = 0;
				flag1 |= 2;
			}
			if(this.kMassf != 0) {
				this.kMassf = 1 / this.kMassf;
			} else {
				this.kMassf = 0;
				flag1 |= 4;
			}
			this.kMassb = this.kMassc = this.kMasse = 0.0;
			flag = flag1;
		} else {
			det = 1 / det;
			var A = det * (this.kMassd * this.kMassf - this.kMasse * this.kMasse);
			var B = det * (this.kMasse * this.kMassc - this.kMassb * this.kMassf);
			var D = det * (this.kMassa * this.kMassf - this.kMassc * this.kMassc);
			var C = det * (this.kMassb * this.kMasse - this.kMassc * this.kMassd);
			var E = det * (this.kMassb * this.kMassc - this.kMassa * this.kMasse);
			var F = det * (this.kMassa * this.kMassd - this.kMassb * this.kMassb);
			this.kMassa = A;
			this.kMassb = B;
			this.kMassd = D;
			this.kMassc = C;
			this.kMasse = E;
			this.kMassf = F;
			flag = 0;
		}
		if((flag & 1) != 0) {
			this.jAccx = 0;
		}
		if((flag & 2) != 0) {
			this.jAccy = 0;
		}
		if((flag & 4) != 0) {
			this.jAccz = 0;
		}
		if(!this.stiff) {
			var biasCoef;
			var omega = 2 * Math.PI * this.frequency;
			this.gamma = 1 / (dt * omega * (2 * this.damping + omega * dt));
			var ig = 1 / (1 + this.gamma);
			biasCoef = dt * omega * omega * this.gamma;
			this.gamma *= ig;
			var X2 = ig;
			this.kMassa *= X2;
			this.kMassb *= X2;
			this.kMassd *= X2;
			this.kMassc *= X2;
			this.kMasse *= X2;
			this.kMassf *= X2;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) {
				return true;
			}
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t2 = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t2 * t2) {
				var t3 = t2 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				var t4 = t3;
				this.biasx *= t4;
				this.biasy *= t4;
				this.biasz *= t3;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t5 = dtratio;
		var t6 = t5;
		this.jAccx *= t6;
		this.jAccy *= t6;
		this.jAccz *= t5;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.jAccx * t1;
		this.b2.vely += this.jAccy * t1;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t2 = 1;
		var t3 = t2;
		this.jAccx += Jx * t3;
		this.jAccy += Jy * t3;
		this.jAccz += Jz * t2;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) {
				return true;
			}
		} else if(!this.stiff) {
			var t4 = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t4 * t4) {
				var t5 = t4 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
				var t6 = t5;
				this.jAccx *= t6;
				this.jAccy *= t6;
				this.jAccz *= t5;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t7 = this.b1.imass;
		this.b1.velx -= Jx * t7;
		this.b1.vely -= Jy * t7;
		var t8 = this.b2.imass;
		this.b2.velx += Jx * t8;
		this.b2.vely += Jy * t8;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) {
			return true;
		}
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape_Config.constraintLinearSlop * nape_Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(zpp_$nape_util_ZPP_$Math.sqr(Ez) < zpp_$nape_util_ZPP_$Math.sqr(nape_Config.constraintAngularSlop)) {
			if(!cont) {
				return false;
			} else {
				Ez = 0;
			}
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape_Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t2 = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t2 * t2) {
					var t3 = t2 * zpp_$nape_util_ZPP_$Math.invsqrt(ls);
					Jx *= t3;
					Jy *= t3;
				}
				var t4 = this.b1.imass;
				this.b1.posx -= Jx * t4;
				this.b1.posy -= Jy * t4;
				var t5 = this.b2.imass;
				this.b2.posx += Jx * t5;
				this.b2.posy += Jy * t5;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t6 = 0.5;
				var t7 = t6;
				Ex *= t7;
				Ey *= t7;
				Ez *= t6;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X1 = r2x * this.b2.sinertia;
			var Y1 = r2y * this.b2.sinertia;
			Ka += Y1 * r2y;
			Kb += -Y1 * r2x;
			Kd += X1 * r2x;
			Kc += -Y1;
			Ke += X1;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t8 = 6;
		var ls1 = Jx * Jx + Jy * Jy;
		if(ls1 > t8 * t8) {
			var t9 = t8 * zpp_$nape_util_ZPP_$Math.invsqrt(ls1);
			Jx *= t9;
			Jy *= t9;
		}
		zpp_$nape_util_ZPP_$Math.clamp2(Jz,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) {
			Jz = 0;
			Jy = Jz;
			Jx = Jy;
		} else if(det == 0) {
			if(Ka != 0) {
				Jx /= Ka;
			} else {
				Jx = 0;
			}
			if(Kd != 0) {
				Jy /= Kd;
			} else {
				Jy = 0;
			}
			if(Kf != 0) {
				Jz /= Kf;
			} else {
				Jz = 0;
			}
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X2 = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y2 = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X2;
			Jy = Y2;
		}
		var t10 = this.b1.imass;
		this.b1.posx -= Jx * t10;
		this.b1.posy -= Jy * t10;
		var t11 = this.b2.imass;
		this.b2.posx += Jx * t11;
		this.b2.posy += Jy * t11;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,__class__: zpp_$nape_constraint_ZPP_$WeldJoint
});
var zpp_$nape_dynamics_ZPP_$Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.outer = null;
};
$hxClasses["zpp_nape.dynamics.ZPP_Arbiter"] = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_$nape_dynamics_ZPP_$Arbiter.prototype = {
	outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = true;
			if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				this.colarb.outer_zn = new nape_dynamics_CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape_dynamics_FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else {
				this.outer = new nape_dynamics_Arbiter();
			}
			this.outer.zpp_inner = this;
			zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
		}
		return this.outer;
	}
	,id: null
	,di: null
	,stamp: null
	,up_stamp: null
	,sleep_stamp: null
	,endGenerated: null
	,active: null
	,cleared: null
	,sleeping: null
	,present: null
	,intchange: null
	,presentable: null
	,continuous: null
	,fresh: null
	,immState: null
	,acting: function() {
		if(this.active) {
			return (this.immState & 1) != 0;
		} else {
			return false;
		}
	}
	,invalidated: null
	,b1: null
	,b2: null
	,ws1: null
	,ws2: null
	,pair: null
	,type: null
	,colarb: null
	,fluidarb: null
	,sensorarb: null
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) {
			this.b1.arbiters.inlined_remove(this);
		}
		if(b == null || this.b1 == b) {
			this.b2.arbiters.inlined_remove(this);
		}
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_remove(this);
			this.b2.arbiters.inlined_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Arbiter
};
var zpp_$nape_dynamics_ZPP_$SensorArbiter = function() {
	this.next = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR;
	this.sensorarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_SensorArbiter"] = zpp_$nape_dynamics_ZPP_$SensorArbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_$nape_dynamics_ZPP_$SensorArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$SensorArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	next: null
	,alloc: function() {
	}
	,free: function() {
	}
	,assign: function(s1,s2,id,di) {
		this.sup_assign(s1,s2,id,di);
	}
	,retire: function() {
		this.sup_retire();
		var o = this;
		o.free();
		o.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SensorArbiter
});
var zpp_$nape_dynamics_ZPP_$FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_FluidArbiter"] = zpp_$nape_dynamics_ZPP_$FluidArbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_$nape_dynamics_ZPP_$FluidArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$FluidArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	outer_zn: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
	}
	,centroidx: null
	,centroidy: null
	,overlap: null
	,r1x: null
	,r1y: null
	,r2x: null
	,r2y: null
	,nodrag: null
	,wMass: null
	,adamp: null
	,agamma: null
	,vMassa: null
	,vMassb: null
	,vMassc: null
	,dampx: null
	,dampy: null
	,lgamma: null
	,nx: null
	,ny: null
	,buoyx: null
	,buoyy: null
	,assign: function(s1,s2,id,di) {
		this.sup_assign(s1,s2,id,di);
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,retire: function() {
		this.sup_retire();
		var o = this;
		o.free();
		o.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,pre_dt: null
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t1 = mass1 + mass2;
				buoyx += g2x * t1;
				buoyy += g2y * t1;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t2 = 0.5;
				gx *= t2;
				gy *= t2;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t3 = mass1 + mass2;
					buoyx -= gx * t3;
					buoyy -= gy * t3;
				} else {
					var t4 = mass1 + mass2;
					buoyx += gx * t4;
					buoyy += gy * t4;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t5 = mass;
			buoyx -= g1x * t5;
			buoyy -= g1y * t5;
		} else if(this.ws2.fluidEnabled) {
			var mass3 = this.overlap * this.ws2.fluidProperties.density;
			var t6 = mass3;
			buoyx += g2x * t6;
			buoyy += g2y * t6;
		}
		var t7 = dt;
		buoyx *= t7;
		buoyy *= t7;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.isDynamic()) {
			var t8 = this.b1.imass;
			this.b1.velx -= buoyx * t8;
			this.b1.vely -= buoyy * t8;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.isDynamic()) {
			var t9 = this.b2.imass;
			this.b2.velx += buoyx * t9;
			this.b2.vely += buoyy * t9;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) {
					this.wMass = 1 / iSum;
				} else {
					this.wMass = 0.0;
				}
				var biasCoef;
				tViscosity *= 0.0004;
				var omega = 2 * Math.PI * tViscosity;
				this.agamma = 1 / (dt * omega * (2 + omega * dt));
				var ig = 1 / (1 + this.agamma);
				biasCoef = dt * omega * omega * this.agamma;
				this.agamma *= ig;
				this.wMass *= ig;
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(!(vrnx * vrnx + vrny * vrny < nape_Config.epsilon * nape_Config.epsilon)) {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = zpp_$nape_util_ZPP_$Math.invsqrt(d);
				var t10 = imag;
				vrnx *= t10;
				vrny *= t10;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == 0) {
					tViscosity1 -= f * this.ws2.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI);
				} else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.begin();
					while(cx_ite != null) {
						var ex = cx_ite.elem();
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) {
							fact *= -nape_Config.fluidVacuumDrag;
							fact = fact;
						}
						acc -= fact * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f1 = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == 0) {
					tViscosity1 -= f1 * this.ws1.circle.radius * nape_Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI);
				} else {
					var poly1 = this.ws1.polygon;
					var bord1 = 0.0;
					var acc1 = 0.0;
					var cx_ite1 = poly1.edges.begin();
					while(cx_ite1 != null) {
						var ex1 = cx_ite1.elem();
						bord1 += ex1.length;
						var fact1 = f1 * ex1.length * (ex1.gnormx * this.nx + ex1.gnormy * this.ny);
						if(fact1 > 0) {
							fact1 *= -nape_Config.fluidVacuumDrag;
							fact1 = fact1;
						}
						acc1 -= fact1 * 0.5 * nape_Config.fluidLinearDrag;
						cx_ite1 = cx_ite1.next;
					}
					tViscosity1 += acc1 / bord1;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X1 = this.r2x * this.b2.sinertia;
					var Y1 = this.r2y * this.b2.sinertia;
					Ka += Y1 * this.r2y;
					Kb += -Y1 * this.r2x;
					Kc += X1 * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Kc = 0;
					Kb = Kc;
					Ka = Kb;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) {
						Ka = 1 / Ka;
					} else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) {
						Kc = 1 / Kc;
					} else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
				} else {
					det = 1 / det;
					var t11 = Kc * det;
					Kc = Ka * det;
					Ka = t11;
					Kb *= -det;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef1;
				var omega1 = 2 * Math.PI * tViscosity1;
				this.lgamma = 1 / (dt * omega1 * (2 + omega1 * dt));
				var ig1 = 1 / (1 + this.lgamma);
				biasCoef1 = dt * omega1 * omega1 * this.lgamma;
				this.lgamma *= ig1;
				var X2 = ig1;
				this.vMassa *= X2;
				this.vMassb *= X2;
				this.vMassc *= X2;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t12 = dtratio;
		this.dampx *= t12;
		this.dampy *= t12;
		this.adamp *= dtratio;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t1 = this.b2.imass;
		this.b2.velx += this.dampx * t1;
		this.b2.vely += this.dampy * t1;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t1 = this.lgamma;
			jx -= this.dampx * t1;
			jy -= this.dampy * t1;
			var t2 = 1.0;
			this.dampx += jx * t2;
			this.dampy += jy * t2;
			var t3 = this.b1.imass;
			this.b1.velx -= jx * t3;
			this.b1.vely -= jy * t3;
			var t4 = this.b2.imass;
			this.b2.velx += jx * t4;
			this.b2.vely += jy * t4;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$FluidArbiter
});
var zpp_$nape_dynamics_ZPP_$ColArbiter = function() {
	this.pre_dt = 0.0;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_$nape_dynamics_ZPP_$Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_$nape_dynamics_ZPP_$Contact();
	this.innards = new zpp_$nape_dynamics_ZPP_$IContact();
	this.type = zpp_$nape_dynamics_ZPP_$Arbiter.COL;
	this.colarb = this;
};
$hxClasses["zpp_nape.dynamics.ZPP_ColArbiter"] = zpp_$nape_dynamics_ZPP_$ColArbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_$nape_dynamics_ZPP_$ColArbiter.__super__ = zpp_$nape_dynamics_ZPP_$Arbiter;
zpp_$nape_dynamics_ZPP_$ColArbiter.prototype = $extend(zpp_$nape_dynamics_ZPP_$Arbiter.prototype,{
	outer_zn: null
	,dyn_fric: null
	,stat_fric: null
	,restitution: null
	,rfric: null
	,userdef_dyn_fric: null
	,userdef_stat_fric: null
	,userdef_restitution: null
	,userdef_rfric: null
	,s1: null
	,s2: null
	,contacts: null
	,innards: null
	,nx: null
	,ny: null
	,kMassa: null
	,kMassb: null
	,kMassc: null
	,Ka: null
	,Kb: null
	,Kc: null
	,rMass: null
	,jrAcc: null
	,rn1a: null
	,rt1a: null
	,rn1b: null
	,rt1b: null
	,rn2a: null
	,rt2a: null
	,rn2b: null
	,rt2b: null
	,k1x: null
	,k1y: null
	,k2x: null
	,k2y: null
	,surfacex: null
	,surfacey: null
	,ptype: null
	,lnormx: null
	,lnormy: null
	,lproj: null
	,radius: null
	,rev: null
	,biasCoef: null
	,__ref_edge1: null
	,__ref_edge2: null
	,__ref_vertex: null
	,c1: null
	,oc1: null
	,c2: null
	,oc2: null
	,hc2: null
	,hpc2: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,stat: null
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) {
			posOnly = false;
		}
		var c = null;
		var cx_ite = this.contacts.begin();
		while(cx_ite != null) {
			var cur = cx_ite.elem();
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_$nape_dynamics_ZPP_$Contact.zpp_pool == null) {
				c = new zpp_$nape_dynamics_ZPP_$Contact();
			} else {
				c = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = c.next;
				c.next = null;
			}
			c.alloc();
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else {
			c.fresh = false;
		}
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,assign: function(s1,s2,id,di) {
		this.sup_assign(s1,s2,id,di);
		this.s1 = s1;
		this.s2 = s2;
		this.calcProperties();
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= zpp_$nape_ZPP_$Const.NEGINF() || this.s2.material.elasticity <= zpp_$nape_ZPP_$Const.NEGINF()) {
				this.restitution = 0;
			} else if(this.s1.material.elasticity >= zpp_$nape_ZPP_$Const.POSINF() || this.s2.material.elasticity >= zpp_$nape_ZPP_$Const.POSINF()) {
				this.restitution = 1;
			} else {
				this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			}
			if(this.restitution < 0) {
				this.restitution = 0;
			}
			if(this.restitution > 1) {
				this.restitution = 1;
			}
		}
		if(!this.userdef_dyn_fric) {
			this.dyn_fric = zpp_$nape_util_ZPP_$Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		}
		if(!this.userdef_stat_fric) {
			this.stat_fric = zpp_$nape_util_ZPP_$Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		}
		if(!this.userdef_rfric) {
			this.rfric = zpp_$nape_util_ZPP_$Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			this.calcProperties();
		}
	}
	,retire: function() {
		this.sup_retire();
		while(!this.contacts.empty()) {
			var o = this.contacts.inlined_pop_unsafe();
			o.free();
			o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
			zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o1 = this;
		o1.free();
		o1.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o1;
		this.pre_dt = -1.0;
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.begin();
		this.hc2 = false;
		var cx_ite = this.contacts.begin();
		while(cx_ite != null) {
			var c = cx_ite.elem();
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.free();
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) {
				this.contacts.modified = true;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) {
				this.hc2 = false;
			}
			if(this.oc1.posOnly) {
				fst = true;
			}
		} else {
			this.hpc2 = false;
		}
		return fst;
	}
	,pre_dt: null
	,preStep: function(dt) {
		this.validate_props();
		if(this.pre_dt == -1.0) {
			this.pre_dt = dt;
		}
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !this.b1.isDynamic() || !this.b2.isDynamic();
		var bias = statType ? this.continuous ? nape_Config.contactContinuousStaticBiasCoef : nape_Config.contactStaticBiasCoef : this.continuous ? nape_Config.contactContinuousBiasCoef : nape_Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.begin();
		var cx_ite = this.contacts.begin();
		while(cx_ite != null) {
			var c = cx_ite.elem();
			if(c.stamp + nape_Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.free();
				o.next = zpp_$nape_dynamics_ZPP_$Contact.zpp_pool;
				zpp_$nape_dynamics_ZPP_$Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				ci.tMass = kt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_$nape_util_ZPP_$Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				ci.nMass = nt < nape_Config.epsilon * nape_Config.epsilon ? 0 : 1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape_Config.elasticThreshold) {
					ci.bounce = 0;
				}
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape_Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) {
					ci.friction = this.dyn_fric;
				} else {
					ci.friction = this.stat_fric;
				}
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) {
				this.contacts.modified = true;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) {
				this.hc2 = false;
			}
			if(this.oc1.posOnly) {
				fst = true;
			}
		} else {
			this.hpc2 = false;
		}
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape_Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) {
						this.kMassa = 1 / this.kMassa;
					} else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) {
						this.kMassc = 1 / this.kMassc;
					} else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t1 = this.c1;
					this.c1 = this.c2;
					this.c2 = t1;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t2 = 1.0;
		this.surfacex += this.b1.svelx * t2;
		this.surfacey += this.b1.svely * t2;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) {
			this.rMass = 1 / this.rMass;
		}
		return fst;
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t1 = this.b2.imass;
		this.b2.velx += jx * t1;
		this.b2.vely += jy * t1;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx1 = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy1 = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t2 = this.b1.imass;
			this.b1.velx -= jx1 * t2;
			this.b1.vely -= jy1 * t2;
			this.b1.angvel -= this.b1.iinertia * (jy1 * this.c2.r1x - jx1 * this.c2.r1y);
			var t3 = this.b2.imass;
			this.b2.velx += jx1 * t3;
			this.b2.vely += jy1 * t3;
			this.b2.angvel += this.b2.iinertia * (jy1 * this.c2.r2x - jx1 * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) {
			cjAcc = jMax;
		} else if(cjAcc < -jMax) {
			cjAcc = -jMax;
		}
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) {
				cjAcc = jMax;
			} else if(cjAcc < -jMax) {
				cjAcc = -jMax;
			}
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) {
					this.jrAcc = jMax;
				} else if(this.jrAcc < -jMax) {
					this.jrAcc = -jMax;
				}
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) {
				cjAcc = 0.0;
			}
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t1 = 1.0;
			r1x += this.b1.posx * t1;
			r1y += this.b1.posy * t1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = zpp_$nape_util_ZPP_$Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape_Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape_Config.epsilon) {
					if(this.b1.smass != 0.0) {
						this.b1.posx += nape_Config.epsilon * 10;
					} else {
						this.b2.posx += nape_Config.epsilon * 10;
					}
				} else {
					var t2 = 1.0 / dl;
					dx1 *= t2;
					dy1 *= t2;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t3 = jn;
						Jx = dx1 * t3;
						Jy = dy1 * t3;
						var t4 = this.b1.imass;
						this.b1.posx -= Jx * t4;
						this.b1.posy -= Jy * t4;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t5 = this.b2.imass;
						this.b2.posx += Jx * t5;
						this.b2.posy += Jy * t5;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t6 = 1.0;
				clip1x += this.b2.posx * t6;
				clip1y += this.b2.posy * t6;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t7 = 1.0;
					clip2x += this.b2.posx * t7;
					clip2y += this.b2.posy * t7;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t8 = 1.0;
				clip1x += this.b1.posx * t8;
				clip1y += this.b1.posy * t8;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t9 = 1.0;
					clip2x += this.b1.posx * t9;
					clip2y += this.b1.posy * t9;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape_Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape_Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					while(true) {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) {
							xy = 0;
							xx = xy;
						} else if(det == 0) {
							if(this.kMassa != 0) {
								xx /= this.kMassa;
							} else {
								xx = 0;
							}
							if(this.kMassc != 0) {
								xy /= this.kMassc;
							} else {
								xy = 0;
							}
						} else {
							det = 1 / det;
							var t10 = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t10;
						}
						if(xx >= 0 && xy >= 0) {
							var t11 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t11;
							this.b1.posy -= gnormy * t11;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t12 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t12;
							this.b2.posy += gnormy * t12;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t13 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t13;
							this.b1.posy -= gnormy * t13;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t14 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t14;
							this.b2.posy += gnormy * t14;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t15 = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t15;
							this.b1.posy -= gnormy * t15;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t16 = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t16;
							this.b2.posy += gnormy * t16;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						if(!false) {
							break;
						}
					}
				} else {
					var rn11 = gnormy * c1r1x - gnormx * c1r1y;
					var rn21 = gnormy * c1r2x - gnormx * c1r2y;
					var K1 = this.b2.smass + rn21 * rn21 * this.b2.sinertia + this.b1.smass + rn11 * rn11 * this.b1.sinertia;
					if(K1 != 0) {
						var jn1 = -this.biasCoef * err1 / K1;
						var Jx1 = 0.0;
						var Jy1 = 0.0;
						var t17 = jn1;
						Jx1 = gnormx * t17;
						Jy1 = gnormy * t17;
						var t18 = this.b1.imass;
						this.b1.posx -= Jx1 * t18;
						this.b1.posy -= Jy1 * t18;
						this.b1.delta_rot(-rn11 * this.b1.iinertia * jn1);
						var t19 = this.b2.imass;
						this.b2.posx += Jx1 * t19;
						this.b2.posy += Jy1 * t19;
						this.b2.delta_rot(rn21 * this.b2.iinertia * jn1);
					}
				}
			}
		}
	}
	,__class__: zpp_$nape_dynamics_ZPP_$ColArbiter
});
var zpp_$nape_dynamics_ZPP_$Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$IContact();
};
$hxClasses["zpp_nape.dynamics.ZPP_Contact"] = zpp_$nape_dynamics_ZPP_$Contact;
zpp_$nape_dynamics_ZPP_$Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_$nape_dynamics_ZPP_$Contact.prototype = {
	outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_dynamics_ZPP_$Contact.internal = true;
			this.outer = new nape_dynamics_Contact();
			zpp_$nape_dynamics_ZPP_$Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,px: null
	,py: null
	,arbiter: null
	,inner: null
	,active: null
	,posOnly: null
	,stamp: null
	,hash: null
	,fresh: null
	,dist: null
	,elasticity: null
	,free: function() {
		this.arbiter = null;
	}
	,alloc: function() {
	}
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.begin();
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.next = ret.next;
		ret.elem()._inuse = false;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.next = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old.elem()._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_dynamics_ZPP_$Contact
};
var zpp_$nape_dynamics_ZPP_$IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
$hxClasses["zpp_nape.dynamics.ZPP_IContact"] = zpp_$nape_dynamics_ZPP_$IContact;
zpp_$nape_dynamics_ZPP_$IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_$nape_dynamics_ZPP_$IContact.prototype = {
	r1x: null
	,r1y: null
	,r2x: null
	,r2y: null
	,nMass: null
	,tMass: null
	,bounce: null
	,friction: null
	,jnAcc: null
	,jtAcc: null
	,lr1x: null
	,lr1y: null
	,lr2x: null
	,lr2y: null
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.begin();
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.next = ret.next;
		ret.elem()._inuse = false;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.next = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old.elem()._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$IContact
};
var zpp_$nape_dynamics_ZPP_$InteractionGroup = function() {
	this.depth = 0;
	this.interactors = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this.interactors = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
};
$hxClasses["zpp_nape.dynamics.ZPP_InteractionGroup"] = zpp_$nape_dynamics_ZPP_$InteractionGroup;
zpp_$nape_dynamics_ZPP_$InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_$nape_dynamics_ZPP_$InteractionGroup.prototype = {
	outer: null
	,ignore: null
	,group: null
	,groups: null
	,interactors: null
	,depth: null
	,invalidate: function(force) {
		if(force == null) {
			force = false;
		}
		if(!(force || this.ignore)) {
			return;
		}
		var cx_ite = this.interactors.begin();
		while(cx_ite != null) {
			var b = cx_ite.elem();
			if(b.isBody()) {
				b.ibody.wake();
			} else if(b.isShape()) {
				b.ishape.body.wake();
			} else {
				b.icompound.wake();
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.groups.begin();
		while(cx_ite1 != null) {
			var g = cx_ite1.elem();
			g.invalidate(force);
			cx_ite1 = cx_ite1.next;
		}
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remInteractor: function(intx,flag) {
		if(flag == null) {
			flag = -1;
		}
		this.interactors.remove(intx);
	}
	,__class__: zpp_$nape_dynamics_ZPP_$InteractionGroup
};
var zpp_$nape_dynamics_ZPP_$SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape_dynamics_ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = [];
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
$hxClasses["zpp_nape.dynamics.ZPP_SpaceArbiterList"] = zpp_$nape_dynamics_ZPP_$SpaceArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.__super__ = nape_dynamics_ArbiterList;
zpp_$nape_dynamics_ZPP_$SpaceArbiterList.prototype = $extend(nape_dynamics_ArbiterList.prototype,{
	space: null
	,_length: null
	,zip_length: null
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.active) {
					++len;
				}
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len1 = 0;
			var cx_ite1 = this.space.c_arbiters_false.begin();
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elem();
				if(i1.active) {
					++len1;
				}
				cx_ite1 = cx_ite1.next;
			}
			this.lengths[ind++] = len1;
			this._length += len1;
			var len2 = 0;
			var cx_ite2 = this.space.f_arbiters.begin();
			while(cx_ite2 != null) {
				var i2 = cx_ite2.elem();
				if(i2.active) {
					++len2;
				}
				cx_ite2 = cx_ite2.next;
			}
			this.lengths[ind++] = len2;
			this._length += len2;
			var len3 = 0;
			var cx_ite3 = this.space.s_arbiters.begin();
			while(cx_ite3 != null) {
				var i3 = cx_ite3.elem();
				if(i3.active) {
					++len3;
				}
				cx_ite3 = cx_ite3.next;
			}
			this.lengths[ind++] = len3;
			this._length += len3;
			this.zip_length = false;
		}
		return this._length;
	}
	,lengths: null
	,ite_0: null
	,ite_1: null
	,ite_2: null
	,ite_3: null
	,at_index_0: null
	,at_index_1: null
	,at_index_2: null
	,at_index_3: null
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.begin();
					while(true) {
						var x = this.ite_0.elem();
						if(x.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x1 = this.ite_0.elem();
						if(x1.active) {
							break;
						}
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elem().wrapper();
			} else {
				accum_length += this.lengths[0];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset1 = index - accum_length;
				if(offset1 < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.begin();
					while(true) {
						var x2 = this.ite_1.elem();
						if(x2.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset1) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x3 = this.ite_1.elem();
						if(x3.active) {
							break;
						}
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elem().wrapper();
			} else {
				accum_length += this.lengths[1];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset2 = index - accum_length;
				if(offset2 < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.begin();
					while(true) {
						var x4 = this.ite_2.elem();
						if(x4.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset2) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x5 = this.ite_2.elem();
						if(x5.active) {
							break;
						}
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elem().wrapper();
			} else {
				accum_length += this.lengths[2];
			}
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset3 = index - accum_length;
				if(offset3 < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.begin();
					while(true) {
						var x6 = this.ite_3.elem();
						if(x6.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset3) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x7 = this.ite_3.elem();
						if(x7.active) {
							break;
						}
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elem().wrapper();
			} else {
				accum_length += this.lengths[3];
			}
		}
		return ret;
	}
	,__class__: zpp_$nape_dynamics_ZPP_$SpaceArbiterList
});
var zpp_$nape_geom_ZPP_$AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
$hxClasses["zpp_nape.geom.ZPP_AABB"] = zpp_$nape_geom_ZPP_$AABB;
zpp_$nape_geom_ZPP_$AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_$nape_geom_ZPP_$AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$AABB();
	} else {
		ret = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
};
zpp_$nape_geom_ZPP_$AABB.prototype = {
	_invalidate: null
	,_validate: null
	,_immutable: null
	,validate: function() {
		if(this._validate != null) {
			this._validate();
		}
	}
	,outer: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,perimeter: function() {
		return (this.width() + this.height()) * 2;
	}
	,minx: null
	,miny: null
	,wrap_min: null
	,maxx: null
	,maxy: null
	,wrap_max: null
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersect: function(x) {
		if(x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx) {
			return this.minx <= x.maxx;
		} else {
			return false;
		}
	}
	,combine: function(x) {
		if(x.minx < this.minx) {
			this.minx = x.minx;
		}
		if(x.maxx > this.maxx) {
			this.maxx = x.maxx;
		}
		if(x.miny < this.miny) {
			this.miny = x.miny;
		}
		if(x.maxy > this.maxy) {
			this.maxy = x.maxy;
		}
	}
	,contains: function(x) {
		if(x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx) {
			return x.maxy <= this.maxy;
		} else {
			return false;
		}
	}
	,setCombine: function(a,b) {
		this.minx = a.minx < b.minx ? a.minx : b.minx;
		this.miny = a.miny < b.miny ? a.miny : b.miny;
		this.maxx = a.maxx > b.maxx ? a.maxx : b.maxx;
		this.maxy = a.maxy > b.maxy ? a.maxy : b.maxy;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + this.width() + " h: " + this.height() + " }";
	}
	,__class__: zpp_$nape_geom_ZPP_$AABB
};
var zpp_$nape_util_ZNPList_$ZPP_$Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Vec2"] = zpp_$nape_util_ZNPList_$ZPP_$Vec2;
zpp_$nape_util_ZNPList_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_$nape_util_ZNPList_$ZPP_$Vec2.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Vec2();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Vec2
};
var zpp_$nape_geom_ZPP_$Collide = function() { };
$hxClasses["zpp_nape.geom.ZPP_Collide"] = zpp_$nape_geom_ZPP_$Collide;
zpp_$nape_geom_ZPP_$Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_$nape_geom_ZPP_$Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.isPolygon()) {
		if(s1.isPolygon()) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.begin();
			while(cx_ite != null) {
				var ax = cx_ite.elem();
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.begin();
				while(cx_ite1 != null) {
					var v = cx_ite1.elem();
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(min - ax.gprojection <= max) {
						break;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.begin();
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elem();
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.begin();
					while(cx_ite3 != null) {
						var v1 = cx_ite3.elem();
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(min1 - ax1.gprojection <= max) {
							break;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 >= 0) {
						cont = false;
						break;
					}
					if(min1 > max) {
						max = min1;
						axis2 = ax1;
						maxi = 2;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(!cont) {
					return false;
				} else {
					var q1;
					var q2;
					var ax2;
					var scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax2 = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax2 = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite4 = q2.edges.begin();
					while(cx_ite4 != null) {
						var axis = cx_ite4.elem();
						var k2 = ax2.gnormx * axis.gnormx + ax2.gnormy * axis.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = axis;
						}
						cx_ite4 = cx_ite4.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax2.gnormy * c0x - ax2.gnormx * c0y;
					var d1 = ax2.gnormy * c1x - ax2.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax2.tp1 - d0) * den;
					if(t > nape_Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t2 = (-ax2.tp0 - d1) * den;
					if(t2 < -nape_Config.epsilon) {
						var t3 = t2;
						c1x += dvx * t3;
						c1y += dvy * t3;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t4 = scale;
					nx = ax2.gnormx * t4;
					ny = ax2.gnormy * t4;
					arb.lnormx = ax2.lnormx;
					arb.lnormy = ax2.lnormy;
					arb.lproj = ax2.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev ? 1 : 0;
					var c0d = c0x * ax2.gnormx + c0y * ax2.gnormy - ax2.gprojection;
					var c1d = c1x * ax2.gnormx + c1y * ax2.gnormy - ax2.gprojection;
					if(c0d > 0 && c1d > 0) {
						return false;
					} else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax2.gnormx * c0d * 0.5,c0y - ax2.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev ? 1 : 0,c0d > 0);
						var t5 = 1.0;
						c0x -= q2.body.posx * t5;
						c0y -= q2.body.posy * t5;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax2.gnormx * c1d * 0.5,c1y - ax2.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev ? 0 : 1,c1d > 0);
						var t6 = 1.0;
						c1x -= q2.body.posx * t6;
						c1y -= q2.body.posy * t6;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax2;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax2;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else {
				return false;
			}
		} else {
			var max1 = -1e+100;
			var minmax = -1e+100;
			var cont1 = true;
			var a0 = null;
			var vi = null;
			var vite = s2.polygon.gverts.begin();
			var cx_ite5 = s2.polygon.edges.begin();
			while(cx_ite5 != null) {
				var a = cx_ite5.elem();
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max1) {
					max1 = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite5 = cx_ite5.next;
			}
			if(cont1) {
				var v0 = vi.elem();
				var v11 = vi.next == null ? s2.polygon.gverts.front() : vi.next.elem();
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					var co;
					if(distSqr > minDist * minDist) {
						co = null;
					} else if(distSqr < nape_Config.epsilon * nape_Config.epsilon) {
						co = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0);
					} else {
						var invDist = zpp_$nape_util_ZPP_$Math.invsqrt(distSqr);
						var dist1 = invDist < nape_Config.epsilon ? 1e100 : 1.0 / invDist;
						var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
						if(rev) {
							co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist1 - minDist,0);
						} else {
							co = arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist1 - minDist,0);
						}
					}
					if(co != null) {
						var con1 = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con1.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr2x = s1.circle.localCOMx;
							con1.lr2y = s1.circle.localCOMy;
						} else {
							con1.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con1.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con1.lr1x = s1.circle.localCOMx;
							con1.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					var co1;
					if(distSqr1 > minDist1 * minDist1) {
						co1 = null;
					} else if(distSqr1 < nape_Config.epsilon * nape_Config.epsilon) {
						co1 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist1,0);
					} else {
						var invDist1 = zpp_$nape_util_ZPP_$Math.invsqrt(distSqr1);
						var dist2 = invDist1 < nape_Config.epsilon ? 1e100 : 1.0 / invDist1;
						var df1 = 0.5 + (s1.circle.radius - 0.5 * minDist1) * invDist1;
						if(rev) {
							co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,-px1 * invDist1,-py1 * invDist1,dist2 - minDist1,0);
						} else {
							co1 = arb.injectContact(s1.circle.worldCOMx + px1 * df1,s1.circle.worldCOMy + py1 * df1,px1 * invDist1,py1 * invDist1,dist2 - minDist1,0);
						}
					}
					if(co1 != null) {
						var con2 = co1.inner;
						arb.ptype = 2;
						var vx1 = 0.0;
						var vy1 = 0.0;
						vx1 = v11.x - s2.polygon.body.posx;
						vy1 = v11.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con2.lr1x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr1y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr2x = s1.circle.localCOMx;
							con2.lr2y = s1.circle.localCOMy;
						} else {
							con2.lr2x = vx1 * s2.polygon.body.axisy + vy1 * s2.polygon.body.axisx;
							con2.lr2y = vy1 * s2.polygon.body.axisy - vx1 * s2.polygon.body.axisx;
							con2.lr1x = s1.circle.localCOMx;
							con2.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co1 != null;
				} else {
					var nx1 = 0.0;
					var ny1 = 0.0;
					var t7 = s1.circle.radius + max1 * 0.5;
					nx1 = a0.gnormx * t7;
					ny1 = a0.gnormy * t7;
					var px2 = 0.0;
					var py2 = 0.0;
					px2 = s1.circle.worldCOMx - nx1;
					py2 = s1.circle.worldCOMy - ny1;
					var con3 = rev ? arb.injectContact(px2,py2,a0.gnormx,a0.gnormy,max1,0) : arb.injectContact(px2,py2,-a0.gnormx,-a0.gnormy,max1,0);
					arb.ptype = rev ? 0 : 1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con3.inner.lr1x = s1.circle.localCOMx;
					con3.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px3 = 0.0;
		var py3 = 0.0;
		px3 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py3 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px3 * px3 + py3 * py3;
		var co2;
		if(distSqr2 > minDist2 * minDist2) {
			co2 = null;
		} else if(distSqr2 < nape_Config.epsilon * nape_Config.epsilon) {
			co2 = arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist2,0);
		} else {
			var invDist2 = zpp_$nape_util_ZPP_$Math.invsqrt(distSqr2);
			var dist3 = invDist2 < nape_Config.epsilon ? 1e100 : 1.0 / invDist2;
			var df2 = 0.5 + (s1.circle.radius - 0.5 * minDist2) * invDist2;
			if(rev) {
				co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,-px3 * invDist2,-py3 * invDist2,dist3 - minDist2,0);
			} else {
				co2 = arb.injectContact(s1.circle.worldCOMx + px3 * df2,s1.circle.worldCOMy + py3 * df2,px3 * invDist2,py3 * invDist2,dist3 - minDist2,0);
			}
		}
		if(co2 != null) {
			var con4 = co2.inner;
			if(rev) {
				con4.lr1x = s2.circle.localCOMx;
				con4.lr1y = s2.circle.localCOMy;
				con4.lr2x = s1.circle.localCOMx;
				con4.lr2y = s1.circle.localCOMy;
			} else {
				con4.lr1x = s1.circle.localCOMx;
				con4.lr1y = s1.circle.localCOMy;
				con4.lr2x = s2.circle.localCOMx;
				con4.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else {
			return false;
		}
	}
};
zpp_$nape_geom_ZPP_$Collide.testCollide_safe = function(s1,s2) {
	if(s2.isCircle()) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_$nape_geom_ZPP_$Collide.testCollide(s1,s2);
};
zpp_$nape_geom_ZPP_$Collide.testCollide = function(s1,s2) {
	if(s2.isPolygon()) {
		if(s1.isPolygon()) {
			var cont = true;
			var cx_ite = s1.polygon.edges.begin();
			while(cx_ite != null) {
				var ax = cx_ite.elem();
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.begin();
				while(cx_ite1 != null) {
					var v = cx_ite1.elem();
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite2 = s2.polygon.edges.begin();
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elem();
					var min1 = 1e100;
					var cx_ite3 = s1.polygon.gverts.begin();
					while(cx_ite3 != null) {
						var v1 = cx_ite3.elem();
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite2 = cx_ite2.next;
				}
				return cont;
			} else {
				return false;
			}
		} else {
			var a0 = null;
			var vi = null;
			var cont1 = true;
			var max = -1e+100;
			var vite = s2.polygon.gverts.begin();
			var cx_ite4 = s2.polygon.edges.begin();
			while(cx_ite4 != null) {
				var a = cx_ite4.elem();
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont1 = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite4 = cx_ite4.next;
			}
			if(cont1) {
				var v0 = vi.elem();
				var v11 = vi.next == null ? s2.polygon.gverts.front() : vi.next.elem();
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
					var distSqr = px * px + py * py;
					return distSqr <= minDist * minDist;
				} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
					var minDist1 = s1.circle.radius;
					var px1 = 0.0;
					var py1 = 0.0;
					px1 = v11.x - s1.circle.worldCOMx;
					py1 = v11.y - s1.circle.worldCOMy;
					var distSqr1 = px1 * px1 + py1 * py1;
					return distSqr1 <= minDist1 * minDist1;
				} else {
					return true;
				}
			} else {
				return false;
			}
		}
	} else {
		var minDist2 = s1.circle.radius + s2.circle.radius;
		var px2 = 0.0;
		var py2 = 0.0;
		px2 = s2.circle.worldCOMx - s1.circle.worldCOMx;
		py2 = s2.circle.worldCOMy - s1.circle.worldCOMy;
		var distSqr2 = px2 * px2 + py2 * py2;
		return distSqr2 <= minDist2 * minDist2;
	}
};
zpp_$nape_geom_ZPP_$Collide.flowCollide = function(s1,s2,arb) {
	if(s2.isPolygon()) {
		if(s1.isPolygon()) {
			var out1 = [];
			var out2 = [];
			var cont = true;
			var total = true;
			var cx_ite = s1.polygon.edges.begin();
			while(cx_ite != null) {
				var ax = cx_ite.elem();
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.begin();
				while(cx_ite1 != null) {
					var v = cx_ite1.elem();
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					if(k >= ax.gprojection + nape_Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					++ind;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
			if(total) {
				s2.polygon.validate_worldCOM();
				arb.inject(s2.polygon.area,s2.polygon.worldCOMx,s2.polygon.worldCOMy);
				return true;
			} else if(cont) {
				total = true;
				var cx_ite2 = s2.polygon.edges.begin();
				while(cx_ite2 != null) {
					var ax1 = cx_ite2.elem();
					var min1 = 1e100;
					var ind1 = 0;
					var cx_ite3 = s1.polygon.gverts.begin();
					while(cx_ite3 != null) {
						var v1 = cx_ite3.elem();
						var k1 = ax1.gnormx * v1.x + ax1.gnormy * v1.y;
						if(k1 < min1) {
							min1 = k1;
						}
						if(k1 >= ax1.gprojection + nape_Config.epsilon) {
							out1[ind1] = true;
							total = false;
						}
						++ind1;
						cx_ite3 = cx_ite3.next;
					}
					min1 -= ax1.gprojection;
					if(min1 > 0) {
						cont = false;
						break;
					}
					cx_ite2 = cx_ite2.next;
				}
				if(total) {
					s1.polygon.validate_worldCOM();
					arb.inject(s1.polygon.area,s1.polygon.worldCOMx,s1.polygon.worldCOMy);
					return true;
				} else if(cont) {
					while(!zpp_$nape_geom_ZPP_$Collide.flowpoly.empty()) {
						var p = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							var o = p;
							o.free();
							o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
							zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
						}
					}
					var fst_vert = null;
					var poly1 = false;
					var ite1 = s1.polygon.gverts.begin();
					var ind11 = 0;
					var ite2 = s2.polygon.gverts.begin();
					var ind2 = 0;
					var _g1 = 0;
					var _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else {
							ite2 = ite2.next;
						}
					}
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.begin();
						poly1 = true;
						var _g11 = 0;
						var _g2 = s1.polygon.edgeCnt;
						while(_g11 < _g2) {
							var i1 = _g11++;
							if(!out1[i1]) {
								ind11 = i1;
								break;
							} else {
								ite1 = ite1.next;
							}
						}
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.begin();
						} else {
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite1.elem());
							fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
						}
					} else {
						zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ite2.elem());
						fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
					}
					var cnt = 1;
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.empty()) {
						var cx_cont = true;
						var cx_itei = s1.polygon.gverts.begin();
						var u = cx_itei.elem();
						var cx_itej = cx_itei.next;
						while(cx_itej != null) {
							var v2 = cx_itej.elem();
							var min2 = 2.0;
							var cx_cont1 = true;
							var cx_itei1 = s2.polygon.gverts.begin();
							var a = cx_itei1.elem();
							var cx_itej1 = cx_itei1.next;
							while(cx_itej1 != null) {
								var b = cx_itej1.elem();
								var t = 0.0;
								var _sx = 0.0;
								var _sy = 0.0;
								_sx = u.x - a.x;
								_sy = u.y - a.y;
								var _vx = 0.0;
								var _vy = 0.0;
								_vx = v2.x - u.x;
								_vy = v2.y - u.y;
								var _qx = 0.0;
								var _qy = 0.0;
								_qx = b.x - a.x;
								_qy = b.y - a.y;
								var den = _vy * _qx - _vx * _qy;
								var tmp;
								if(den * den > nape_Config.epsilon * nape_Config.epsilon) {
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									if(txx > nape_Config.epsilon && txx < 1 - nape_Config.epsilon) {
										var sxx = (_vy * _sx - _vx * _sy) * den;
										if(sxx > nape_Config.epsilon && sxx < 1 - nape_Config.epsilon) {
											t = txx;
											tmp = true;
										} else {
											tmp = false;
										}
									} else {
										tmp = false;
									}
								} else {
									tmp = false;
								}
								if(tmp) {
									if(t < min2) {
										min2 = t;
										ite2 = cx_itei1;
									}
								}
								cx_itei1 = cx_itej1;
								a = b;
								cx_itej1 = cx_itej1.next;
							}
							if(cx_cont1) {
								while(true) {
									cx_itej1 = s2.polygon.gverts.begin();
									var b1 = cx_itej1.elem();
									var t1 = 0.0;
									var _sx1 = 0.0;
									var _sy1 = 0.0;
									_sx1 = u.x - a.x;
									_sy1 = u.y - a.y;
									var _vx1 = 0.0;
									var _vy1 = 0.0;
									_vx1 = v2.x - u.x;
									_vy1 = v2.y - u.y;
									var _qx1 = 0.0;
									var _qy1 = 0.0;
									_qx1 = b1.x - a.x;
									_qy1 = b1.y - a.y;
									var den1 = _vy1 * _qx1 - _vx1 * _qy1;
									var tmp1;
									if(den1 * den1 > nape_Config.epsilon * nape_Config.epsilon) {
										den1 = 1 / den1;
										var txx1 = (_qy1 * _sx1 - _qx1 * _sy1) * den1;
										if(txx1 > nape_Config.epsilon && txx1 < 1 - nape_Config.epsilon) {
											var sxx1 = (_vy1 * _sx1 - _vx1 * _sy1) * den1;
											if(sxx1 > nape_Config.epsilon && sxx1 < 1 - nape_Config.epsilon) {
												t1 = txx1;
												tmp1 = true;
											} else {
												tmp1 = false;
											}
										} else {
											tmp1 = false;
										}
									} else {
										tmp1 = false;
									}
									if(tmp1) {
										if(t1 < min2) {
											min2 = t1;
											ite2 = cx_itei1;
										}
									}
									if(!false) {
										break;
									}
								}
							}
							if(min2 != 2.0) {
								var cx = 0.0;
								var cy = 0.0;
								var T = min2;
								cx = u.x + (v2.x - u.x) * T;
								cy = u.y + (v2.y - u.y) * T;
								fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx,cy);
								zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
								poly1 = true;
								ite1 = cx_itei;
								cx_cont = false;
								break;
							}
							cx_itei = cx_itej;
							u = v2;
							cx_itej = cx_itej.next;
						}
						if(cx_cont) {
							while(true) {
								cx_itej = s1.polygon.gverts.begin();
								var v3 = cx_itej.elem();
								var min3 = 2.0;
								var cx_cont2 = true;
								var cx_itei2 = s2.polygon.gverts.begin();
								var a1 = cx_itei2.elem();
								var cx_itej2 = cx_itei2.next;
								while(cx_itej2 != null) {
									var b2 = cx_itej2.elem();
									var t2 = 0.0;
									var _sx2 = 0.0;
									var _sy2 = 0.0;
									_sx2 = u.x - a1.x;
									_sy2 = u.y - a1.y;
									var _vx2 = 0.0;
									var _vy2 = 0.0;
									_vx2 = v3.x - u.x;
									_vy2 = v3.y - u.y;
									var _qx2 = 0.0;
									var _qy2 = 0.0;
									_qx2 = b2.x - a1.x;
									_qy2 = b2.y - a1.y;
									var den2 = _vy2 * _qx2 - _vx2 * _qy2;
									var tmp2;
									if(den2 * den2 > nape_Config.epsilon * nape_Config.epsilon) {
										den2 = 1 / den2;
										var txx2 = (_qy2 * _sx2 - _qx2 * _sy2) * den2;
										if(txx2 > nape_Config.epsilon && txx2 < 1 - nape_Config.epsilon) {
											var sxx2 = (_vy2 * _sx2 - _vx2 * _sy2) * den2;
											if(sxx2 > nape_Config.epsilon && sxx2 < 1 - nape_Config.epsilon) {
												t2 = txx2;
												tmp2 = true;
											} else {
												tmp2 = false;
											}
										} else {
											tmp2 = false;
										}
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										if(t2 < min3) {
											min3 = t2;
											ite2 = cx_itei2;
										}
									}
									cx_itei2 = cx_itej2;
									a1 = b2;
									cx_itej2 = cx_itej2.next;
								}
								if(cx_cont2) {
									while(true) {
										cx_itej2 = s2.polygon.gverts.begin();
										var b3 = cx_itej2.elem();
										var t3 = 0.0;
										var _sx3 = 0.0;
										var _sy3 = 0.0;
										_sx3 = u.x - a1.x;
										_sy3 = u.y - a1.y;
										var _vx3 = 0.0;
										var _vy3 = 0.0;
										_vx3 = v3.x - u.x;
										_vy3 = v3.y - u.y;
										var _qx3 = 0.0;
										var _qy3 = 0.0;
										_qx3 = b3.x - a1.x;
										_qy3 = b3.y - a1.y;
										var den3 = _vy3 * _qx3 - _vx3 * _qy3;
										var tmp3;
										if(den3 * den3 > nape_Config.epsilon * nape_Config.epsilon) {
											den3 = 1 / den3;
											var txx3 = (_qy3 * _sx3 - _qx3 * _sy3) * den3;
											if(txx3 > nape_Config.epsilon && txx3 < 1 - nape_Config.epsilon) {
												var sxx3 = (_vy3 * _sx3 - _vx3 * _sy3) * den3;
												if(sxx3 > nape_Config.epsilon && sxx3 < 1 - nape_Config.epsilon) {
													t3 = txx3;
													tmp3 = true;
												} else {
													tmp3 = false;
												}
											} else {
												tmp3 = false;
											}
										} else {
											tmp3 = false;
										}
										if(tmp3) {
											if(t3 < min3) {
												min3 = t3;
												ite2 = cx_itei2;
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(min3 != 2.0) {
									var cx1 = 0.0;
									var cy1 = 0.0;
									var T1 = min3;
									cx1 = u.x + (v3.x - u.x) * T1;
									cy1 = u.y + (v3.y - u.y) * T1;
									fst_vert = zpp_$nape_geom_ZPP_$Vec2.get(cx1,cy1);
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(fst_vert);
									poly1 = true;
									ite1 = cx_itei;
									break;
								}
								if(!false) {
									break;
								}
							}
						}
						cnt = 2;
					}
					while(true) if(poly1) {
						ite1 = ite1.next;
						++ind11;
						if(ite1 == null) {
							ite1 = s1.polygon.gverts.begin();
							ind11 = 0;
						}
						if(!out1[ind11]) {
							var ex = ite1.elem();
							if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							}
							cnt = 1;
						} else {
							var a2 = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							var b4 = ite1.elem();
							var u1 = ite2.elem();
							var itm = ite2.next;
							if(itm == null) {
								itm = s2.polygon.gverts.begin();
							}
							var max = -1.0;
							var itmo = null;
							var indo = 0;
							var icnt = 0;
							var beg_ite = itm;
							var cx_ite4 = itm;
							while(true) {
								var v4 = cx_ite4.elem();
								var t4 = 0.0;
								var _sx4 = 0.0;
								var _sy4 = 0.0;
								_sx4 = u1.x - a2.x;
								_sy4 = u1.y - a2.y;
								var _vx4 = 0.0;
								var _vy4 = 0.0;
								_vx4 = v4.x - u1.x;
								_vy4 = v4.y - u1.y;
								var _qx4 = 0.0;
								var _qy4 = 0.0;
								_qx4 = b4.x - a2.x;
								_qy4 = b4.y - a2.y;
								var den4 = _vy4 * _qx4 - _vx4 * _qy4;
								var tmp4;
								if(den4 * den4 > nape_Config.epsilon * nape_Config.epsilon) {
									den4 = 1 / den4;
									var txx4 = (_qy4 * _sx4 - _qx4 * _sy4) * den4;
									if(txx4 > nape_Config.epsilon && txx4 < 1 - nape_Config.epsilon) {
										var sxx4 = (_vy4 * _sx4 - _vx4 * _sy4) * den4;
										if(sxx4 > nape_Config.epsilon && sxx4 < 1 - nape_Config.epsilon) {
											t4 = txx4;
											tmp4 = true;
										} else {
											tmp4 = false;
										}
									} else {
										tmp4 = false;
									}
								} else {
									tmp4 = false;
								}
								if(tmp4) {
									if(t4 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t4;
											cx_ite4 = beg_ite;
											break;
										} else {
											max = t4;
										}
									}
								}
								u1 = v4;
								ite2 = cx_ite4;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite4 = cx_ite4.next;
								if(cx_ite4 == null) {
									cx_ite4 = s2.polygon.gverts.begin();
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite4 != beg_ite) {
								var v5 = cx_ite4.elem();
								var t5 = 0.0;
								var _sx5 = 0.0;
								var _sy5 = 0.0;
								_sx5 = u1.x - a2.x;
								_sy5 = u1.y - a2.y;
								var _vx5 = 0.0;
								var _vy5 = 0.0;
								_vx5 = v5.x - u1.x;
								_vy5 = v5.y - u1.y;
								var _qx5 = 0.0;
								var _qy5 = 0.0;
								_qx5 = b4.x - a2.x;
								_qy5 = b4.y - a2.y;
								var den5 = _vy5 * _qx5 - _vx5 * _qy5;
								var tmp5;
								if(den5 * den5 > nape_Config.epsilon * nape_Config.epsilon) {
									den5 = 1 / den5;
									var txx5 = (_qy5 * _sx5 - _qx5 * _sy5) * den5;
									if(txx5 > nape_Config.epsilon && txx5 < 1 - nape_Config.epsilon) {
										var sxx5 = (_vy5 * _sx5 - _vx5 * _sy5) * den5;
										if(sxx5 > nape_Config.epsilon && sxx5 < 1 - nape_Config.epsilon) {
											t5 = txx5;
											tmp5 = true;
										} else {
											tmp5 = false;
										}
									} else {
										tmp5 = false;
									}
								} else {
									tmp5 = false;
								}
								if(tmp5) {
									if(t5 >= max) {
										itmo = ite2;
										indo = ind2;
										if(++icnt == cnt) {
											max = t5;
											cx_ite4 = beg_ite;
											break;
										} else {
											max = t5;
										}
									}
								}
								u1 = v5;
								ite2 = cx_ite4;
								++ind2;
								if(ind2 >= s2.polygon.edgeCnt) {
									ind2 = 0;
								}
								cx_ite4 = cx_ite4.next;
								if(cx_ite4 == null) {
									cx_ite4 = s2.polygon.gverts.begin();
								}
							}
							if(itmo == null) {
								break;
							}
							var u2 = itmo.elem();
							var itm2 = itmo.next;
							if(itm2 == null) {
								itm2 = s2.polygon.gverts.begin();
							}
							var v6 = itm2.elem();
							var cx2 = 0.0;
							var cy2 = 0.0;
							var T2 = max;
							cx2 = u2.x + (v6.x - u2.x) * T2;
							cy2 = u2.y + (v6.y - u2.y) * T2;
							if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx2,cy2,fst_vert.x,fst_vert.y) < nape_Config.epsilon) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx2,cy2));
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							}
							ite2 = itmo;
							ind2 = indo;
							poly1 = !poly1;
							cnt = 2;
						}
					} else {
						ite2 = ite2.next;
						++ind2;
						if(ite2 == null) {
							ite2 = s2.polygon.gverts.begin();
							ind2 = 0;
						}
						if(!out2[ind2]) {
							var ex1 = ite2.elem();
							if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(ex1.x,ex1.y,fst_vert.x,fst_vert.y) < nape_Config.epsilon) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(ex1);
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							}
							cnt = 1;
						} else {
							var a3 = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							var b5 = ite2.elem();
							var u3 = ite1.elem();
							var itm1 = ite1.next;
							if(itm1 == null) {
								itm1 = s1.polygon.gverts.begin();
							}
							var max1 = -1.0;
							var itmo1 = null;
							var indo1 = 0;
							var icnt1 = 0;
							var beg_ite1 = itm1;
							var cx_ite5 = itm1;
							while(true) {
								var v7 = cx_ite5.elem();
								var t6 = 0.0;
								var _sx6 = 0.0;
								var _sy6 = 0.0;
								_sx6 = u3.x - a3.x;
								_sy6 = u3.y - a3.y;
								var _vx6 = 0.0;
								var _vy6 = 0.0;
								_vx6 = v7.x - u3.x;
								_vy6 = v7.y - u3.y;
								var _qx6 = 0.0;
								var _qy6 = 0.0;
								_qx6 = b5.x - a3.x;
								_qy6 = b5.y - a3.y;
								var den6 = _vy6 * _qx6 - _vx6 * _qy6;
								var tmp6;
								if(den6 * den6 > nape_Config.epsilon * nape_Config.epsilon) {
									den6 = 1 / den6;
									var txx6 = (_qy6 * _sx6 - _qx6 * _sy6) * den6;
									if(txx6 > nape_Config.epsilon && txx6 < 1 - nape_Config.epsilon) {
										var sxx6 = (_vy6 * _sx6 - _vx6 * _sy6) * den6;
										if(sxx6 > nape_Config.epsilon && sxx6 < 1 - nape_Config.epsilon) {
											t6 = txx6;
											tmp6 = true;
										} else {
											tmp6 = false;
										}
									} else {
										tmp6 = false;
									}
								} else {
									tmp6 = false;
								}
								if(tmp6) {
									if(t6 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t6;
											cx_ite5 = beg_ite1;
											break;
										} else {
											max1 = t6;
										}
									}
								}
								u3 = v7;
								ite1 = cx_ite5;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite5 = cx_ite5.next;
								if(cx_ite5 == null) {
									cx_ite5 = s1.polygon.gverts.begin();
								}
								if(!false) {
									break;
								}
							}
							while(cx_ite5 != beg_ite1) {
								var v8 = cx_ite5.elem();
								var t7 = 0.0;
								var _sx7 = 0.0;
								var _sy7 = 0.0;
								_sx7 = u3.x - a3.x;
								_sy7 = u3.y - a3.y;
								var _vx7 = 0.0;
								var _vy7 = 0.0;
								_vx7 = v8.x - u3.x;
								_vy7 = v8.y - u3.y;
								var _qx7 = 0.0;
								var _qy7 = 0.0;
								_qx7 = b5.x - a3.x;
								_qy7 = b5.y - a3.y;
								var den7 = _vy7 * _qx7 - _vx7 * _qy7;
								var tmp7;
								if(den7 * den7 > nape_Config.epsilon * nape_Config.epsilon) {
									den7 = 1 / den7;
									var txx7 = (_qy7 * _sx7 - _qx7 * _sy7) * den7;
									if(txx7 > nape_Config.epsilon && txx7 < 1 - nape_Config.epsilon) {
										var sxx7 = (_vy7 * _sx7 - _vx7 * _sy7) * den7;
										if(sxx7 > nape_Config.epsilon && sxx7 < 1 - nape_Config.epsilon) {
											t7 = txx7;
											tmp7 = true;
										} else {
											tmp7 = false;
										}
									} else {
										tmp7 = false;
									}
								} else {
									tmp7 = false;
								}
								if(tmp7) {
									if(t7 >= max1) {
										itmo1 = ite1;
										indo1 = ind11;
										if(++icnt1 == cnt) {
											max1 = t7;
											cx_ite5 = beg_ite1;
											break;
										} else {
											max1 = t7;
										}
									}
								}
								u3 = v8;
								ite1 = cx_ite5;
								++ind11;
								if(ind11 >= s1.polygon.edgeCnt) {
									ind11 = 0;
								}
								cx_ite5 = cx_ite5.next;
								if(cx_ite5 == null) {
									cx_ite5 = s1.polygon.gverts.begin();
								}
							}
							if(itmo1 == null) {
								break;
							}
							var u4 = itmo1.elem();
							var itm21 = itmo1.next;
							if(itm21 == null) {
								itm21 = s1.polygon.gverts.begin();
							}
							var v9 = itm21.elem();
							var cx3 = 0.0;
							var cy3 = 0.0;
							var T3 = max1;
							cx3 = u4.x + (v9.x - u4.x) * T3;
							cy3 = u4.y + (v9.y - u4.y) * T3;
							if(fst_vert != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(cx3,cy3,fst_vert.x,fst_vert.y) < nape_Config.epsilon) {
								break;
							}
							zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx3,cy3));
							if(fst_vert == null) {
								fst_vert = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
							}
							ite1 = itmo1;
							ind11 = indo1;
							poly1 = !poly1;
							cnt = 2;
						}
					}
					if(zpp_$nape_geom_ZPP_$Collide.flowpoly.begin() != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.begin().next != null && zpp_$nape_geom_ZPP_$Collide.flowpoly.begin().next.next != null) {
						var area = 0.0;
						var COMx = 0.0;
						var COMy = 0.0;
						COMx = 0;
						COMy = 0;
						area = 0.0;
						var cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.begin();
						var u5 = cx_ite6.elem();
						cx_ite6 = cx_ite6.next;
						var v10 = cx_ite6.elem();
						cx_ite6 = cx_ite6.next;
						while(cx_ite6 != null) {
							var w = cx_ite6.elem();
							area += v10.x * (w.y - u5.y);
							var cf = w.y * v10.x - w.x * v10.y;
							COMx += (v10.x + w.x) * cf;
							COMy += (v10.y + w.y) * cf;
							u5 = v10;
							v10 = w;
							cx_ite6 = cx_ite6.next;
						}
						cx_ite6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.begin();
						var w1 = cx_ite6.elem();
						area += v10.x * (w1.y - u5.y);
						var cf1 = w1.y * v10.x - w1.x * v10.y;
						COMx += (v10.x + w1.x) * cf1;
						COMy += (v10.y + w1.y) * cf1;
						u5 = v10;
						v10 = w1;
						cx_ite6 = cx_ite6.next;
						var w2 = cx_ite6.elem();
						area += v10.x * (w2.y - u5.y);
						var cf2 = w2.y * v10.x - w2.x * v10.y;
						COMx += (v10.x + w2.x) * cf2;
						COMy += (v10.y + w2.y) * cf2;
						area *= 0.5;
						var ia = 1 / (6 * area);
						var t8 = ia;
						COMx *= t8;
						COMy *= t8;
						arb.inject(-area,COMx,COMy);
						return true;
					} else {
						return false;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		} else {
			var inte = [];
			var total1 = true;
			var a0 = null;
			var vi = null;
			var max2 = -1e+100;
			var cont1 = true;
			var vite = s2.polygon.gverts.begin();
			var ind3 = 0;
			var cx_ite7 = s2.polygon.edges.begin();
			while(cx_ite7 != null) {
				var a4 = cx_ite7.elem();
				var dist = a4.gnormx * s1.circle.worldCOMx + a4.gnormy * s1.circle.worldCOMy;
				if(dist > a4.gprojection + s1.circle.radius) {
					cont1 = false;
					break;
				} else if(dist + s1.circle.radius > a4.gprojection + nape_Config.epsilon) {
					total1 = false;
					inte[ind3] = true;
				}
				dist -= a4.gprojection + s1.circle.radius;
				if(dist > max2) {
					max2 = dist;
					a0 = a4;
					vi = vite;
				}
				vite = vite.next;
				++ind3;
				cx_ite7 = cx_ite7.next;
			}
			if(cont1) {
				if(total1) {
					arb.inject(s1.circle.area,s1.circle.worldCOMx,s1.circle.worldCOMy);
					return true;
				} else {
					var v0 = vi.elem();
					var v11 = vi.next == null ? s2.polygon.gverts.front() : vi.next.elem();
					var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
					var tmp8;
					if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						px = v0.x - s1.circle.worldCOMx;
						py = v0.y - s1.circle.worldCOMy;
						var distSqr = px * px + py * py;
						tmp8 = distSqr <= minDist * minDist;
					} else if(dt >= v11.y * a0.gnormx - v11.x * a0.gnormy) {
						var minDist1 = s1.circle.radius;
						var px1 = 0.0;
						var py1 = 0.0;
						px1 = v11.x - s1.circle.worldCOMx;
						py1 = v11.y - s1.circle.worldCOMy;
						var distSqr1 = px1 * px1 + py1 * py1;
						tmp8 = distSqr1 <= minDist1 * minDist1;
					} else {
						tmp8 = true;
					}
					if(tmp8) {
						var ins = [];
						var ind4 = 0;
						var total2 = true;
						var vi1 = null;
						var vind = 0;
						var cx_ite8 = s2.polygon.gverts.begin();
						while(cx_ite8 != null) {
							var v12 = cx_ite8.elem();
							var dist1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(v12.x,v12.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
							if(!(ins[ind4] = dist1 <= s1.circle.radius * s1.circle.radius)) {
								total2 = false;
							} else {
								vind = ind4;
								vi1 = cx_ite8;
							}
							++ind4;
							cx_ite8 = cx_ite8.next;
						}
						if(total2) {
							s2.polygon.validate_worldCOM();
							arb.inject(s2.polygon.area,s2.polygon.worldCOMx,s2.polygon.worldCOMy);
							return true;
						} else {
							while(!zpp_$nape_geom_ZPP_$Collide.flowpoly.empty()) {
								var p1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.pop_unsafe();
								if(!p1._inuse) {
									var o1 = p1;
									o1.free();
									o1.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
									zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o1;
								}
							}
							zpp_$nape_geom_ZPP_$Collide.flowsegs.clear();
							var fst_vert1 = null;
							var state = 1;
							if(vi1 == null) {
								vi1 = s2.polygon.gverts.begin();
								state = 2;
							} else {
								var tmp9 = zpp_$nape_geom_ZPP_$Collide.flowpoly;
								fst_vert1 = vi1.elem();
								tmp9.add(fst_vert1);
							}
							while(state != 0) if(state == 1) {
								vi1 = vi1.next;
								if(vi1 == null) {
									vi1 = s2.polygon.gverts.begin();
								}
								++vind;
								if(vind >= s2.polygon.edgeCnt) {
									vind = 0;
								}
								if(ins[vind]) {
									if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,vi1.elem().x,vi1.elem().y) < nape_Config.epsilon) {
										break;
									}
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(vi1.elem());
								} else {
									var u6 = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
									var v13 = vi1.elem();
									var vx = 0.0;
									var vy = 0.0;
									vx = v13.x - u6.x;
									vy = v13.y - u6.y;
									var qx = 0.0;
									var qy = 0.0;
									qx = u6.x - s1.circle.worldCOMx;
									qy = u6.y - s1.circle.worldCOMy;
									var A = vx * vx + vy * vy;
									var B = 2 * (qx * vx + qy * vy);
									var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
									var D = Math.sqrt(B * B - 4 * A * C);
									A = 1 / (2 * A);
									var t9 = (-B - D) * A;
									var tval = t9 < nape_Config.epsilon ? (-B + D) * A : t9;
									var cx4 = 0.0;
									var cy4 = 0.0;
									var T4 = tval;
									cx4 = u6.x + (v13.x - u6.x) * T4;
									cy4 = u6.y + (v13.y - u6.y) * T4;
									if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx4,cy4) < nape_Config.epsilon) {
										break;
									}
									zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx4,cy4));
									state = 2;
								}
							} else if(state == 2) {
								var vi2 = vi1.next;
								if(vi2 == null) {
									vi2 = s2.polygon.gverts.begin();
								}
								var u7 = vi1.elem();
								state = 0;
								var beg_ite2 = vi2;
								var cx_ite9 = vi2;
								while(true) {
									var v14 = cx_ite9.elem();
									var vind2 = vind + 1;
									if(vind2 == s2.polygon.edgeCnt) {
										vind2 = 0;
									}
									if(inte[vind]) {
										if(ins[vind2]) {
											var vx1 = 0.0;
											var vy1 = 0.0;
											vx1 = v14.x - u7.x;
											vy1 = v14.y - u7.y;
											var qx1 = 0.0;
											var qy1 = 0.0;
											qx1 = u7.x - s1.circle.worldCOMx;
											qy1 = u7.y - s1.circle.worldCOMy;
											var A1 = vx1 * vx1 + vy1 * vy1;
											var B1 = 2 * (qx1 * vx1 + qy1 * vy1);
											var C1 = qx1 * qx1 + qy1 * qy1 - s1.circle.radius * s1.circle.radius;
											var D1 = Math.sqrt(B1 * B1 - 4 * A1 * C1);
											A1 = 1 / (2 * A1);
											var t10 = (-B1 - D1) * A1;
											var tval1 = t10 < nape_Config.epsilon ? (-B1 + D1) * A1 : t10;
											var cx5 = 0.0;
											var cy5 = 0.0;
											var T5 = tval1;
											cx5 = u7.x + (v14.x - u7.x) * T5;
											cy5 = u7.y + (v14.y - u7.y) * T5;
											if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx5,cy5) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp = zpp_$nape_geom_ZPP_$Vec2.get(cx5,cy5);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.front());
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp);
											state = 1;
											cx_ite9 = beg_ite2;
											break;
										} else {
											var t0 = 0.0;
											var t11 = 0.0;
											var vx2 = 0.0;
											var vy2 = 0.0;
											vx2 = v14.x - u7.x;
											vy2 = v14.y - u7.y;
											var qx2 = 0.0;
											var qy2 = 0.0;
											qx2 = u7.x - s1.circle.worldCOMx;
											qy2 = u7.y - s1.circle.worldCOMy;
											var A2 = vx2 * vx2 + vy2 * vy2;
											var B2 = 2 * (qx2 * vx2 + qy2 * vy2);
											var C2 = qx2 * qx2 + qy2 * qy2 - s1.circle.radius * s1.circle.radius;
											var D2 = B2 * B2 - 4 * A2 * C2;
											var two;
											if(D2 * D2 < nape_Config.epsilon) {
												if(D2 < 0) {
													t0 = 10.0;
												} else {
													t11 = -B2 / (2 * A2);
													t0 = t11;
												}
												two = false;
											} else {
												D2 = Math.sqrt(D2);
												A2 = 1 / (2 * A2);
												t0 = (-B2 - D2) * A2;
												t11 = (-B2 + D2) * A2;
												two = true;
											}
											if(t0 < 1 - nape_Config.epsilon && t11 > nape_Config.epsilon) {
												var cx6 = 0.0;
												var cy6 = 0.0;
												var T6 = t0;
												cx6 = u7.x + (v14.x - u7.x) * T6;
												cy6 = u7.y + (v14.y - u7.y) * T6;
												if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx6,cy6) < nape_Config.epsilon) {
													state = 0;
													cx_ite9 = beg_ite2;
													break;
												}
												var cp1 = zpp_$nape_geom_ZPP_$Vec2.get(cx6,cy6);
												if(!zpp_$nape_geom_ZPP_$Collide.flowpoly.empty()) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.front());
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp1);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp1);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
												}
												if(two) {
													var cx7 = 0.0;
													var cy7 = 0.0;
													var T7 = t11;
													cx7 = u7.x + (v14.x - u7.x) * T7;
													cy7 = u7.y + (v14.y - u7.y) * T7;
													zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx7,cy7));
												}
											}
										}
									}
									u7 = v14;
									vi1 = cx_ite9;
									vind = vind2;
									cx_ite9 = cx_ite9.next;
									if(cx_ite9 == null) {
										cx_ite9 = s2.polygon.gverts.begin();
									}
									if(!false) {
										break;
									}
								}
								while(cx_ite9 != beg_ite2) {
									var v15 = cx_ite9.elem();
									var vind21 = vind + 1;
									if(vind21 == s2.polygon.edgeCnt) {
										vind21 = 0;
									}
									if(inte[vind]) {
										if(ins[vind21]) {
											var vx3 = 0.0;
											var vy3 = 0.0;
											vx3 = v15.x - u7.x;
											vy3 = v15.y - u7.y;
											var qx3 = 0.0;
											var qy3 = 0.0;
											qx3 = u7.x - s1.circle.worldCOMx;
											qy3 = u7.y - s1.circle.worldCOMy;
											var A3 = vx3 * vx3 + vy3 * vy3;
											var B3 = 2 * (qx3 * vx3 + qy3 * vy3);
											var C3 = qx3 * qx3 + qy3 * qy3 - s1.circle.radius * s1.circle.radius;
											var D3 = Math.sqrt(B3 * B3 - 4 * A3 * C3);
											A3 = 1 / (2 * A3);
											var t12 = (-B3 - D3) * A3;
											var tval2 = t12 < nape_Config.epsilon ? (-B3 + D3) * A3 : t12;
											var cx8 = 0.0;
											var cy8 = 0.0;
											var T8 = tval2;
											cx8 = u7.x + (v15.x - u7.x) * T8;
											cy8 = u7.y + (v15.y - u7.y) * T8;
											if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx8,cy8) < nape_Config.epsilon) {
												state = 0;
												cx_ite9 = beg_ite2;
												break;
											}
											var cp2 = zpp_$nape_geom_ZPP_$Vec2.get(cx8,cy8);
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.front());
											zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp2);
											zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp2);
											state = 1;
											cx_ite9 = beg_ite2;
											break;
										} else {
											var t01 = 0.0;
											var t13 = 0.0;
											var vx4 = 0.0;
											var vy4 = 0.0;
											vx4 = v15.x - u7.x;
											vy4 = v15.y - u7.y;
											var qx4 = 0.0;
											var qy4 = 0.0;
											qx4 = u7.x - s1.circle.worldCOMx;
											qy4 = u7.y - s1.circle.worldCOMy;
											var A4 = vx4 * vx4 + vy4 * vy4;
											var B4 = 2 * (qx4 * vx4 + qy4 * vy4);
											var C4 = qx4 * qx4 + qy4 * qy4 - s1.circle.radius * s1.circle.radius;
											var D4 = B4 * B4 - 4 * A4 * C4;
											var two1;
											if(D4 * D4 < nape_Config.epsilon) {
												if(D4 < 0) {
													t01 = 10.0;
												} else {
													t13 = -B4 / (2 * A4);
													t01 = t13;
												}
												two1 = false;
											} else {
												D4 = Math.sqrt(D4);
												A4 = 1 / (2 * A4);
												t01 = (-B4 - D4) * A4;
												t13 = (-B4 + D4) * A4;
												two1 = true;
											}
											if(t01 < 1 - nape_Config.epsilon && t13 > nape_Config.epsilon) {
												var cx9 = 0.0;
												var cy9 = 0.0;
												var T9 = t01;
												cx9 = u7.x + (v15.x - u7.x) * T9;
												cy9 = u7.y + (v15.y - u7.y) * T9;
												if(fst_vert1 != null && zpp_$nape_geom_ZPP_$VecMath.vec_dsq(fst_vert1.x,fst_vert1.y,cx9,cy9) < nape_Config.epsilon) {
													state = 0;
													cx_ite9 = beg_ite2;
													break;
												}
												var cp3 = zpp_$nape_geom_ZPP_$Vec2.get(cx9,cy9);
												if(!zpp_$nape_geom_ZPP_$Collide.flowpoly.empty()) {
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.front());
													zpp_$nape_geom_ZPP_$Collide.flowsegs.add(cp3);
												}
												zpp_$nape_geom_ZPP_$Collide.flowpoly.add(cp3);
												if(fst_vert1 == null) {
													fst_vert1 = zpp_$nape_geom_ZPP_$Collide.flowpoly.front();
												}
												if(two1) {
													var cx10 = 0.0;
													var cy10 = 0.0;
													var T10 = t13;
													cx10 = u7.x + (v15.x - u7.x) * T10;
													cy10 = u7.y + (v15.y - u7.y) * T10;
													zpp_$nape_geom_ZPP_$Collide.flowpoly.add(zpp_$nape_geom_ZPP_$Vec2.get(cx10,cy10));
												}
											}
										}
									}
									u7 = v15;
									vi1 = cx_ite9;
									vind = vind21;
									cx_ite9 = cx_ite9.next;
									if(cx_ite9 == null) {
										cx_ite9 = s2.polygon.gverts.begin();
									}
								}
							}
							if(zpp_$nape_geom_ZPP_$Collide.flowpoly.begin() == null) {
								return false;
							} else if(zpp_$nape_geom_ZPP_$Collide.flowpoly.begin().next == null) {
								var all = true;
								var cx_ite10 = s2.polygon.edges.begin();
								while(cx_ite10 != null) {
									var e = cx_ite10.elem();
									var dist2 = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
									if(dist2 > e.gprojection) {
										all = false;
										break;
									}
									cx_ite10 = cx_ite10.next;
								}
								if(all) {
									arb.inject(s1.circle.area,s1.circle.worldCOMx,s1.circle.worldCOMy);
									return true;
								} else {
									return false;
								}
							} else {
								var COMx1 = 0;
								var COMy1 = 0;
								var area1 = 0.0;
								if(zpp_$nape_geom_ZPP_$Collide.flowpoly.begin().next.next != null) {
									var parea = 0.0;
									var pCOMx = 0.0;
									var pCOMy = 0.0;
									pCOMx = 0;
									pCOMy = 0;
									parea = 0.0;
									var cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.begin();
									var u8 = cx_ite11.elem();
									cx_ite11 = cx_ite11.next;
									var v16 = cx_ite11.elem();
									cx_ite11 = cx_ite11.next;
									while(cx_ite11 != null) {
										var w3 = cx_ite11.elem();
										parea += v16.x * (w3.y - u8.y);
										var cf3 = w3.y * v16.x - w3.x * v16.y;
										pCOMx += (v16.x + w3.x) * cf3;
										pCOMy += (v16.y + w3.y) * cf3;
										u8 = v16;
										v16 = w3;
										cx_ite11 = cx_ite11.next;
									}
									cx_ite11 = zpp_$nape_geom_ZPP_$Collide.flowpoly.begin();
									var w4 = cx_ite11.elem();
									parea += v16.x * (w4.y - u8.y);
									var cf4 = w4.y * v16.x - w4.x * v16.y;
									pCOMx += (v16.x + w4.x) * cf4;
									pCOMy += (v16.y + w4.y) * cf4;
									u8 = v16;
									v16 = w4;
									cx_ite11 = cx_ite11.next;
									var w5 = cx_ite11.elem();
									parea += v16.x * (w5.y - u8.y);
									var cf5 = w5.y * v16.x - w5.x * v16.y;
									pCOMx += (v16.x + w5.x) * cf5;
									pCOMy += (v16.y + w5.y) * cf5;
									parea *= 0.5;
									var ia1 = 1 / (6 * parea);
									var t14 = ia1;
									pCOMx *= t14;
									pCOMy *= t14;
									var t15 = -parea;
									COMx1 += pCOMx * t15;
									COMy1 += pCOMy * t15;
									area1 -= parea;
								} else {
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.front());
									zpp_$nape_geom_ZPP_$Collide.flowsegs.add(zpp_$nape_geom_ZPP_$Collide.flowpoly.begin().next.elem());
								}
								while(!zpp_$nape_geom_ZPP_$Collide.flowsegs.empty()) {
									var u9 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var v17 = zpp_$nape_geom_ZPP_$Collide.flowsegs.pop_unsafe();
									var dx = 0.0;
									var dy = 0.0;
									dx = v17.x - u9.x;
									dy = v17.y - u9.y;
									var nx = 0.0;
									var ny = 0.0;
									nx = dx;
									ny = dy;
									var d = nx * nx + ny * ny;
									var imag = zpp_$nape_util_ZPP_$Math.invsqrt(d);
									var t16 = imag;
									nx *= t16;
									ny *= t16;
									var t17 = nx;
									nx = -ny;
									ny = t17;
									var cx11 = 0.0;
									var cy11 = 0.0;
									cx11 = u9.x + v17.x;
									cy11 = u9.y + v17.y;
									var t18 = 0.5;
									cx11 *= t18;
									cy11 *= t18;
									var t19 = 1.0;
									cx11 -= s1.circle.worldCOMx * t19;
									cy11 -= s1.circle.worldCOMy * t19;
									var xd = nx * cx11 + ny * cy11;
									var carea = 0.0;
									var ccom = 0.0;
									var X = xd;
									var cos = X / s1.circle.radius;
									var sin = Math.sqrt(1 - cos * cos);
									var theta = Math.acos(cos);
									carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
									ccom = 0.66666666666666663 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
									cx11 = s1.circle.worldCOMx;
									cy11 = s1.circle.worldCOMy;
									var t20 = ccom;
									cx11 += nx * t20;
									cy11 += ny * t20;
									var t21 = carea;
									COMx1 += cx11 * t21;
									COMy1 += cy11 * t21;
									area1 += carea;
								}
								var t22 = 1.0 / area1;
								COMx1 *= t22;
								COMy1 *= t22;
								arb.inject(area1,COMx1,COMy1);
								return true;
							}
						}
					} else {
						return false;
					}
				}
			} else {
				return false;
			}
		}
	} else {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		deltax = c2.worldCOMx - c1.worldCOMx;
		deltay = c2.worldCOMy - c1.worldCOMy;
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		if(ds > cr * cr) {
			return false;
		} else if(ds < nape_Config.epsilon * nape_Config.epsilon) {
			if(c1.radius < c2.radius) {
				arb.inject(c1.area,c1.worldCOMx,c1.worldCOMy);
			} else {
				arb.inject(c2.area,c2.worldCOMx,c2.worldCOMy);
			}
			return true;
		} else {
			var d1 = Math.sqrt(ds);
			var id = 1 / d1;
			var x1 = 0.5 * (d1 - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.inject(c1.area,c1.worldCOMx,c1.worldCOMy);
			} else {
				var x2 = d1 - x1;
				if(x2 <= -c2.radius) {
					arb.inject(c2.area,c2.worldCOMx,c2.worldCOMy);
				} else {
					var area11 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X1 = x1;
					var cos1 = X1 / c1.radius;
					var sin1 = Math.sqrt(1 - cos1 * cos1);
					var theta1 = Math.acos(cos1);
					area11 = c1.radius * (c1.radius * theta1 - X1 * sin1);
					y1 = 0.66666666666666663 * c1.radius * sin1 * sin1 * sin1 / (theta1 - cos1 * sin1);
					var X2 = x2;
					var cos2 = X2 / c2.radius;
					var sin2 = Math.sqrt(1 - cos2 * cos2);
					var theta2 = Math.acos(cos2);
					area2 = c2.radius * (c2.radius * theta2 - X2 * sin2);
					y2 = 0.66666666666666663 * c2.radius * sin2 * sin2 * sin2 / (theta2 - cos2 * sin2);
					var tarea = area11 + area2;
					var ya = (y1 * area11 + (d1 - y2) * area2) / tarea * id;
					arb.inject(tarea,c1.worldCOMx + deltax * ya,c1.worldCOMy + deltay * ya);
				}
			}
			return true;
		}
	}
};
var zpp_$nape_geom_ZPP_$ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.inner = false;
	this.shape = null;
};
$hxClasses["zpp_nape.geom.ZPP_ConvexRayResult"] = zpp_$nape_geom_ZPP_$ConvexRayResult;
zpp_$nape_geom_ZPP_$ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_$nape_geom_ZPP_$ConvexRayResult.prototype = {
	shape: null
	,inner: null
	,toiDistance: null
	,__class__: zpp_$nape_geom_ZPP_$ConvexRayResult
};
var zpp_$nape_geom_ZPP_$GeomVert = function() {
	this.forced = false;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["zpp_nape.geom.ZPP_GeomVert"] = zpp_$nape_geom_ZPP_$GeomVert;
zpp_$nape_geom_ZPP_$GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_$nape_geom_ZPP_$GeomVert.get = function(x,y) {
	var ret;
	if(zpp_$nape_geom_ZPP_$GeomVert.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$GeomVert();
	} else {
		ret = zpp_$nape_geom_ZPP_$GeomVert.zpp_pool;
		zpp_$nape_geom_ZPP_$GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	ret.x = x;
	ret.y = y;
	return ret;
};
zpp_$nape_geom_ZPP_$GeomVert.prototype = {
	x: null
	,y: null
	,prev: null
	,next: null
	,forced: null
	,alloc: function() {
		this.forced = false;
	}
	,__class__: zpp_$nape_geom_ZPP_$GeomVert
};
var zpp_$nape_geom_ZPP_$GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
$hxClasses["zpp_nape.geom.ZPP_GeomPoly"] = zpp_$nape_geom_ZPP_$GeomPoly;
zpp_$nape_geom_ZPP_$GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_$nape_geom_ZPP_$GeomPoly.prototype = {
	outer: null
	,vertices: null
	,__class__: zpp_$nape_geom_ZPP_$GeomPoly
};
var zpp_$nape_geom_ZPP_$Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
$hxClasses["zpp_nape.geom.ZPP_Mat23"] = zpp_$nape_geom_ZPP_$Mat23;
zpp_$nape_geom_ZPP_$Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_$nape_geom_ZPP_$Mat23.get = function() {
	var ret;
	if(zpp_$nape_geom_ZPP_$Mat23.zpp_pool == null) {
		ret = new zpp_$nape_geom_ZPP_$Mat23();
	} else {
		ret = zpp_$nape_geom_ZPP_$Mat23.zpp_pool;
		zpp_$nape_geom_ZPP_$Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	return ret;
};
zpp_$nape_geom_ZPP_$Mat23.prototype = {
	outer: null
	,a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,_invalidate: null
	,invalidate: function() {
		if(this._invalidate != null) {
			this._invalidate();
		}
	}
	,next: null
	,alloc: function() {
	}
	,__class__: zpp_$nape_geom_ZPP_$Mat23
};
var zpp_$nape_geom_ZPP_$MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = [];
	var _g1 = 0;
	var _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
$hxClasses["zpp_nape.geom.ZPP_MatMN"] = zpp_$nape_geom_ZPP_$MatMN;
zpp_$nape_geom_ZPP_$MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_$nape_geom_ZPP_$MatMN.prototype = {
	outer: null
	,m: null
	,n: null
	,x: null
	,__class__: zpp_$nape_geom_ZPP_$MatMN
};
var zpp_$nape_geom_ZPP_$ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_$nape_geom_ZPP_$Vec2();
	this.c2 = new zpp_$nape_geom_ZPP_$Vec2();
	this.axis = new zpp_$nape_geom_ZPP_$Vec2();
};
$hxClasses["zpp_nape.geom.ZPP_ToiEvent"] = zpp_$nape_geom_ZPP_$ToiEvent;
zpp_$nape_geom_ZPP_$ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_$nape_geom_ZPP_$ToiEvent.prototype = {
	next: null
	,alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,free: function() {
	}
	,toi: null
	,s1: null
	,s2: null
	,arbiter: null
	,frozen1: null
	,frozen2: null
	,c1: null
	,c2: null
	,axis: null
	,slipped: null
	,failed: null
	,kinematic: null
	,__class__: zpp_$nape_geom_ZPP_$ToiEvent
};
var zpp_$nape_geom_ZPP_$SweepDistance = function() { };
$hxClasses["zpp_nape.geom.ZPP_SweepDistance"] = zpp_$nape_geom_ZPP_$SweepDistance;
zpp_$nape_geom_ZPP_$SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) {
		userAPI = false;
	}
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var ang2 = b2.angvel;
	if(ang2 < 0) {
		ang2 = -ang2;
	}
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape_Config.dynamicSweepLinearThreshold * nape_Config.dynamicSweepLinearThreshold && angBias < nape_Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			if(userAPI) {
				break;
			}
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) {
			delta = 1e-6;
		}
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				if(userAPI) {
					break;
				}
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var d2x1 = 0.0;
				var d2y1 = 0.0;
				d2x1 = c2.x - b2.posx;
				d2y1 = c2.y - b2.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1) + b2.sweep_angvel * (axis.y * d2x1 - axis.x * d2y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) {
		ang1 = -ang1;
	}
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape_Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) {
				toi.slipped = true;
			}
			if(proj <= 0 || sep < nape_Config.distanceThresholdCCD * 0.5) {
				break;
			}
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) {
			delta = 1e-6;
		}
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_$nape_geom_ZPP_$SweepDistance.distance(s1,s2,c1,c2,axis) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape_Config.distanceThresholdCCD) {
				var d1x1 = 0.0;
				var d1y1 = 0.0;
				d1x1 = c1.x - b1.posx;
				d1y1 = c1.y - b1.posy;
				var proj1 = dot1 - b1.sweep_angvel * (axis.y * d1x1 - axis.x * d1y1);
				if(proj1 > 0) {
					toi.slipped = true;
				}
				if(proj1 <= 0 || sep1 < nape_Config.distanceThresholdCCD * 0.5) {
					break;
				}
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) {
				toi.failed = true;
			}
			break;
		}
	}
	toi.toi = curTOI;
};
zpp_$nape_geom_ZPP_$SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) {
		upperBound = 1e100;
	}
	if(s1.isCircle() && s2.isCircle()) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = zpp_$nape_util_ZPP_$Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t1 = c1.radius;
			w1.x = c1.worldCOMx + nx * t1;
			w1.y = c1.worldCOMy + ny * t1;
			var t2 = -c2.radius;
			w2.x = c2.worldCOMx + nx * t2;
			w2.y = c2.worldCOMy + ny * t2;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.isCircle() && s2.isPolygon()) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.isPolygon() && s2.isCircle()) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.begin();
			while(cx_ite != null) {
				var a = cx_ite.elem();
				var dist1 = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist1 > upperBound) {
					best = dist1;
					break;
				}
				if(dist1 > 0) {
					if(dist1 > best) {
						best = dist1;
						a0 = a;
					}
				} else if(best < 0 && dist1 > best) {
					best = dist1;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx1 = 0.0;
					var ny1 = 0.0;
					nx1 = circle.worldCOMx - v0.x;
					ny1 = circle.worldCOMy - v0.y;
					var len1 = zpp_$nape_util_ZPP_$Math.sqrt(nx1 * nx1 + ny1 * ny1);
					best = len1 - circle.radius;
					if(best < upperBound) {
						if(len1 == 0) {
							nx1 = 1;
							ny1 = 0;
						} else {
							var t3 = 1.0 / len1;
							nx1 *= t3;
							ny1 *= t3;
						}
						var t4 = 0;
						w1.x = v0.x + nx1 * t4;
						w1.y = v0.y + ny1 * t4;
						var t5 = -circle.radius;
						w2.x = circle.worldCOMx + nx1 * t5;
						w2.y = circle.worldCOMy + ny1 * t5;
						axis.x = nx1;
						axis.y = ny1;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx2 = 0.0;
					var ny2 = 0.0;
					nx2 = circle.worldCOMx - v1.x;
					ny2 = circle.worldCOMy - v1.y;
					var len2 = zpp_$nape_util_ZPP_$Math.sqrt(nx2 * nx2 + ny2 * ny2);
					best = len2 - circle.radius;
					if(best < upperBound) {
						if(len2 == 0) {
							nx2 = 1;
							ny2 = 0;
						} else {
							var t6 = 1.0 / len2;
							nx2 *= t6;
							ny2 *= t6;
						}
						var t7 = 0;
						w1.x = v1.x + nx2 * t7;
						w1.y = v1.y + ny2 * t7;
						var t8 = -circle.radius;
						w2.x = circle.worldCOMx + nx2 * t8;
						w2.y = circle.worldCOMy + ny2 * t8;
						axis.x = nx2;
						axis.y = ny2;
					}
				} else {
					var t9 = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t9;
					w2.y = circle.worldCOMy + a0.gnormy * t9;
					var t10 = -best;
					w1.x = w2.x + a0.gnormx * t10;
					w1.y = w2.y + a0.gnormy * t10;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best1 = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite1 = p1.edges.begin();
			while(cx_ite1 != null) {
				var a3 = cx_ite1.elem();
				var min = 1e100;
				var cx_ite2 = p2.gverts.begin();
				while(cx_ite2 != null) {
					var v = cx_ite2.elem();
					var k = a3.gnormx * v.x + a3.gnormy * v.y;
					if(k < min) {
						min = k;
					}
					cx_ite2 = cx_ite2.next;
				}
				min -= a3.gprojection;
				if(min > upperBound) {
					best1 = min;
					break;
				}
				if(min > 0) {
					if(min > best1) {
						best1 = min;
						a1 = a3;
						besti = 1;
					}
				} else if(best1 < 0 && min > best1) {
					best1 = min;
					a1 = a3;
					besti = 1;
				}
				cx_ite1 = cx_ite1.next;
			}
			if(best1 < upperBound) {
				var cx_ite3 = p2.edges.begin();
				while(cx_ite3 != null) {
					var a4 = cx_ite3.elem();
					var min1 = 1e100;
					var cx_ite4 = p1.gverts.begin();
					while(cx_ite4 != null) {
						var v2 = cx_ite4.elem();
						var k1 = a4.gnormx * v2.x + a4.gnormy * v2.y;
						if(k1 < min1) {
							min1 = k1;
						}
						cx_ite4 = cx_ite4.next;
					}
					min1 -= a4.gprojection;
					if(min1 > upperBound) {
						best1 = min1;
						break;
					}
					if(min1 > 0) {
						if(min1 > best1) {
							best1 = min1;
							a2 = a4;
							besti = 2;
						}
					} else if(best1 < 0 && min1 > best1) {
						best1 = min1;
						a2 = a4;
						besti = 2;
					}
					cx_ite3 = cx_ite3.next;
				}
				if(best1 < upperBound) {
					var q1;
					var q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp1 = w1;
						w1 = w2;
						w2 = tmp1;
						swapped = !swapped;
					}
					var ay = null;
					var min2 = 1e100;
					var cx_ite5 = q2.edges.begin();
					while(cx_ite5 != null) {
						var a5 = cx_ite5.elem();
						var k2 = ax.gnormx * a5.gnormx + ax.gnormy * a5.gnormy;
						if(k2 < min2) {
							min2 = k2;
							ay = a5;
						}
						cx_ite5 = cx_ite5.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best1 >= 0) {
						var v01 = ax.gp0;
						var v11 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v11.x - v01.x;
						vy = v11.y - v01.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t11 = -(vx * (v01.x - q0.x) + vy * (v01.y - q0.y)) * vdot;
						var t21 = -(vx * (v01.x - q11.x) + vy * (v01.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v01.x) + qy * (q0.y - v01.y)) * qdot;
						var s21 = -(qx * (q0.x - v11.x) + qy * (q0.y - v11.y)) * qdot;
						if(t11 < 0) {
							t11 = 0;
						} else if(t11 > 1) {
							t11 = 1;
						}
						if(t21 < 0) {
							t21 = 0;
						} else if(t21 > 1) {
							t21 = 1;
						}
						if(s11 < 0) {
							s11 = 0;
						} else if(s11 > 1) {
							s11 = 1;
						}
						if(s21 < 0) {
							s21 = 0;
						} else if(s21 > 1) {
							s21 = 1;
						}
						var f1x = 0.0;
						var f1y = 0.0;
						var t12 = t11;
						f1x = v01.x + vx * t12;
						f1y = v01.y + vy * t12;
						var f2x = 0.0;
						var f2y = 0.0;
						var t13 = t21;
						f2x = v01.x + vx * t13;
						f2y = v01.y + vy * t13;
						var g1x = 0.0;
						var g1y = 0.0;
						var t14 = s11;
						g1x = q0.x + qx * t14;
						g1y = q0.y + qy * t14;
						var g2x = 0.0;
						var g2y = 0.0;
						var t15 = s21;
						g2x = q0.x + qx * t15;
						g2y = q0.y + qy * t15;
						var d1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g1x,g1y,v01.x,v01.y);
						var e2 = zpp_$nape_geom_ZPP_$VecMath.vec_dsq(g2x,g2y,v11.x,v11.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v01;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v11;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best1 = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best1 = Math.sqrt(e1);
						}
						if(best1 != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t16 = 1.0 / best1;
							axis.x *= t16;
							axis.y *= t16;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best1;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d11 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d11 - d0);
						var t17 = (-ax.tp1 - d0) * den;
						if(t17 > nape_Config.epsilon) {
							var t18 = t17;
							c0x += dvx * t18;
							c0y += dvy * t18;
						}
						var t19 = (-ax.tp0 - d11) * den;
						if(t19 < -nape_Config.epsilon) {
							var t20 = t19;
							c1x += dvx * t20;
							c1y += dvy * t20;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t22 = -c0d;
							w1.x = w2.x + ax.gnormx * t22;
							w1.y = w2.y + ax.gnormy * t22;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t23 = -c1d;
							w1.x = w2.x + ax.gnormx * t23;
							w1.y = w2.y + ax.gnormy * t23;
							return c1d;
						}
					}
				} else {
					return upperBound;
				}
			} else {
				return upperBound;
			}
		}
	}
};
var zpp_$nape_geom_ZPP_$Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
$hxClasses["zpp_nape.geom.ZPP_Vec3"] = zpp_$nape_geom_ZPP_$Vec3;
zpp_$nape_geom_ZPP_$Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_$nape_geom_ZPP_$Vec3.prototype = {
	outer: null
	,x: null
	,y: null
	,z: null
	,immutable: null
	,_validate: null
	,validate: function() {
		if(this._validate != null) {
			this._validate();
		}
	}
	,__class__: zpp_$nape_geom_ZPP_$Vec3
};
var zpp_$nape_geom_ZPP_$VecMath = function() { };
$hxClasses["zpp_nape.geom.ZPP_VecMath"] = zpp_$nape_geom_ZPP_$VecMath;
zpp_$nape_geom_ZPP_$VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_$nape_geom_ZPP_$VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
};
var zpp_$nape_phys_ZPP_$Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_$nape_ZPP_$ID.Interactor();
	this.cbsets = new zpp_$nape_util_ZNPList_$ZPP_$CallbackSet();
	this.cbTypes = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
};
$hxClasses["zpp_nape.phys.ZPP_Interactor"] = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_$nape_phys_ZPP_$Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id ? i1.id : i2.id;
	var di = i1.id < i2.id ? i2.id : i1.id;
	var xs = i1.cbsets.length < i2.cbsets.length ? i1.cbsets : i2.cbsets;
	var ret = null;
	var cx_ite = xs.begin();
	while(cx_ite != null) {
		var x = cx_ite.elem();
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
};
zpp_$nape_phys_ZPP_$Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
};
zpp_$nape_phys_ZPP_$Interactor.prototype = {
	outer_i: null
	,id: null
	,userData: null
	,ishape: null
	,ibody: null
	,icompound: null
	,isShape: function() {
		return this.ishape != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,__iaddedToSpace: function() {
		if(this.group != null) {
			this.group.addInteractor(this);
		}
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.addInteractor(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) {
			this.group.remInteractor(this);
		}
		var cx_ite = this.cbTypes.begin();
		while(cx_ite != null) {
			var cb = cx_ite.elem();
			cb.remInteractor(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,wake: function() {
		if(this.isShape()) {
			var body = this.ishape.body;
			if(body != null && body.space != null) {
				body.space.non_inlined_wake(body);
			}
		} else if(this.isBody()) {
			if(this.ibody.space != null) {
				this.ibody.space.non_inlined_wake(this.ibody);
			}
		} else if(this.icompound.space != null) {
			this.icompound.space.wakeCompound(this.icompound);
		}
	}
	,cbsets: null
	,getSpace: function() {
		if(this.isShape()) {
			if(this.ishape.body == null) {
				return null;
			} else {
				return this.ishape.body.space;
			}
		} else if(this.isBody()) {
			return this.ibody.space;
		} else {
			return this.icompound.space;
		}
	}
	,group: null
	,cbTypes: null
	,cbSet: null
	,wrap_cbTypes: null
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_$nape_util_ZPP_$CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space = this.getSpace();
			if(space != null) {
				this.dealloc_cbSet();
				cb.remInteractor(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space = this.getSpace();
			if(space != null) {
				this.dealloc_cbSet();
				cb.addInteractor(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.begin();
			while(cx_ite != null) {
				var j = cx_ite.elem();
				if(zpp_$nape_callbacks_ZPP_$CbType.setlt(cb,j)) {
					break;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,alloc_cbSet: function() {
		var space = this.getSpace();
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.increment();
			this.cbSet.addInteractor(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,dealloc_cbSet: function() {
		var space = this.getSpace();
		if(this.cbSet != null) {
			this.cbSet.remInteractor(this);
			space.nullInteractorType(this);
			if(this.cbSet.decrement()) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
				zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,immutable_midstep: function(n) {
		if(this.isBody()) {
			this.ibody.__immutable_midstep(n);
		} else if(this.isShape()) {
			this.ishape.__immutable_midstep(n);
		} else {
			this.icompound.__imutable_midstep(n);
		}
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.isShape()) {
			cur = cur.ishape.body;
		} else if(cur.isCompound()) {
			cur = cur.icompound.compound;
		} else {
			cur = cur.ibody.compound;
		}
		if(cur == null) {
			return null;
		} else {
			return cur.group;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Interactor
};
var zpp_$nape_phys_ZPP_$Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = zpp_$nape_ZPP_$Const.POSINF();
	this.pre_posy = zpp_$nape_ZPP_$Const.POSINF();
	this.pre_rot = zpp_$nape_ZPP_$Const.POSINF();
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = 0;
	this.gravMassMode = 0;
	this.gravMassScale = 1.0;
	this.inertiaMode = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this.wrap_shapes = zpp_$nape_util_ZPP_$ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.kinematicDelaySleep = false;
};
$hxClasses["zpp_nape.phys.ZPP_Body"] = zpp_$nape_phys_ZPP_$Body;
zpp_$nape_phys_ZPP_$Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_$nape_phys_ZPP_$Body.__static = function() {
	var ret = new nape_phys_Body(nape_phys_BodyType.get_STATIC());
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
};
zpp_$nape_phys_ZPP_$Body.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Body.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,world: null
	,type: null
	,isStatic: function() {
		return this.type == 1;
	}
	,isDynamic: function() {
		return this.type == 2;
	}
	,isKinematic: function() {
		return this.type == 3;
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,compound: null
	,shapes: null
	,wrap_shapes: null
	,invalidate_shapes: function() {
		this.invalidate_aabb();
		this.invalidate_localCOM();
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,space: null
	,arbiters: null
	,wrap_arbiters: null
	,constraints: null
	,wrap_constraints: null
	,component: null
	,atRest: function(dt) {
		if(!this.isDynamic()) {
			return this.component.sleeping;
		} else {
			var linSq = nape_Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep;
			if(this.velx * this.velx + this.vely * this.vely > linSq) {
				cansleep = false;
			} else if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt) {
				cansleep = false;
			} else {
				var dx = 0.0;
				var dy = 0.0;
				dx = this.aabb.maxx - this.aabb.minx;
				dy = this.aabb.maxy - this.aabb.miny;
				var idl = dx * dx + dy * dy;
				var angSq = nape_Config.angularSleepThreshold;
				angSq *= angSq;
				if(4 * this.angvel * this.angvel * idl > angSq) {
					cansleep = false;
				} else {
					var dr = this.rot - this.pre_rot;
					if(dr * dr * idl > angSq * dt * dt) {
						cansleep = false;
					} else {
						cansleep = true;
					}
				}
			}
			if(!cansleep) {
				this.component.waket = this.space.stamp;
			}
			return this.component.waket + nape_Config.sleepDelay < this.space.stamp;
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.begin();
		while(cx_ite != null) {
			var arb = cx_ite.elem();
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,sweepTime: null
	,sweep_angvel: null
	,sweepFrozen: null
	,sweepRadius: null
	,bullet: null
	,bulletEnabled: null
	,disableCCD: null
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) {
				this.delta_rot(this.sweep_angvel * delta);
			}
		}
	}
	,sweepValidate: function(s) {
		if(s.isCircle()) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.begin();
			var cx_ite = p.gverts.begin();
			while(cx_ite != null) {
				var g = cx_ite.elem();
				var l = li.elem();
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.begin();
			var cx_ite1 = p.gverts.begin();
			var u = cx_ite1.elem();
			cx_ite1 = cx_ite1.next;
			while(cx_ite1 != null) {
				var v = cx_ite1.elem();
				var e = ite.elem();
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite1 = cx_ite1.next;
			}
			var v1 = p.gverts.front();
			var e1 = ite.elem();
			ite = ite.next;
			e1.gnormx = this.axisy * e1.lnormx - this.axisx * e1.lnormy;
			e1.gnormy = e1.lnormx * this.axisx + e1.lnormy * this.axisy;
			e1.gprojection = this.posx * e1.gnormx + this.posy * e1.gnormy + e1.lprojection;
			e1.tp0 = u.y * e1.gnormx - u.x * e1.gnormy;
			e1.tp1 = v1.y * e1.gnormx - v1.x * e1.gnormy;
		}
	}
	,pre_posx: null
	,pre_posy: null
	,posx: null
	,posy: null
	,wrap_pos: null
	,velx: null
	,vely: null
	,wrap_vel: null
	,forcex: null
	,forcey: null
	,kinvelx: null
	,kinvely: null
	,svelx: null
	,svely: null
	,invalidate_pos: function() {
		var cx_ite = this.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.invalidate_worldCOM();
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,vel_invalidate: function(vel) {
		this.velx = vel.x;
		this.vely = vel.y;
		this.invalidate_wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,setupPosition: function() {
		this.wrap_pos = nape_geom_Vec2.get(this.posx,this.posy);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_pos.zpp_inner._immutable = true;
		} else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape_geom_Vec2.get(this.velx,this.vely);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) {
			this.wrap_vel.zpp_inner._immutable = true;
		} else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,angvel: null
	,torque: null
	,kinangvel: null
	,pre_rot: null
	,rot: null
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			if(s.type == 1) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.invalidate_worldCOM();
	}
	,axisx: null
	,axisy: null
	,zip_axis: null
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.quick_validate_axis();
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.quick_validate_axis();
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,kinematicDelaySleep: null
	,mass: null
	,zip_mass: null
	,massMode: null
	,imass: null
	,smass: null
	,cmass: null
	,nomove: null
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == 0 && exist) {
			this.zip_mass = false;
			if(this.massMode == 0) {
				this.cmass = 0;
				var cx_ite = this.shapes.begin();
				while(cx_ite != null) {
					var s = cx_ite.elem();
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.isDynamic() && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = zpp_$nape_ZPP_$Const.POSINF();
				this.imass = this.smass = 0.0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,gravMass: null
	,zip_gravMass: null
	,gravMassMode: null
	,gravMassScale: null
	,zip_gravMassScale: null
	,invalidate_gravMass: function() {
		if(this.gravMassMode != 1) {
			this.zip_gravMass = true;
		}
		if(this.gravMassMode != 2) {
			this.zip_gravMassScale = true;
		}
		this.wake();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == 0) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == 2) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,inertiaMode: null
	,inertia: null
	,zip_inertia: null
	,cinertia: null
	,iinertia: null
	,sinertia: null
	,norotate: null
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == 0 && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == 0) {
				this.cinertia = 0;
				var cx_ite = this.shapes.begin();
				while(cx_ite != null) {
					var s = cx_ite.elem();
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.isDynamic() && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = zpp_$nape_ZPP_$Const.POSINF();
				this.sinertia = this.iinertia = 0;
			}
			if(exist) {
				this.invalidate_inertia();
			}
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,aabb: null
	,zip_aabb: null
	,validate_aabb: function() {
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = zpp_$nape_ZPP_$Const.POSINF();
			this.aabb.miny = zpp_$nape_ZPP_$Const.POSINF();
			this.aabb.maxx = zpp_$nape_ZPP_$Const.NEGINF();
			this.aabb.maxy = zpp_$nape_ZPP_$Const.NEGINF();
			var cx_ite = this.shapes.begin();
			while(cx_ite != null) {
				var s = cx_ite.elem();
				s.validate_aabb();
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,localCOMx: null
	,localCOMy: null
	,zip_localCOM: null
	,worldCOMx: null
	,worldCOMy: null
	,zip_worldCOM: null
	,wrap_localCOM: null
	,wrap_worldCOM: null
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_worldCOM();
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.begin();
			while(cx_ite != null) {
				var s = cx_ite.elem();
				s.validate_localCOM();
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t1 = 1.0 / msum;
				this.localCOMx = tempx * t1;
				this.localCOMy = tempy * t1;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == 0) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.isDynamic()) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = zpp_$nape_ZPP_$Const.POSINF();
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			this.validate_axis();
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,getlocalCOM: function() {
		this.validate_localCOM();
	}
	,__immutable_midstep: function(name) {
	}
	,aabb_validate: function() {
		this.validate_aabb();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) {
				s.zpp_inner.body.wrap_shapes.remove(s);
			}
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) {
				this.space.added_shape(s.zpp_inner);
			}
			if(s.zpp_inner.isPolygon()) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else {
			return false;
		}
	}
	,shapes_subber: function(s) {
		if(this.space != null) {
			this.space.removed_shape(s.zpp_inner);
		}
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,addedToSpace: function() {
		if(zpp_$nape_space_ZPP_$Component.zpp_pool == null) {
			this.component = new zpp_$nape_space_ZPP_$Component();
		} else {
			this.component = zpp_$nape_space_ZPP_$Component.zpp_pool;
			zpp_$nape_space_ZPP_$Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		this.component.alloc();
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		while(!this.arbiters.empty()) {
			var arb = this.arbiters.pop_unsafe();
			arb.lazyRetire(this.space,this);
		}
		var o = this.component;
		o.free();
		o.next = zpp_$nape_space_ZPP_$Component.zpp_pool;
		zpp_$nape_space_ZPP_$Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,__class__: zpp_$nape_phys_ZPP_$Body
});
var zpp_$nape_phys_ZPP_$Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
};
$hxClasses["zpp_nape.phys.ZPP_Compound"] = zpp_$nape_phys_ZPP_$Compound;
zpp_$nape_phys_ZPP_$Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_$nape_phys_ZPP_$Compound.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_phys_ZPP_$Compound.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,bodies: null
	,constraints: null
	,compounds: null
	,wrap_bodies: null
	,wrap_constraints: null
	,wrap_compounds: null
	,depth: null
	,compound: null
	,space: null
	,__imutable_midstep: function(name) {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_bodies.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_bodies.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addBody(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remBody(x.zpp_inner);
		}
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_constraints.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_constraints.remove(x);
			}
			x.zpp_inner.compound = this;
			if(this.space != null) {
				this.space.addConstraint(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) {
			this.space.remConstraint(x.zpp_inner);
		}
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) {
				x.zpp_inner.compound.wrap_compounds.remove(x);
			} else if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) {
				this.space.addCompound(x.zpp_inner);
			}
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) {
			this.space.remCompound(x.zpp_inner);
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Compound
});
var zpp_$nape_phys_ZPP_$FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.feature_cons();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
$hxClasses["zpp_nape.phys.ZPP_FluidProperties"] = zpp_$nape_phys_ZPP_$FluidProperties;
zpp_$nape_phys_ZPP_$FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_$nape_phys_ZPP_$FluidProperties.prototype = {
	next: null
	,outer: null
	,alloc: function() {
	}
	,shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,viscosity: null
	,density: null
	,gravityx: null
	,gravityy: null
	,wrap_gravity: null
	,invalidate: function() {
		var cx_ite = this.shapes.begin();
		while(cx_ite != null) {
			var shape = cx_ite.elem();
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$FluidProperties
};
var zpp_$nape_phys_ZPP_$Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.shapes = null;
	this.outer = null;
	this.next = null;
	this.feature_cons();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
$hxClasses["zpp_nape.phys.ZPP_Material"] = zpp_$nape_phys_ZPP_$Material;
zpp_$nape_phys_ZPP_$Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_$nape_phys_ZPP_$Material.prototype = {
	next: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape_phys_Material();
			var o = this.outer.zpp_inner;
			o.free();
			o.next = zpp_$nape_phys_ZPP_$Material.zpp_pool;
			zpp_$nape_phys_ZPP_$Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,free: function() {
		this.outer = null;
	}
	,alloc: function() {
	}
	,shapes: null
	,feature_cons: function() {
		this.shapes = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,dynamicFriction: null
	,staticFriction: null
	,density: null
	,elasticity: null
	,rollingFriction: null
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,invalidate: function(x) {
		var cx_ite = this.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,__class__: zpp_$nape_phys_ZPP_$Material
};
var zpp_$nape_shape_ZPP_$Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_$nape_phys_ZPP_$Interactor.call(this);
	this.pairs = new zpp_$nape_util_ZNPList_$ZPP_$AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_$nape_geom_ZPP_$AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_$nape_phys_ZPP_$Material();
	this.sweepRadius = this.sweepCoef = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Shape"] = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_$nape_shape_ZPP_$Shape.__super__ = zpp_$nape_phys_ZPP_$Interactor;
zpp_$nape_shape_ZPP_$Shape.prototype = $extend(zpp_$nape_phys_ZPP_$Interactor.prototype,{
	outer: null
	,body: null
	,type: null
	,isCircle: function() {
		return this.type == 0;
	}
	,isPolygon: function() {
		return this.type == 1;
	}
	,area: null
	,zip_area_inertia: null
	,inertia: null
	,angDrag: null
	,zip_angDrag: null
	,localCOMx: null
	,localCOMy: null
	,zip_localCOM: null
	,worldCOMx: null
	,worldCOMy: null
	,zip_worldCOM: null
	,wrap_localCOM: null
	,wrap_worldCOM: null
	,sweepRadius: null
	,zip_sweepRadius: null
	,sweepCoef: null
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.isCircle()) {
				this.circle.__validate_sweepRadius();
			} else {
				this.polygon.__validate_sweepRadius();
			}
		}
	}
	,circle: null
	,polygon: null
	,refmaterial: null
	,material: null
	,filter: null
	,fluidProperties: null
	,fluidEnabled: null
	,sensorEnabled: null
	,sweep: null
	,node: null
	,pairs: null
	,aabb: null
	,zip_aabb: null
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.isCircle()) {
					this.circle.__validate_aabb();
				} else {
					this.polygon.__validate_aabb();
				}
			}
		}
	}
	,force_validate_aabb: function() {
		if(this.isCircle()) {
			this.circle._force_validate_aabb();
		} else {
			this.polygon._force_validate_aabb();
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) {
			this.body.invalidate_aabb();
		}
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.isCircle()) {
				this.circle.__validate_area_inertia();
			} else {
				this.polygon.__validate_area_inertia();
			}
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.isCircle()) {
				this.circle.__validate_angDrag();
			} else {
				this.polygon.__validate_angDrag();
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.isPolygon()) {
				this.polygon.__validate_localCOM();
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				this.validate_localCOM();
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,getworldCOM: function() {
		this.validate_worldCOM();
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.isCircle()) {
			this.invalidate_sweepRadius();
		}
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) {
			this.body.invalidate_localCOM();
		}
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.invalidate_aabb();
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_$nape_phys_ZPP_$Material.WAKE) != 0) {
			this.wake();
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ARBITERS) != 0) {
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_$nape_phys_ZPP_$Material.ANGDRAG) != 0) {
			this.invalidate_angDrag();
		}
		this.refmaterial.set(this.material);
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) {
			this.wake();
		}
	}
	,aabb_validate: function() {
		this.validate_aabb();
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) {
					this.material.remShape(this);
				}
			}
			this.material = material;
			if(this.body != null && this.body.space != null) {
				material.addShape(this);
			}
			this.wake();
			if(this.body != null) {
				this.body.refreshArbiters();
			}
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) {
					this.filter.remShape(this);
				}
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) {
				filter.addShape(this);
			}
			this.wake();
		}
	}
	,__immutable_midstep: function(name) {
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.invalidate_aabb();
	}
	,removedFromBody: function() {
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.addShape(this);
		this.filter.addShape(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.addShape(this);
		}
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.remShape(this);
		this.filter.remShape(this);
		if(this.fluidProperties != null) {
			this.fluidProperties.remShape(this);
		}
	}
	,__class__: zpp_$nape_shape_ZPP_$Shape
});
var zpp_$nape_shape_ZPP_$Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,0);
	this.circle = this;
	this.zip_localCOM = false;
};
$hxClasses["zpp_nape.shape.ZPP_Circle"] = zpp_$nape_shape_ZPP_$Circle;
zpp_$nape_shape_ZPP_$Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_$nape_shape_ZPP_$Circle.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Circle.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	outer_zn: null
	,radius: null
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_aabb();
		if(this.body != null) {
			this.body.wake();
		}
	}
	,__validate_aabb: function() {
		this.validate_worldCOM();
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape_Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape_Config.fluidAngularDrag * (1 + nape_Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__class__: zpp_$nape_shape_ZPP_$Circle
});
var zpp_$nape_shape_ZPP_$Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Edge"] = zpp_$nape_shape_ZPP_$Edge;
zpp_$nape_shape_ZPP_$Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_$nape_shape_ZPP_$Edge.prototype = {
	next: null
	,free: function() {
		this.polygon = null;
	}
	,alloc: function() {
	}
	,polygon: null
	,outer: null
	,wrapper: function() {
		if(this.outer == null) {
			zpp_$nape_shape_ZPP_$Edge.internal = true;
			this.outer = new nape_shape_Edge();
			zpp_$nape_shape_ZPP_$Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,lnormx: null
	,lnormy: null
	,wrap_lnorm: null
	,gnormx: null
	,gnormy: null
	,wrap_gnorm: null
	,length: null
	,lprojection: null
	,gprojection: null
	,lp0: null
	,gp0: null
	,lp1: null
	,gp1: null
	,tp0: null
	,tp1: null
	,__class__: zpp_$nape_shape_ZPP_$Edge
};
var zpp_$nape_shape_ZPP_$Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_$nape_shape_ZPP_$Shape.call(this,1);
	this.polygon = this;
	this.lverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.gverts = new zpp_$nape_geom_ZPP_$Vec2();
	this.edges = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this.edgeCnt = 0;
};
$hxClasses["zpp_nape.shape.ZPP_Polygon"] = zpp_$nape_shape_ZPP_$Polygon;
zpp_$nape_shape_ZPP_$Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_$nape_shape_ZPP_$Polygon.__super__ = zpp_$nape_shape_ZPP_$Shape;
zpp_$nape_shape_ZPP_$Polygon.prototype = $extend(zpp_$nape_shape_ZPP_$Shape.prototype,{
	outer_zn: null
	,lverts: null
	,wrap_lverts: null
	,gverts: null
	,wrap_gverts: null
	,edges: null
	,wrap_edges: null
	,edgeCnt: null
	,reverse_flag: null
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,gverts_pa_validate: function() {
		this.validate_gverts();
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			if(i == x.zpp_inner) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.begin();
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.begin();
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_$nape_geom_ZPP_$Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.begin().next != null) {
			if(this.lverts.begin().next.next == null) {
				var ed;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				ed.alloc();
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed1 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed1 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				ed1.alloc();
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed2;
				if(zpp_$nape_shape_ZPP_$Edge.zpp_pool == null) {
					ed2 = new zpp_$nape_shape_ZPP_$Edge();
				} else {
					ed2 = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
					zpp_$nape_shape_ZPP_$Edge.zpp_pool = ed2.next;
					ed2.next = null;
				}
				ed2.alloc();
				ed2.polygon = this;
				this.edges.insert(ite2,ed2);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_$nape_util_ZPP_$MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,zip_lverts: null
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) {
			this.body.wake();
		}
	}
	,zip_laxi: null
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.invalidate_sweepRadius();
		this.zip_laxi = true;
	}
	,zip_gverts: null
	,invalidate_gverts: function() {
		this.invalidate_aabb();
		this.zip_gverts = true;
	}
	,zip_gaxi: null
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,zip_valid: null
	,validation: null
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			this.splice_collinear();
			if(this.lverts.size() < 3) {
				return this.validation = nape_shape_ValidationResult.get_DEGENERATE();
			} else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape_Config.epsilon) {
					return this.validation = nape_shape_ValidationResult.get_DEGENERATE();
				} else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.begin();
					var u = cx_ite.elem();
					cx_ite = cx_ite.next;
					var v = cx_ite.elem();
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite.elem();
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape_Config.epsilon) {
							pos = true;
						} else if(dot < -nape_Config.epsilon) {
							neg = true;
						}
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.begin();
						var w1 = cx_ite.elem();
						while(true) {
							var ax1 = 0.0;
							var ay1 = 0.0;
							ax1 = w1.x - v.x;
							ay1 = w1.y - v.y;
							var bx1 = 0.0;
							var by1 = 0.0;
							bx1 = v.x - u.x;
							by1 = v.y - u.y;
							var dot1 = by1 * ax1 - bx1 * ay1;
							if(dot1 > nape_Config.epsilon) {
								pos = true;
							} else if(dot1 < -nape_Config.epsilon) {
								neg = true;
							}
							if(pos && neg) {
								cx_cont = false;
								break;
							}
							if(!false) {
								break;
							}
						}
						if(cx_cont) {
							u = v;
							v = w1;
							cx_ite = cx_ite.next;
							var w2 = cx_ite.elem();
							while(true) {
								var ax2 = 0.0;
								var ay2 = 0.0;
								ax2 = w2.x - v.x;
								ay2 = w2.y - v.y;
								var bx2 = 0.0;
								var by2 = 0.0;
								bx2 = v.x - u.x;
								by2 = v.y - u.y;
								var dot2 = by2 * ax2 - bx2 * ay2;
								if(dot2 > nape_Config.epsilon) {
									pos = true;
								} else if(dot2 < -nape_Config.epsilon) {
									neg = true;
								}
								if(pos && neg) {
									break;
								}
								if(!false) {
									break;
								}
							}
						}
					}
					if(pos && neg) {
						return this.validation = nape_shape_ValidationResult.get_CONCAVE();
					} else {
						var cont = true;
						var cx_cont1 = true;
						var cx_ite1 = this.lverts.begin();
						var u1 = cx_ite1.elem();
						cx_ite1 = cx_ite1.next;
						while(cx_ite1 != null) {
							var v1 = cx_ite1.elem();
							if(!cont) {
								cx_cont1 = false;
								break;
							}
							var cx_cont2 = true;
							var cx_ite2 = this.lverts.begin();
							var a = cx_ite2.elem();
							cx_ite2 = cx_ite2.next;
							while(cx_ite2 != null) {
								var b = cx_ite2.elem();
								if(u1 == a || u1 == b || v1 == a || v1 == b) {
									a = b;
									cx_ite2 = cx_ite2.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u1.x - a.x;
								sy = u1.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v1.x - u1.x;
								vy = v1.y - u1.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape_Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape_Config.epsilon && t < 1 - nape_Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape_Config.epsilon && s < 1 - nape_Config.epsilon) {
											cont = false;
											cx_cont2 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite2 = cx_ite2.next;
							}
							if(cx_cont2) {
								while(true) {
									var b1 = this.lverts.front();
									if(u1 == a || u1 == b1 || v1 == a || v1 == b1) {
										break;
									}
									var sx1 = 0.0;
									var sy1 = 0.0;
									sx1 = u1.x - a.x;
									sy1 = u1.y - a.y;
									var vx1 = 0.0;
									var vy1 = 0.0;
									vx1 = v1.x - u1.x;
									vy1 = v1.y - u1.y;
									var qx1 = 0.0;
									var qy1 = 0.0;
									qx1 = b1.x - a.x;
									qy1 = b1.y - a.y;
									var den1 = vy1 * qx1 - vx1 * qy1;
									if(den1 * den1 > nape_Config.epsilon) {
										den1 = 1 / den1;
										var t1 = (qy1 * sx1 - qx1 * sy1) * den1;
										if(t1 > nape_Config.epsilon && t1 < 1 - nape_Config.epsilon) {
											var s1 = (vy1 * sx1 - vx1 * sy1) * den1;
											if(s1 > nape_Config.epsilon && s1 < 1 - nape_Config.epsilon) {
												cont = false;
												break;
											}
										}
									}
									if(!false) {
										break;
									}
								}
							}
							u1 = v1;
							cx_ite1 = cx_ite1.next;
						}
						if(cx_cont1) {
							while(true) {
								var v2 = this.lverts.front();
								if(!cont) {
									break;
								}
								var cx_cont3 = true;
								var cx_ite3 = this.lverts.begin();
								var a1 = cx_ite3.elem();
								cx_ite3 = cx_ite3.next;
								while(cx_ite3 != null) {
									var b2 = cx_ite3.elem();
									if(u1 == a1 || u1 == b2 || v2 == a1 || v2 == b2) {
										a1 = b2;
										cx_ite3 = cx_ite3.next;
										continue;
									}
									var sx2 = 0.0;
									var sy2 = 0.0;
									sx2 = u1.x - a1.x;
									sy2 = u1.y - a1.y;
									var vx2 = 0.0;
									var vy2 = 0.0;
									vx2 = v2.x - u1.x;
									vy2 = v2.y - u1.y;
									var qx2 = 0.0;
									var qy2 = 0.0;
									qx2 = b2.x - a1.x;
									qy2 = b2.y - a1.y;
									var den2 = vy2 * qx2 - vx2 * qy2;
									if(den2 * den2 > nape_Config.epsilon) {
										den2 = 1 / den2;
										var t2 = (qy2 * sx2 - qx2 * sy2) * den2;
										if(t2 > nape_Config.epsilon && t2 < 1 - nape_Config.epsilon) {
											var s2 = (vy2 * sx2 - vx2 * sy2) * den2;
											if(s2 > nape_Config.epsilon && s2 < 1 - nape_Config.epsilon) {
												cont = false;
												cx_cont3 = false;
												break;
											}
										}
									}
									a1 = b2;
									cx_ite3 = cx_ite3.next;
								}
								if(cx_cont3) {
									while(true) {
										var b3 = this.lverts.front();
										if(u1 == a1 || u1 == b3 || v2 == a1 || v2 == b3) {
											break;
										}
										var sx3 = 0.0;
										var sy3 = 0.0;
										sx3 = u1.x - a1.x;
										sy3 = u1.y - a1.y;
										var vx3 = 0.0;
										var vy3 = 0.0;
										vx3 = v2.x - u1.x;
										vy3 = v2.y - u1.y;
										var qx3 = 0.0;
										var qy3 = 0.0;
										qx3 = b3.x - a1.x;
										qy3 = b3.y - a1.y;
										var den3 = vy3 * qx3 - vx3 * qy3;
										if(den3 * den3 > nape_Config.epsilon) {
											den3 = 1 / den3;
											var t3 = (qy3 * sx3 - qx3 * sy3) * den3;
											if(t3 > nape_Config.epsilon && t3 < 1 - nape_Config.epsilon) {
												var s3 = (vy3 * sx3 - vx3 * sy3) * den3;
												if(s3 > nape_Config.epsilon && s3 < 1 - nape_Config.epsilon) {
													cont = false;
													break;
												}
											}
										}
										if(!false) {
											break;
										}
									}
								}
								if(!false) {
									break;
								}
							}
						}
						if(!cont) {
							return this.validation = nape_shape_ValidationResult.get_SELF_INTERSECTING();
						} else {
							return this.validation = nape_shape_ValidationResult.get_VALID();
						}
					}
				}
			}
		} else {
			return this.validation;
		}
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.size() > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			if(i == x) {
				break;
			} else {
				if(ite == null) {
					ite = this.gverts.begin();
				} else {
					ite = ite.next;
				}
				if(ite2 == null) {
					ite2 = this.edges.begin();
				} else {
					ite2 = ite2.next;
				}
			}
			cx_ite = cx_ite.next;
		}
		var rem = ite == null ? this.gverts.front() : ite.next.elem();
		this.gverts.erase(ite);
		var o = rem;
		o.free();
		o.next = zpp_$nape_geom_ZPP_$Vec2.zpp_pool;
		zpp_$nape_geom_ZPP_$Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o1 = rem1;
			o1.free();
			o1.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o1;
			rem1 = this.edges.pop_unsafe();
			var o2 = rem1;
			o2.free();
			o2.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o2;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem2 = ite2 == null ? this.edges.front() : ite2.next.elem();
			this.edges.erase(ite2);
			var o3 = rem2;
			o3.free();
			o3.next = zpp_$nape_shape_ZPP_$Edge.zpp_pool;
			zpp_$nape_shape_ZPP_$Edge.zpp_pool = o3;
			this.edgeCnt--;
		}
	}
	,zip_sanitation: null
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,splice_collinear_real: function() {
		if(this.lverts.begin() == null) {
			return;
		}
		if(this.lverts.begin().next == null) {
			return;
		}
		if(this.lverts.begin().next.next == null) {
			return;
		}
		var pre = null;
		var cur = this.lverts.begin();
		while(cur != null) {
			var nxt = cur.next == null ? this.lverts.begin() : cur.next;
			var u = cur.elem();
			var v = nxt.elem();
			if(zpp_$nape_geom_ZPP_$VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape_Config.epsilon * nape_Config.epsilon) {
				this.cleanup_lvert(cur.elem());
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.empty()) {
			return;
		}
		var removed;
		while(true) {
			removed = false;
			var pre1 = this.lverts.begin();
			while(pre1 != null) {
				var cur1 = pre1.next == null ? this.lverts.begin() : pre1.next;
				var nxt1 = cur1.next == null ? this.lverts.begin() : cur1.next;
				var u1 = pre1.elem();
				var v1 = cur1.elem();
				var w = nxt1.elem();
				var ax = 0.0;
				var ay = 0.0;
				ax = v1.x - u1.x;
				ay = v1.y - u1.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v1.x;
				by = w.y - v1.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape_Config.epsilon * nape_Config.epsilon) {
					pre1 = pre1.next;
				} else {
					this.cleanup_lvert(cur1.elem());
					this.lverts.erase(pre1.next == null ? null : pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
			if(!removed) {
				break;
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) {
			this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_gverts != null) {
			this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		}
		if(this.wrap_edges != null) {
			this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.begin();
			var cx_ite = this.lverts.begin();
			var u = cx_ite.elem();
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite.elem();
				var edge = ite.elem();
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t1 = dx;
				dx = -dy;
				dy = t1;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v1 = this.lverts.front();
			var edge1 = ite.elem();
			ite = ite.next;
			edge1.lp0 = u;
			edge1.lp1 = v1;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = u.x - v1.x;
			dy1 = u.y - v1.y;
			var l1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			edge1.length = l1;
			var t2 = 1.0 / l1;
			dx1 *= t2;
			dy1 *= t2;
			var t3 = dx1;
			dx1 = -dy1;
			dy1 = t3;
			edge1.lprojection = dx1 * u.x + dy1 * u.y;
			edge1.lnormx = dx1;
			edge1.lnormy = dy1;
			if(edge1.wrap_lnorm != null) {
				edge1.wrap_lnorm.zpp_inner.x = dx1;
				edge1.wrap_lnorm.zpp_inner.y = dy1;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.begin();
				var cx_ite = this.gverts.begin();
				while(cx_ite != null) {
					var g = cx_ite.elem();
					var l = li.elem();
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.begin();
				var cx_ite = this.gverts.begin();
				var u = cx_ite.elem();
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v = cx_ite.elem();
					var e = ite.elem();
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite = cx_ite.next;
				}
				var v1 = this.gverts.front();
				var e1 = ite.elem();
				ite = ite.next;
				e1.gp0 = u;
				e1.gp1 = v1;
				e1.gnormx = this.body.axisy * e1.lnormx - this.body.axisx * e1.lnormy;
				e1.gnormy = e1.lnormx * this.body.axisx + e1.lnormy * this.body.axisy;
				e1.gprojection = this.body.posx * e1.gnormx + this.body.posy * e1.gnormy + e1.lprojection;
				if(e1.wrap_gnorm != null) {
					e1.wrap_gnorm.zpp_inner.x = e1.gnormx;
					e1.wrap_gnorm.zpp_inner.y = e1.gnormy;
				}
				e1.tp0 = e1.gp0.y * e1.gnormx - e1.gp0.x * e1.gnormy;
				e1.tp1 = e1.gp1.y * e1.gnormx - e1.gp1.x * e1.gnormy;
			}
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		var p0 = this.gverts.front();
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.begin().next;
		while(cx_ite != null) {
			var p = cx_ite.elem();
			if(p.x < this.aabb.minx) {
				this.aabb.minx = p.x;
			}
			if(p.x > this.aabb.maxx) {
				this.aabb.maxx = p.x;
			}
			if(p.y < this.aabb.miny) {
				this.aabb.miny = p.y;
			}
			if(p.y > this.aabb.maxy) {
				this.aabb.maxy = p.y;
			}
			cx_ite = cx_ite.next;
		}
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.begin();
		var p0 = this.gverts.front();
		var l = li.elem();
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.begin().next;
		while(cx_ite != null) {
			var p = cx_ite.elem();
			var l1 = li.elem();
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) {
				this.aabb.minx = p.x;
			}
			if(p.x > this.aabb.maxx) {
				this.aabb.maxx = p.x;
			}
			if(p.y < this.aabb.miny) {
				this.aabb.miny = p.y;
			}
			if(p.y > this.aabb.maxy) {
				this.aabb.maxy = p.y;
			}
			cx_ite = cx_ite.next;
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) {
				maxRadius = r;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.edges.begin();
		while(cx_ite1 != null) {
			var e = cx_ite1.elem();
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) {
					break;
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		if(minRadius < 0) {
			minRadius = 0;
		}
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,__validate_area_inertia: function() {
		if(this.lverts.begin() == null || this.lverts.begin().next == null || this.lverts.begin().next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.begin();
			var u = cx_ite.elem();
			cx_ite = cx_ite.next;
			var v = cx_ite.elem();
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite.elem();
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.begin();
			var w1 = cx_ite.elem();
			var a1 = v.y * u.x - v.x * u.y;
			var b1 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a1 * b1;
			s2 += a1;
			this.area += v.x * (w1.y - u.y);
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite.elem();
			var a2 = v.y * u.x - v.x * u.y;
			var b2 = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a2 * b2;
			s2 += a2;
			this.area += v.x * (w2.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_angDrag: function() {
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.begin();
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.begin();
		var u = cx_itei.elem();
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej.elem();
			var edge = ei.elem();
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1 ? 1 : t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape_Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0 ? 0 : t;
				var cx1 = 0.0;
				var cy1 = 0.0;
				cx1 = u.x;
				cy1 = u.y;
				var t2 = tb;
				cx1 += dx * t2;
				cy1 += dy * t2;
				var dota1 = edge.lnormy * cx1 - edge.lnormx * cy1;
				var dotb1 = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots1 = (dotb1 * dotb1 * dotb1 - dota1 * dota1 * dota1) / (3 * (dotb1 - dota1));
				accum += dots1 * nape_Config.fluidVacuumDrag * (1 - tb) * edge.length * nape_Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) {
			while(true) {
				cx_itej = this.lverts.begin();
				var v1 = cx_itej.elem();
				var edge1 = ei.elem();
				ei = ei.next;
				perim += edge1.length;
				var dx1 = 0.0;
				var dy1 = 0.0;
				dx1 = v1.x - u.x;
				dy1 = v1.y - u.y;
				accum += edge1.length * nape_Config.fluidAngularDragFriction * this.material.dynamicFriction * edge1.lprojection * edge1.lprojection;
				var t3 = -(u.y * edge1.lnormx - u.x * edge1.lnormy) / (dy1 * edge1.lnormx - dx1 * edge1.lnormy);
				if(t3 > 0) {
					var ta1 = t3 > 1 ? 1 : t3;
					var cx2 = 0.0;
					var cy2 = 0.0;
					cx2 = u.x;
					cy2 = u.y;
					var t4 = ta1;
					cx2 += dx1 * t4;
					cy2 += dy1 * t4;
					var dota2 = edge1.lnormy * u.x - edge1.lnormx * u.y;
					var dotb2 = edge1.lnormy * cx2 - edge1.lnormx * cy2;
					var dots2 = (dotb2 * dotb2 * dotb2 - dota2 * dota2 * dota2) / (3 * (dotb2 - dota2));
					accum += dots2 * ta1 * edge1.length * nape_Config.fluidAngularDrag;
				}
				if(t3 < 1) {
					var tb1 = t3 < 0 ? 0 : t3;
					var cx3 = 0.0;
					var cy3 = 0.0;
					cx3 = u.x;
					cy3 = u.y;
					var t5 = tb1;
					cx3 += dx1 * t5;
					cy3 += dy1 * t5;
					var dota3 = edge1.lnormy * cx3 - edge1.lnormx * cy3;
					var dotb3 = edge1.lnormy * v1.x - edge1.lnormx * v1.y;
					var dots3 = (dotb3 * dotb3 * dotb3 - dota3 * dota3 * dota3) / (3 * (dotb3 - dota3));
					accum += dots3 * nape_Config.fluidVacuumDrag * (1 - tb1) * edge1.length * nape_Config.fluidAngularDrag;
				}
				if(!false) {
					break;
				}
			}
		}
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_localCOM: function() {
		if(this.lverts.begin().next == null) {
			this.localCOMx = this.lverts.front().x;
			this.localCOMy = this.lverts.front().y;
		} else if(this.lverts.begin().next.next == null) {
			this.localCOMx = this.lverts.front().x;
			this.localCOMy = this.lverts.front().y;
			var t = 1.0;
			this.localCOMx += this.lverts.begin().next.elem().x * t;
			this.localCOMy += this.lverts.begin().next.elem().y * t;
			var t1 = 0.5;
			this.localCOMx *= t1;
			this.localCOMy *= t1;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.begin();
			var u = cx_ite.elem();
			cx_ite = cx_ite.next;
			var v = cx_ite.elem();
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite.elem();
				area += v.x * (w.y - u.y);
				var cf = w.y * v.x - w.x * v.y;
				this.localCOMx += (v.x + w.x) * cf;
				this.localCOMy += (v.y + w.y) * cf;
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.begin();
			var w1 = cx_ite.elem();
			area += v.x * (w1.y - u.y);
			var cf1 = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf1;
			this.localCOMy += (v.y + w1.y) * cf1;
			u = v;
			v = w1;
			cx_ite = cx_ite.next;
			var w2 = cx_ite.elem();
			area += v.x * (w2.y - u.y);
			var cf2 = w2.y * v.x - w2.x * v.y;
			this.localCOMx += (v.x + w2.x) * cf2;
			this.localCOMy += (v.y + w2.y) * cf2;
			area = 1 / (3 * area);
			var t2 = area;
			this.localCOMx *= t2;
			this.localCOMy *= t2;
		}
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.begin();
		while(cx_ite != null) {
			var p = cx_ite.elem();
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__class__: zpp_$nape_shape_ZPP_$Polygon
});
var zpp_$nape_space_ZPP_$Broadphase = function() {
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
$hxClasses["zpp_nape.space.ZPP_Broadphase"] = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_$nape_space_ZPP_$Broadphase.prototype = {
	space: null
	,is_sweep: null
	,sweep: null
	,dynab: null
	,insert: function(shape) {
		if(this.is_sweep) {
			this.sweep.__insert(shape);
		} else {
			this.dynab.__insert(shape);
		}
	}
	,remove: function(shape) {
		if(this.is_sweep) {
			this.sweep.__remove(shape);
		} else {
			this.dynab.__remove(shape);
		}
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			this.sweep.__sync(shape);
		} else {
			this.dynab.__sync(shape);
		}
	}
	,broadphase: function(space,discrete) {
	}
	,clear: function() {
	}
	,__class__: zpp_$nape_space_ZPP_$Broadphase
};
var zpp_$nape_space_ZPP_$AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
$hxClasses["zpp_nape.space.ZPP_AABBNode"] = zpp_$nape_space_ZPP_$AABBNode;
zpp_$nape_space_ZPP_$AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_$nape_space_ZPP_$AABBNode.prototype = {
	aabb: null
	,shape: null
	,dyn: null
	,parent: null
	,child1: null
	,child2: null
	,height: null
	,next: null
	,alloc: function() {
		if(zpp_$nape_geom_ZPP_$AABB.zpp_pool == null) {
			this.aabb = new zpp_$nape_geom_ZPP_$AABB();
		} else {
			this.aabb = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
			zpp_$nape_geom_ZPP_$AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		this.aabb.alloc();
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		o.free();
		o.next = zpp_$nape_geom_ZPP_$AABB.zpp_pool;
		zpp_$nape_geom_ZPP_$AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,mnext: null
	,moved: null
	,snext: null
	,synced: null
	,first_sync: null
	,isLeaf: function() {
		return this.child1 == null;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBNode
};
var zpp_$nape_space_ZPP_$AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBPair"] = zpp_$nape_space_ZPP_$AABBPair;
zpp_$nape_space_ZPP_$AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_$nape_space_ZPP_$AABBPair.prototype = {
	n1: null
	,n2: null
	,first: null
	,sleeping: null
	,id: null
	,di: null
	,arb: null
	,next: null
	,alloc: function() {
	}
	,free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,__class__: zpp_$nape_space_ZPP_$AABBPair
};
var zpp_$nape_space_ZPP_$AABBTree = function() {
	this.root = null;
};
$hxClasses["zpp_nape.space.ZPP_AABBTree"] = zpp_$nape_space_ZPP_$AABBTree;
zpp_$nape_space_ZPP_$AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_$nape_space_ZPP_$AABBTree.prototype = {
	root: null
	,clear: function() {
		if(this.root == null) {
			return;
		}
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var ret = stack;
			stack = ret.next;
			ret.next = null;
			var node = ret;
			if(node.isLeaf()) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!node.isLeaf()) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
				var cost1;
				if(child1.isLeaf()) {
					cost1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost;
				} else {
					var oarea = child1.aabb.perimeter();
					var narea = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost1 = narea - oarea + icost;
				}
				zpp_$nape_space_ZPP_$AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
				var cost2;
				if(child2.isLeaf()) {
					cost2 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter() + icost;
				} else {
					var oarea1 = child2.aabb.perimeter();
					var narea1 = zpp_$nape_space_ZPP_$AABBTree.tmpaabb.perimeter();
					cost2 = narea1 - oarea1 + icost;
				}
				if(cost < cost1 && cost < cost2) {
					break;
				} else if(cost1 < cost2) {
					node = child1;
				} else {
					node = child2;
				}
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
				nparent = new zpp_$nape_space_ZPP_$AABBNode();
			} else {
				nparent = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			nparent.alloc();
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) {
					oparent.child1 = nparent;
				} else {
					oparent.child2 = nparent;
				}
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child11 = node.child1;
				var child21 = node.child2;
				var x = child11.height;
				var y = child21.height;
				node.height = 1 + (x > y ? x : y);
				node.aabb.setCombine(child11.aabb,child21.aabb);
				node = node.parent;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling = parent.child1 == leaf ? parent.child2 : parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) {
					gparent.child1 = sibling;
				} else {
					gparent.child2 = sibling;
				}
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					var x = child1.height;
					var y = child2.height;
					node.height = 1 + (x > y ? x : y);
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o1 = parent;
				o1.free();
				o1.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
				zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o1;
			}
		}
	}
	,balance: function(a) {
		if(a.isLeaf() || a.height < 2) {
			return a;
		} else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) {
						c.parent.child1 = c;
					} else {
						c.parent.child2 = c;
					}
				} else {
					this.root = c;
				}
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					var x = b.height;
					var y = g.height;
					a.height = 1 + (x > y ? x : y);
					var x1 = a.height;
					var y1 = f.height;
					c.height = 1 + (x1 > y1 ? x1 : y1);
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					var x2 = b.height;
					var y2 = f.height;
					a.height = 1 + (x2 > y2 ? x2 : y2);
					var x3 = a.height;
					var y3 = g.height;
					c.height = 1 + (x3 > y3 ? x3 : y3);
				}
				return c;
			} else if(balance < -1) {
				var f1 = b.child1;
				var g1 = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) {
						b.parent.child1 = b;
					} else {
						b.parent.child2 = b;
					}
				} else {
					this.root = b;
				}
				if(f1.height > g1.height) {
					b.child2 = f1;
					a.child1 = g1;
					g1.parent = a;
					a.aabb.setCombine(c.aabb,g1.aabb);
					b.aabb.setCombine(a.aabb,f1.aabb);
					var x4 = c.height;
					var y4 = g1.height;
					a.height = 1 + (x4 > y4 ? x4 : y4);
					var x5 = a.height;
					var y5 = f1.height;
					b.height = 1 + (x5 > y5 ? x5 : y5);
				} else {
					b.child2 = g1;
					a.child1 = f1;
					f1.parent = a;
					a.aabb.setCombine(c.aabb,f1.aabb);
					b.aabb.setCombine(a.aabb,g1.aabb);
					var x6 = c.height;
					var y6 = f1.height;
					a.height = 1 + (x6 > y6 ? x6 : y6);
					var x7 = a.height;
					var y7 = g1.height;
					b.height = 1 + (x7 > y7 ? x7 : y7);
				}
				return b;
			} else {
				return a;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$AABBTree
};
var zpp_$nape_space_ZPP_$DynAABBPhase = function(space) {
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_$nape_space_ZPP_$AABBTree();
	this.dtree = new zpp_$nape_space_ZPP_$AABBTree();
};
$hxClasses["zpp_nape.space.ZPP_DynAABBPhase"] = zpp_$nape_space_ZPP_$DynAABBPhase;
zpp_$nape_space_ZPP_$DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_$nape_space_ZPP_$DynAABBPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$DynAABBPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	stree: null
	,dtree: null
	,pairs: null
	,syncs: null
	,moves: null
	,dyn: function(shape) {
		if(shape.body.isStatic()) {
			return false;
		} else {
			return !shape.body.component.sleeping;
		}
	}
	,__insert: function(shape) {
		var node;
		if(zpp_$nape_space_ZPP_$AABBNode.zpp_pool == null) {
			node = new zpp_$nape_space_ZPP_$AABBNode();
		} else {
			node = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
			zpp_$nape_space_ZPP_$AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		node.alloc();
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) {
				this.dtree.removeLeaf(node);
			} else {
				this.stree.removeLeaf(node);
			}
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) {
					break;
				}
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) {
				this.syncs = cur.snext;
			} else {
				pre.snext = cur.snext;
			}
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre1 = null;
			var cur1 = this.moves;
			while(cur1 != null) {
				if(cur1 == node) {
					break;
				}
				pre1 = cur1;
				cur1 = cur1.mnext;
			}
			if(pre1 == null) {
				this.moves = cur1.mnext;
			} else {
				pre1.mnext = cur1.mnext;
			}
			cur1.mnext = null;
			node.moved = false;
		}
		var pre2 = null;
		var cur2 = this.pairs;
		while(cur2 != null) {
			var nxt = cur2.next;
			if(cur2.n1 == node || cur2.n2 == node) {
				if(pre2 == null) {
					this.pairs = nxt;
				} else {
					pre2.next = nxt;
				}
				if(cur2.arb != null) {
					cur2.arb.pair = null;
				}
				cur2.arb = null;
				cur2.n1.shape.pairs.remove(cur2);
				cur2.n2.shape.pairs.remove(cur2);
				var o = cur2;
				o.free();
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur2 = nxt;
				continue;
			}
			pre2 = cur2;
			cur2 = nxt;
		}
		while(!shape.pairs.empty()) {
			var cur3 = shape.pairs.pop_unsafe();
			if(cur3.n1 == node) {
				cur3.n2.shape.pairs.remove(cur3);
			} else {
				cur3.n1.shape.pairs.remove(cur3);
			}
			if(cur3.arb != null) {
				cur3.arb.pair = null;
			}
			cur3.arb = null;
			var o1 = cur3;
			o1.free();
			o1.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o1;
		}
		var o2 = node;
		o2.free();
		o2.next = zpp_$nape_space_ZPP_$AABBNode.zpp_pool;
		zpp_$nape_space_ZPP_$AABBNode.zpp_pool = o2;
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				shape.validate_aabb();
			}
			var sync = node.dyn != this.dyn(shape) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree = node.dyn ? this.dtree : this.stree;
				tree.inlined_removeLeaf(node);
			} else {
				node.first_sync = false;
			}
			var aabb = node.aabb;
			if(!space.continuous) {
				shape.validate_aabb();
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree1 = (node.dyn = this.dyn(shape)) ? this.dtree : this.stree;
			tree1.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var ret = this.syncs;
			this.syncs = ret.snext;
			ret.snext = null;
			var leaf = ret;
			if(leaf.moved) {
				continue;
			}
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) {
				continue;
			}
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var ret1 = stack;
				stack = ret1.next;
				ret1.next = null;
				var node1 = ret1;
				if(node1 == leaf) {
					continue;
				}
				if(node1.isLeaf()) {
					var shape1 = node1.shape;
					if(shape1.body != lshape.body && !(shape1.body.isStatic() && lshape.body.isStatic())) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape1.id) {
								id = lshape.id;
								di = shape1.id;
							} else {
								id = shape1.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape1.pairs.length ? lshape : shape1;
							var p = null;
							var cx_ite = s.pairs.begin();
							while(cx_ite != null) {
								var px = cx_ite.elem();
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							p.alloc();
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape1.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var ret2 = stack;
				stack = ret2.next;
				ret2.next = null;
				var node2 = ret2;
				if(node2 == leaf) {
					continue;
				}
				if(node2.isLeaf()) {
					var shape2 = node2.shape;
					if(shape2.body != lshape.body && !(shape2.body.isStatic() && lshape.body.isStatic())) {
						if(ab.intersect(node2.aabb)) {
							var id1;
							var di1;
							if(lshape.id < shape2.id) {
								id1 = lshape.id;
								di1 = shape2.id;
							} else {
								id1 = shape2.id;
								di1 = lshape.id;
							}
							var s1 = lshape.pairs.length < shape2.pairs.length ? lshape : shape2;
							var p1 = null;
							var cx_ite1 = s1.pairs.begin();
							while(cx_ite1 != null) {
								var px1 = cx_ite1.elem();
								if(px1.id == id1 && px1.di == di1) {
									p1 = px1;
									break;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(p1 != null) {
								if(p1.sleeping) {
									p1.sleeping = false;
									p1.next = this.pairs;
									this.pairs = p1;
									p1.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p1 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p1 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p1.next;
								p1.next = null;
							}
							p1.alloc();
							p1.n1 = leaf;
							p1.n2 = node2;
							p1.id = id1;
							p1.di = di1;
							p1.next = this.pairs;
							this.pairs = p1;
							p1.first = true;
							lshape.pairs.inlined_add(p1);
							shape2.pairs.inlined_add(p1);
						}
					}
				} else if(ab.intersect(node2.aabb)) {
					if(node2.child1 != null) {
						node2.child1.next = stack;
						stack = node2.child1;
					}
					if(node2.child2 != null) {
						node2.child2.next = stack;
						stack = node2.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var ret3 = this.moves;
			this.moves = ret3.mnext;
			ret3.mnext = null;
			var leaf1 = ret3;
			leaf1.moved = false;
			var lshape1 = leaf1.shape;
			var lbody1 = lshape1.body;
			if(lbody1.component.sleeping) {
				continue;
			}
			var ab1 = leaf1.aabb;
			var stack1 = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack1;
				stack1 = this.dtree.root;
			}
			while(stack1 != null) {
				var ret4 = stack1;
				stack1 = ret4.next;
				ret4.next = null;
				var node3 = ret4;
				if(node3 == leaf1) {
					continue;
				}
				if(node3.isLeaf()) {
					var shape3 = node3.shape;
					if(shape3.body != lshape1.body && !(shape3.body.isStatic() && lshape1.body.isStatic())) {
						if(ab1.intersect(node3.aabb)) {
							var id2;
							var di2;
							if(lshape1.id < shape3.id) {
								id2 = lshape1.id;
								di2 = shape3.id;
							} else {
								id2 = shape3.id;
								di2 = lshape1.id;
							}
							var s2 = lshape1.pairs.length < shape3.pairs.length ? lshape1 : shape3;
							var p2 = null;
							var cx_ite2 = s2.pairs.begin();
							while(cx_ite2 != null) {
								var px2 = cx_ite2.elem();
								if(px2.id == id2 && px2.di == di2) {
									p2 = px2;
									break;
								}
								cx_ite2 = cx_ite2.next;
							}
							if(p2 != null) {
								if(p2.sleeping) {
									p2.sleeping = false;
									p2.next = this.pairs;
									this.pairs = p2;
									p2.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p2 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p2 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p2.next;
								p2.next = null;
							}
							p2.alloc();
							p2.n1 = leaf1;
							p2.n2 = node3;
							p2.id = id2;
							p2.di = di2;
							p2.next = this.pairs;
							this.pairs = p2;
							p2.first = true;
							lshape1.pairs.inlined_add(p2);
							shape3.pairs.inlined_add(p2);
						}
					}
				} else if(ab1.intersect(node3.aabb)) {
					if(node3.child1 != null) {
						node3.child1.next = stack1;
						stack1 = node3.child1;
					}
					if(node3.child2 != null) {
						node3.child2.next = stack1;
						stack1 = node3.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack1;
				stack1 = this.stree.root;
			}
			while(stack1 != null) {
				var ret5 = stack1;
				stack1 = ret5.next;
				ret5.next = null;
				var node4 = ret5;
				if(node4 == leaf1) {
					continue;
				}
				if(node4.isLeaf()) {
					var shape4 = node4.shape;
					if(shape4.body != lshape1.body && !(shape4.body.isStatic() && lshape1.body.isStatic())) {
						if(ab1.intersect(node4.aabb)) {
							var id3;
							var di3;
							if(lshape1.id < shape4.id) {
								id3 = lshape1.id;
								di3 = shape4.id;
							} else {
								id3 = shape4.id;
								di3 = lshape1.id;
							}
							var s3 = lshape1.pairs.length < shape4.pairs.length ? lshape1 : shape4;
							var p3 = null;
							var cx_ite3 = s3.pairs.begin();
							while(cx_ite3 != null) {
								var px3 = cx_ite3.elem();
								if(px3.id == id3 && px3.di == di3) {
									p3 = px3;
									break;
								}
								cx_ite3 = cx_ite3.next;
							}
							if(p3 != null) {
								if(p3.sleeping) {
									p3.sleeping = false;
									p3.next = this.pairs;
									this.pairs = p3;
									p3.first = true;
								}
								continue;
							}
							if(zpp_$nape_space_ZPP_$AABBPair.zpp_pool == null) {
								p3 = new zpp_$nape_space_ZPP_$AABBPair();
							} else {
								p3 = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
								zpp_$nape_space_ZPP_$AABBPair.zpp_pool = p3.next;
								p3.next = null;
							}
							p3.alloc();
							p3.n1 = leaf1;
							p3.n2 = node4;
							p3.id = id3;
							p3.di = di3;
							p3.next = this.pairs;
							this.pairs = p3;
							p3.first = true;
							lshape1.pairs.inlined_add(p3);
							shape4.pairs.inlined_add(p3);
						}
					}
				} else if(ab1.intersect(node4.aabb)) {
					if(node4.child1 != null) {
						node4.child1.next = stack1;
						stack1 = node4.child1;
					}
					if(node4.child2 != null) {
						node4.child2.next = stack1;
						stack1 = node4.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) {
					this.pairs = cur.next;
				} else {
					pre.next = cur.next;
				}
				cur.n1.shape.pairs.inlined_remove(cur);
				cur.n2.shape.pairs.inlined_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) {
					cur.arb.pair = null;
				}
				cur.arb = null;
				var o = cur;
				o.free();
				o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
				zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s11 = cur.n1.shape;
			var b1 = s11.body;
			var s21 = cur.n2.shape;
			var b2 = s21.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.isStatic()) && (b2.component.sleeping || b2.isStatic())) {
					cur.sleeping = true;
					if(pre == null) {
						this.pairs = cur.next;
					} else {
						pre.next = cur.next;
					}
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s11.aabb.intersect(s21.aabb)) {
				var oarb = cur.arb;
				if(discrete) {
					cur.arb = space.narrowPhase(s11,s21,!b1.isDynamic() || !b2.isDynamic(),cur.arb,false);
				} else {
					cur.arb = space.continuousEvent(s11,s21,!b1.isDynamic() || !b2.isDynamic(),cur.arb,false);
				}
				if(cur.arb == null) {
					if(oarb != null) {
						oarb.pair = null;
					}
				} else {
					cur.arb.pair = cur;
				}
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next1 = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next1;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) {
				this.pairs.arb.pair = null;
			}
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_remove(this.pairs);
			var o = this.pairs;
			o.free();
			o.next = zpp_$nape_space_ZPP_$AABBPair.zpp_pool;
			zpp_$nape_space_ZPP_$AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,__class__: zpp_$nape_space_ZPP_$DynAABBPhase
});
var zpp_$nape_space_ZPP_$Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_$nape_util_ZNPList_$ZPP_$Component();
};
$hxClasses["zpp_nape.space.ZPP_Island"] = zpp_$nape_space_ZPP_$Island;
zpp_$nape_space_ZPP_$Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_$nape_space_ZPP_$Island.prototype = {
	next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.begin();
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.next = ret.next;
		ret.elem()._inuse = false;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,comps: null
	,sleep: null
	,waket: null
	,free: function() {
	}
	,alloc: function() {
		this.waket = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Island
};
var zpp_$nape_space_ZPP_$Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.reset();
	this.woken = false;
};
$hxClasses["zpp_nape.space.ZPP_Component"] = zpp_$nape_space_ZPP_$Component;
zpp_$nape_space_ZPP_$Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_$nape_space_ZPP_$Component.prototype = {
	next: null
	,parent: null
	,rank: null
	,isBody: null
	,body: null
	,constraint: null
	,island: null
	,sleeping: null
	,waket: null
	,woken: null
	,free: function() {
		this.body = null;
		this.constraint = null;
	}
	,alloc: function() {
	}
	,reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,__class__: zpp_$nape_space_ZPP_$Component
};
var zpp_$nape_space_ZPP_$CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
};
$hxClasses["zpp_nape.space.ZPP_CallbackSet"] = zpp_$nape_space_ZPP_$CallbackSet;
zpp_$nape_space_ZPP_$CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_$nape_space_ZPP_$CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_$nape_space_ZPP_$CallbackSet.zpp_pool == null) {
		ret = new zpp_$nape_space_ZPP_$CallbackSet();
	} else {
		ret = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.alloc();
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
};
zpp_$nape_space_ZPP_$CallbackSet.prototype = {
	id: null
	,di: null
	,int1: null
	,int2: null
	,arbiters: null
	,COLLISIONstate: null
	,COLLISIONstamp: null
	,SENSORstate: null
	,SENSORstamp: null
	,FLUIDstate: null
	,FLUIDstamp: null
	,next: null
	,elem: function() {
		return this;
	}
	,begin: function() {
		return this.next;
	}
	,_inuse: null
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		o._inuse = true;
		var temp = o;
		temp.next = this.begin();
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.next = ret.next;
		ret.elem()._inuse = false;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.next = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		old.elem()._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,freed: null
	,lazydel: null
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = 1;
		this.COLLISIONstamp = 0;
		this.SENSORstate = 1;
		this.SENSORstamp = 0;
		this.FLUIDstate = 1;
		this.FLUIDstamp = 0;
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else {
			return false;
		}
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_remove(x);
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
		}
		return retvar;
	}
	,really_empty: function() {
		return this.arbiters.empty();
	}
	,sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.begin();
		while(cx_ite != null) {
			var x = cx_ite.elem();
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
		}
		return ret;
	}
	,__class__: zpp_$nape_space_ZPP_$CallbackSet
};
var zpp_$nape_space_ZPP_$CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
		this.cbsets = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
	} else {
		this.cbsets = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	this.cbsets.alloc();
	this.cbsets.lt = zpp_$nape_callbacks_ZPP_$CbSet.setlt;
	this.space = space;
};
$hxClasses["zpp_nape.space.ZPP_CbSetManager"] = zpp_$nape_space_ZPP_$CbSetManager;
zpp_$nape_space_ZPP_$CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_$nape_space_ZPP_$CbSetManager.prototype = {
	cbsets: null
	,space: null
	,get: function(cbTypes) {
		if(cbTypes.empty()) {
			return null;
		}
		var fake;
		if(zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool == null) {
			fake = new zpp_$nape_callbacks_ZPP_$CbSet();
		} else {
			fake = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		fake.alloc();
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret;
		if(res != null) {
			ret = res.data;
		} else {
			var set = zpp_$nape_callbacks_ZPP_$CbSet.get(cbTypes);
			this.cbsets.insert(set);
			set.manager = this;
			ret = set;
		}
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool;
		zpp_$nape_callbacks_ZPP_$CbSet.zpp_pool = o;
		return ret;
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!set.cbpairs.empty()) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) {
					pair.b.cbpairs.remove(pair);
				} else {
					pair.a.cbpairs.remove(pair);
				}
			}
			var o = pair;
			o.free();
			o.next = zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_callbacks_ZPP_$CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,clear: function() {
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs = a.cbpairs.length < b.cbpairs.length ? a.cbpairs : b.cbpairs;
		var cx_ite = pairs.begin();
		while(cx_ite != null) {
			var p = cx_ite.elem();
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_$nape_callbacks_ZPP_$CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) {
				b.cbpairs.add(ret);
			}
		}
		ret.validate();
		return ret;
	}
	,valid_listener: function(i) {
		return i.space == this.space;
	}
	,__class__: zpp_$nape_space_ZPP_$CbSetManager
};
var zpp_$nape_space_ZPP_$Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.outer = null;
	this.toiEvents = new zpp_$nape_util_ZNPList_$ZPP_$ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	this.precb = new nape_callbacks_PreCallback();
	this.precb.zpp_inner = new zpp_$nape_callbacks_ZPP_$Callback();
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == nape_space_Broadphase.get_DYNAMIC_AABB_TREE()) {
		this.bphase = new zpp_$nape_space_ZPP_$DynAABBPhase(this);
	} else if(broadphase == nape_space_Broadphase.get_SWEEP_AND_PRUNE()) {
		this.bphase = new zpp_$nape_space_ZPP_$SweepPhase(this);
	}
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_bodies = zpp_$nape_util_ZPP_$BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.compounds = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this.wrap_compounds = zpp_$nape_util_ZPP_$CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.kinematics = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.c_arbiters_true = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.c_arbiters_false = new zpp_$nape_util_ZNPList_$ZPP_$ColArbiter();
	this.f_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter();
	this.s_arbiters = new zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter();
	this.islands = new zpp_$nape_space_ZPP_$Island();
	this.live = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.wrap_live = zpp_$nape_util_ZPP_$BodyList.get(this.live,true);
	this.staticsleep = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this.constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_constraints = zpp_$nape_util_ZPP_$ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.live_constraints = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this.wrap_livecon = zpp_$nape_util_ZPP_$ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_$nape_phys_ZPP_$Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_$nape_callbacks_ZPP_$Callback();
	this.midstep = false;
	this.listeners = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this.wrap_listeners = zpp_$nape_util_ZPP_$ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.callbackset_list = new zpp_$nape_space_ZPP_$CallbackSet();
	this.mrca1 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.mrca2 = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this.prelisteners = new zpp_$nape_util_ZNPList_$ZPP_$InteractionListener();
	this.cbsets = new zpp_$nape_space_ZPP_$CbSetManager(this);
};
$hxClasses["zpp_nape.space.ZPP_Space"] = zpp_$nape_space_ZPP_$Space;
zpp_$nape_space_ZPP_$Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_$nape_space_ZPP_$Space.prototype = {
	outer: null
	,gravityx: null
	,gravityy: null
	,bodies: null
	,wrap_bodies: null
	,compounds: null
	,wrap_compounds: null
	,constraints: null
	,wrap_constraints: null
	,kinematics: null
	,bphase: null
	,__static: null
	,global_lin_drag: null
	,global_ang_drag: null
	,stamp: null
	,midstep: null
	,time: null
	,sortcontacts: null
	,c_arbiters_true: null
	,c_arbiters_false: null
	,f_arbiters: null
	,s_arbiters: null
	,live: null
	,wrap_live: null
	,live_constraints: null
	,wrap_livecon: null
	,staticsleep: null
	,islands: null
	,listeners: null
	,wrap_listeners: null
	,callbacks: null
	,callbackset_list: null
	,cbsets: null
	,clear: function() {
		while(!this.listeners.empty()) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!this.callbackset_list.empty()) {
			var c1 = this.callbackset_list.pop_unsafe();
			c1.arbiters.clear();
			var o = c1;
			o.free();
			o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
		}
		while(!this.c_arbiters_true.empty()) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!this.c_arbiters_false.empty()) {
			var arb1 = this.c_arbiters_false.pop_unsafe();
			arb1.retire();
		}
		while(!this.s_arbiters.empty()) {
			var arb2 = this.s_arbiters.pop_unsafe();
			arb2.retire();
		}
		while(!this.f_arbiters.empty()) {
			var arb3 = this.f_arbiters.pop_unsafe();
			arb3.retire();
		}
		this.bphase.clear();
		while(!this.bodies.empty()) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!i.comps.empty()) {
						var c2 = i.comps.pop_unsafe();
						c2.reset();
					}
					var o1 = i;
					o1.free();
					o1.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o1;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!this.constraints.empty()) {
			var c3 = this.constraints.pop_unsafe();
			if(c3.component != null) {
				var i1 = c3.component.island;
				if(i1 != null) {
					while(!i1.comps.empty()) {
						var c4 = i1.comps.pop_unsafe();
						c4.reset();
					}
					var o2 = i1;
					o2.free();
					o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
				}
			}
			c3.removedFromSpace();
			c3.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
		while(!this.compounds.empty()) {
			var c5 = this.compounds.pop_unsafe();
			stack.add(c5);
		}
		while(!stack.empty()) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.begin();
			while(cx_ite != null) {
				var b1 = cx_ite.elem();
				if(b1.component != null) {
					var i2 = b1.component.island;
					if(i2 != null) {
						while(!i2.comps.empty()) {
							var c6 = i2.comps.pop_unsafe();
							c6.reset();
						}
						var o3 = i2;
						o3.free();
						o3.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o3;
					}
				}
				b1.removedFromSpace();
				b1.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.constraints.begin();
			while(cx_ite1 != null) {
				var c7 = cx_ite1.elem();
				if(c7.component != null) {
					var i3 = c7.component.island;
					if(i3 != null) {
						while(!i3.comps.empty()) {
							var c8 = i3.comps.pop_unsafe();
							c8.reset();
						}
						var o4 = i3;
						o4.free();
						o4.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
						zpp_$nape_space_ZPP_$Island.zpp_pool = o4;
					}
				}
				c7.removedFromSpace();
				c7.space = null;
				cx_ite1 = cx_ite1.next;
			}
			var cx_ite2 = comp.compounds.begin();
			while(cx_ite2 != null) {
				var i4 = cx_ite2.elem();
				stack.add(i4);
				cx_ite2 = cx_ite2.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.get_bodies().remove(x);
			}
			this.addBody(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.wrap_compounds.remove(x);
			}
			this.addCompound(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.get_constraints().remove(x);
			}
			this.addConstraint(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) {
				x.zpp_inner.space.outer.get_listeners().remove(x);
			}
			this.addListener(x.zpp_inner);
			return true;
		} else {
			return false;
		}
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,revoke_listener: function(x) {
	}
	,unrevoke_listener: function(x) {
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) {
			this.unrevoke_listener(x.interaction);
		}
	}
	,remListener: function(x) {
		if(x.interaction != null) {
			this.revoke_listener(x.interaction);
		}
		x.removedFromSpace();
		x.space = null;
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_remove(cb);
		cb.int2.cbsets.inlined_remove(cb);
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.isKinematic()) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,false);
			}
		}
		if(p.type == 2) {
			this.live.remove(p);
		} else if(p.type == 3) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == 1) {
			this.staticsleep.remove(p);
		}
		p.type = new_type;
		if(p.type == 3) {
			this.kinematics.add(p);
		}
		if(p.type == 1) {
			this.static_validation(p);
		}
		p.component.sleeping = true;
		var o1 = p;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o1.isKinematic()) {
				o1.kinematicDelaySleep = true;
			}
			if(o1.component.sleeping) {
				this.really_wake(o1,true);
			}
		}
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) {
			dontwake = false;
		}
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.isKinematic()) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,false);
				}
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) {
			deleting = false;
		}
		var _gthis = this;
		var body = s.body;
		if(!deleting) {
			body.wake();
		}
		var pre = null;
		var cx_ite = body.arbiters.begin();
		while(cx_ite != null) {
			var xarb = [cx_ite.elem()];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.begin();
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elem();
						var cx_ite2 = this.mrca2.begin();
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elem();
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb1,cb2)) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb1,cb2,1,(function(callbackset1,xarb1) {
								return function(listener) {
									if((listener.itype & xarb1[0].type) != 0 && callbackset1[0].empty_arb(listener.itype)) {
										var cb = _gthis.push_callback(listener);
										cb.event = 1;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset1[0],listener,cb);
										cb.set = callbackset1[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].really_empty()) {
								this.remove_callbackset(callbackset[0]);
							}
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.isDynamic()) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o.isKinematic()) {
							o.kinematicDelaySleep = true;
						}
						if(o.component.sleeping) {
							this.really_wake(o,false);
						}
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.isDynamic()) {
					var o1 = xarb[0].b2;
					if(!o1.world) {
						o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
						if(o1.isKinematic()) {
							o1.kinematicDelaySleep = true;
						}
						if(o1.component.sleeping) {
							this.really_wake(o1,false);
						}
					}
				}
				xarb[0].lazyRetire(this,body);
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.begin();
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elem();
			this.addConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.begin();
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elem();
			this.addCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.begin();
		while(cx_ite1 != null) {
			var i1 = cx_ite1.elem();
			this.remConstraint(i1);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.begin();
		while(cx_ite2 != null) {
			var i2 = cx_ite2.elem();
			this.remCompound(i2);
			cx_ite2 = cx_ite2.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o.isKinematic()) {
				o.kinematicDelaySleep = true;
			}
			if(o.component.sleeping) {
				this.really_wake(o,true);
			}
		}
		var cx_ite = body.shapes.begin();
		while(cx_ite != null) {
			var shape = cx_ite.elem();
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.isStatic()) {
			this.static_validation(body);
		} else if(!body.isDynamic()) {
			if(flag != 3) {
				this.kinematics.add(body);
			}
		}
	}
	,remBody: function(body,flag) {
		if(flag == null) {
			flag = -1;
		}
		if(body.isStatic()) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.isKinematic()) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,true);
				}
			}
			this.staticsleep.remove(body);
		} else if(body.isDynamic()) {
			var o1 = body;
			if(!o1.world) {
				o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o1.isKinematic()) {
					o1.kinematicDelaySleep = true;
				}
				if(o1.component.sleeping) {
					this.really_wake(o1,true);
				}
			}
			this.live.remove(body);
		} else {
			if(flag != 3) {
				this.kinematics.remove(body);
			}
			var o2 = body;
			if(!o2.world) {
				o2.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o2.isKinematic()) {
					o2.kinematicDelaySleep = true;
				}
				if(o2.component.sleeping) {
					this.really_wake(o2,true);
				}
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.begin();
		while(cx_ite != null) {
			var shape = cx_ite.elem();
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_$nape_callbacks_ZPP_$Callback.zpp_pool == null) {
			cb = new zpp_$nape_callbacks_ZPP_$Callback();
		} else {
			cb = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		cb.alloc();
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,pre_dt: null
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _gthis = this;
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!xxlist.empty() && xxlist.begin().next != null) {
				var head = xxlist.begin();
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges;
				var leftSize;
				var rightSize;
				while(true) {
					numMerges = 0;
					left = head;
					head = null;
					tail = head;
					while(left != null) {
						++numMerges;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							++leftSize;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								--rightSize;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else if(left.elem().active && right.elem().active ? left.elem().oc1.dist < right.elem().oc1.dist : true) {
								nxt = left;
								left = left.next;
								--leftSize;
							} else {
								nxt = right;
								right = right.next;
								--rightSize;
							}
							if(tail != null) {
								tail.next = nxt;
							} else {
								head = nxt;
							}
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
					if(!(numMerges > 1)) {
						break;
					}
				}
				xxlist.setbegin(head);
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.begin();
		while(cx_ite != null) {
			var cur = cx_ite.elem();
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.live.begin();
		while(cx_ite1 != null) {
			var cur1 = cx_ite1.elem();
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cx_ite1 = cx_ite1.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite2 = this.kinematics.begin();
		while(cx_ite2 != null) {
			var cur2 = cx_ite2.elem();
			var upos = !(cur2.posx == cur2.pre_posx && cur2.posy == cur2.pre_posy);
			var urot = cur2.pre_rot != cur2.rot;
			if(upos) {
				cur2.invalidate_pos();
			}
			if(urot) {
				cur2.invalidate_rot();
			}
			cx_ite2 = cx_ite2.next;
		}
		var cx_ite3 = this.live.begin();
		while(cx_ite3 != null) {
			var cur3 = cx_ite3.elem();
			var upos1 = !(cur3.posx == cur3.pre_posx && cur3.posy == cur3.pre_posy);
			var urot1 = cur3.pre_rot != cur3.rot;
			if(upos1) {
				cur3.invalidate_pos();
			}
			if(urot1) {
				cur3.invalidate_rot();
			}
			cx_ite3 = cx_ite3.next;
		}
		var pre = null;
		var cx_ite4 = this.staticsleep.begin();
		while(cx_ite4 != null) {
			var b = cx_ite4.elem();
			if(!b.isKinematic() || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite4 = cx_ite4.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite4 = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite4;
			cx_ite4 = cx_ite4.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite5 = this.callbackset_list.begin();
		while(cx_ite5 != null) {
			var set = [cx_ite5.elem()];
			if(set[0].really_empty()) {
				cx_ite5 = this.callbackset_list.inlined_erase(pre1);
				var o = set[0];
				o.free();
				o.next = zpp_$nape_space_ZPP_$CallbackSet.zpp_pool;
				zpp_$nape_space_ZPP_$CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_$nape_callbacks_ZPP_$CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,6,(function(sleeping1,set1) {
				return function(x) {
					if((!sleeping1[0] || x.allowSleepingCallbacks) && !set1[0].empty_arb(x.itype)) {
						var cb = _gthis.push_callback(x);
						cb.event = 6;
						zpp_$nape_phys_ZPP_$Interactor.int_callback(set1[0],x,cb);
						cb.set = set1[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite5;
			cx_ite5 = cx_ite5.next;
		}
		while(!this.callbacks.empty()) {
			var cb1 = this.callbacks.pop();
			if(cb1.listener.type == 0) {
				var o1 = cb1.listener.body;
				o1.handler(cb1.wrapper_body());
			} else if(cb1.listener.type == 1) {
				var o2 = cb1.listener.constraint;
				o2.handler(cb1.wrapper_con());
			} else if(cb1.listener.type == 2) {
				var o3 = cb1.listener.interaction;
				o3.handleri(cb1.wrapper_int());
			}
			var o4 = cb1;
			o4.free();
			o4.next = zpp_$nape_callbacks_ZPP_$Callback.zpp_pool;
			zpp_$nape_callbacks_ZPP_$Callback.zpp_pool = o4;
		}
	}
	,toiEvents: null
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !this.toiEvents.empty()) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.begin();
			while(cx_ite != null) {
				var toi = cx_ite.elem();
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_$nape_geom_ZPP_$Collide.testCollide_safe(toi.s1,toi.s2)) {
						toi.toi = 0;
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.free();
						o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,deltaTime,0,nape_Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o1 = toi;
							o1.free();
							o1.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
							zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o1;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o2 = toi;
						o2.free();
						o2.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
						zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o2;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) {
				break;
			}
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b11 = minTOI.s1.body;
			var b21 = minTOI.s2.body;
			if(!b11.sweepFrozen) {
				b11.sweepIntegrate(curTimeAlpha * deltaTime);
				b11.sweepValidate(minTOI.s1);
			}
			if(!b21.sweepFrozen) {
				b21.sweepIntegrate(curTimeAlpha * deltaTime);
				b21.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL && arb.acting()) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b11.sweep_angvel = b11.angvel % MAX_VEL;
					b21.sweep_angvel = b21.angvel % MAX_VEL;
				}
			}
			if(arb != null && arb.acting() && arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
				if(!b11.sweepFrozen && !b11.isKinematic()) {
					b11.sweepFrozen = true;
					if(minTOI.failed) {
						b11.angvel = b11.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b12 = b11;
						b12.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b11.angvel = b12.sweep_angvel;
					} else {
						b11.angvel = b11.sweep_angvel;
					}
				}
				if(!b21.sweepFrozen && !b21.isKinematic()) {
					b21.sweepFrozen = true;
					if(minTOI.failed) {
						b21.angvel = b21.sweep_angvel = 0;
					} else if(minTOI.slipped) {
						var b22 = b21;
						b22.sweep_angvel *= nape_Config.angularCCDSlipScale;
						b21.angvel = b22.sweep_angvel;
					} else {
						b21.angvel = b21.sweep_angvel;
					}
				}
			}
			var o3 = minTOI;
			o3.free();
			o3.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o3;
		}
		while(!this.toiEvents.empty()) {
			var toi1 = this.toiEvents.pop_unsafe();
			var o4 = toi1;
			o4.free();
			o4.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o4;
		}
		var cx_ite1 = this.kinematics.begin();
		while(cx_ite1 != null) {
			var cur = cx_ite1.elem();
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live.begin();
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elem();
			if(!cur1.sweepFrozen) {
				cur1.sweepIntegrate(deltaTime);
			}
			cur1.sweepTime = 0;
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) {
			return in_arb;
		}
		if(s1.body.disableCCD || s2.body.disableCCD) {
			return in_arb;
		}
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) {
			return in_arb;
		}
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool == null) {
				toi = new zpp_$nape_geom_ZPP_$ToiEvent();
			} else {
				toi = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.alloc();
			var kin = b1.isKinematic() || b2.isKinematic();
			if(stat && !kin) {
				if(!s1.body.isDynamic()) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_$nape_geom_ZPP_$SweepDistance.staticSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				} else {
					zpp_$nape_geom_ZPP_$SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape_Config.collisionSlopCCD);
				}
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.free();
				o.next = zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool;
				zpp_$nape_geom_ZPP_$ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				toi.arbiter = in_arb != null ? in_arb.colarb : null;
			}
		}
		return in_arb;
	}
	,bodyCbWake: function(b) {
		if(b.isDynamic() && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.begin();
				while(cx_ite != null) {
					var i = cx_ite.elem();
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else {
				b.component.woken = true;
			}
		}
	}
	,bodyCbSleep: function(b) {
		if(b.isDynamic() && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.begin();
				while(cx_ite != null) {
					var i = cx_ite.elem();
					if(i.event != 2) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else {
				con.component.woken = true;
			}
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.event != 3) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 3;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				if(i.event != 4) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = 4;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.begin();
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elem();
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!stack.empty()) {
			var intx = stack.pop_unsafe();
			if(intx.isCompound()) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.begin();
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elem();
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.begin();
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elem();
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody = intx.isBody() ? intx.ibody : intx.ishape.body;
				var xshp = intx.isShape() ? intx.ishape : null;
				var cx_ite4 = xbody.arbiters.begin();
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elem();
					if(xarb.present == 0) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.begin();
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elem();
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.begin();
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elem();
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset != null) {
								while(!callbackset.arbiters.empty()) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.isCompound()) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.begin();
			while(cx_ite != null) {
				var body = cx_ite.elem();
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.begin();
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elem();
				this.nullInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody = intx.isBody() ? intx.ibody : intx.ishape.body;
			var xshp = intx.isShape() ? intx.ishape : null;
			var cx_ite2 = xbody.arbiters.begin();
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elem();
				if(xarb.present == 0) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.begin();
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elem();
					var cx_ite4 = this.mrca2.begin();
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elem();
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.really_empty()) {
								this.remove_callbackset(callbackset);
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
		var cx_ite = cb1.interactors.begin();
		while(cx_ite != null) {
			var i = cx_ite.elem();
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite1 = cb2.interactors.begin();
			while(cx_ite1 != null) {
				var i1 = cx_ite1.elem();
				stack.add(i1);
				cx_ite1 = cx_ite1.next;
			}
		}
		while(!stack.empty()) {
			var intx = stack.pop_unsafe();
			if(intx.isCompound()) {
				var comp = intx.icompound;
				var cx_ite2 = comp.bodies.begin();
				while(cx_ite2 != null) {
					var i2 = cx_ite2.elem();
					stack.add(i2);
					cx_ite2 = cx_ite2.next;
				}
				var cx_ite3 = comp.compounds.begin();
				while(cx_ite3 != null) {
					var i3 = cx_ite3.elem();
					stack.add(i3);
					cx_ite3 = cx_ite3.next;
				}
			} else {
				var xbody = intx.isBody() ? intx.ibody : intx.ishape.body;
				var xshp = intx.isShape() ? intx.ishape : null;
				var cx_ite4 = xbody.arbiters.begin();
				while(cx_ite4 != null) {
					var xarb = cx_ite4.elem();
					if(!xarb.presentable) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite4 = cx_ite4.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite5 = this.mrca1.begin();
					while(cx_ite5 != null) {
						var i11 = cx_ite5.elem();
						if(i11.cbSet != cb1 && i11.cbSet != cb2) {
							cx_ite5 = cx_ite5.next;
							continue;
						}
						var cx_ite6 = this.mrca2.begin();
						while(cx_ite6 != null) {
							var i21 = cx_ite6.elem();
							if(i11.cbSet == cb1 && i21.cbSet != cb2 || i11.cbSet == cb2 && i21.cbSet != cb1) {
								cx_ite6 = cx_ite6.next;
								continue;
							}
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
								this.add_callbackset(callbackset);
							}
							if(callbackset.add_arb(xarb)) {
								xarb.present++;
							}
							cx_ite6 = cx_ite6.next;
						}
						cx_ite5 = cx_ite5.next;
					}
					cx_ite4 = cx_ite4.next;
				}
			}
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) {
			me = intx;
		}
		if(intx.isCompound()) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.begin();
			while(cx_ite != null) {
				var body = cx_ite.elem();
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = comp.compounds.begin();
			while(cx_ite1 != null) {
				var comp1 = cx_ite1.elem();
				this.freshInteractorType(comp1,me);
				cx_ite1 = cx_ite1.next;
			}
		} else {
			var xbody = intx.isBody() ? intx.ibody : intx.ishape.body;
			var xshp = intx.isShape() ? intx.ishape : null;
			var cx_ite2 = xbody.arbiters.begin();
			while(cx_ite2 != null) {
				var xarb = cx_ite2.elem();
				if(!xarb.presentable) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite2 = cx_ite2.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite3 = this.mrca1.begin();
				while(cx_ite3 != null) {
					var i1 = cx_ite3.elem();
					var cx_ite4 = this.mrca2.begin();
					while(cx_ite4 != null) {
						var i2 = cx_ite4.elem();
						if(i1 != me && i2 != me) {
							cx_ite4 = cx_ite4.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb1,cb2)) {
							var callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(callbackset.add_arb(xarb)) {
								xarb.present++;
							}
						}
						cx_ite4 = cx_ite4.next;
					}
					cx_ite3 = cx_ite3.next;
				}
				cx_ite2 = cx_ite2.next;
			}
		}
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.begin();
		while(cx_ite != null) {
			var y = cx_ite.elem();
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep ? 0 : 1);
				if(o.isKinematic()) {
					o.kinematicDelaySleep = true;
				}
				if(o.component.sleeping) {
					this.really_wake(o,false);
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = x.constraints.begin();
		while(cx_ite1 != null) {
			var i = cx_ite1.elem();
			this.wake_constraint(i);
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = x.compounds.begin();
		while(cx_ite2 != null) {
			var i1 = cx_ite2.elem();
			this.wakeCompound(i1);
			cx_ite2 = cx_ite2.next;
		}
	}
	,wakeIsland: function(i) {
		while(!i.comps.empty()) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep ? 0 : 1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.begin();
				while(cx_ite != null) {
					var arb = cx_ite.elem();
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) {
								this.c_arbiters_true.inlined_add(carb);
							} else {
								this.c_arbiters_false.inlined_add(carb);
							}
						} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
							this.f_arbiters.inlined_add(arb.fluidarb);
						} else {
							this.s_arbiters.inlined_add(arb.sensorarb);
						}
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.reset();
				if(!b.isStatic()) {
					var cx_ite1 = b.shapes.begin();
					while(cx_ite1 != null) {
						var shape = cx_ite1.elem();
						if(shape.node != null) {
							this.bphase.sync(shape);
						}
						cx_ite1 = cx_ite1.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.reset();
			}
		}
		var o = i;
		o.free();
		o.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
		zpp_$nape_space_ZPP_$Island.zpp_pool = o;
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(o1.isKinematic()) {
				o1.kinematicDelaySleep = true;
			}
			if(o1.component.sleeping) {
				this.really_wake(o1,fst);
			}
		}
	}
	,really_wake: function(o,fst) {
		if(fst == null) {
			fst = false;
		}
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.isKinematic() || o.isStatic()) {
				this.staticsleep.inlined_add(o);
			} else {
				this.live.inlined_add(o);
			}
			var cx_ite = o.constraints.begin();
			while(cx_ite != null) {
				var con = cx_ite.elem();
				if(con.space == this) {
					this.wake_constraint(con);
				}
				cx_ite = cx_ite.next;
			}
			var cx_ite1 = o.arbiters.begin();
			while(cx_ite1 != null) {
				var arb = cx_ite1.elem();
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep ? 0 : 1) - arb.sleep_stamp;
					if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) {
							this.c_arbiters_true.inlined_add(carb);
						} else {
							this.c_arbiters_false.inlined_add(carb);
						}
					} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
						this.f_arbiters.inlined_add(arb.fluidarb);
					} else {
						this.s_arbiters.inlined_add(arb.sensorarb);
					}
				}
				if(arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & 1) != 0) {
					if(arb.b1.isDynamic() && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o1.isKinematic()) {
								o1.kinematicDelaySleep = true;
							}
							if(o1.component.sleeping) {
								this.really_wake(o1,false);
							}
						}
					}
					if(arb.b2.isDynamic() && arb.b2.component.sleeping) {
						var o2 = arb.b2;
						if(!o2.world) {
							o2.component.waket = this.stamp + (this.midstep ? 0 : 1);
							if(o2.isKinematic()) {
								o2.kinematicDelaySleep = true;
							}
							if(o2.component.sleeping) {
								this.really_wake(o2,false);
							}
						}
					}
				}
				cx_ite1 = cx_ite1.next;
			}
			if(!fst && o.isDynamic()) {
				this.bodyCbWake(o);
			}
			if(!fst && !this.bphase.is_sweep && !o.isStatic()) {
				var cx_ite2 = o.shapes.begin();
				while(cx_ite2 != null) {
					var shape = cx_ite2.elem();
					if(shape.node != null) {
						this.bphase.sync(shape);
					}
					cx_ite2 = cx_ite2.next;
				}
			}
		} else {
			this.wakeIsland(o.component.island);
		}
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) {
			fst = false;
		}
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep ? 0 : 1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) {
						this.constraintCbWake(con);
					}
				} else {
					this.wakeIsland(con.component.island);
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.begin();
		while(cx_ite != null) {
			var arb = cx_ite.elem();
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & 1) != 0) {
				if(arb.b1.isDynamic() && arb.b2.isDynamic()) {
					var xr;
					if(arb.b1.component == arb.b1.component.parent) {
						xr = arb.b1.component;
					} else {
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt1 = stack.parent;
							stack.parent = obj;
							stack = nxt1;
						}
						xr = obj;
					}
					var yr;
					if(arb.b2.component == arb.b2.component.parent) {
						yr = arb.b2.component;
					} else {
						var obj1 = arb.b2.component;
						var stack1 = null;
						while(obj1 != obj1.parent) {
							var nxt2 = obj1.parent;
							obj1.parent = stack1;
							stack1 = obj1;
							obj1 = nxt2;
						}
						while(stack1 != null) {
							var nxt3 = stack1.parent;
							stack1.parent = obj1;
							stack1 = nxt3;
						}
						yr = obj1;
					}
					if(xr != yr) {
						if(xr.rank < yr.rank) {
							xr.parent = yr;
						} else if(xr.rank > yr.rank) {
							yr.parent = xr;
						} else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite1 = this.f_arbiters.begin();
		while(cx_ite1 != null) {
			var arb1 = cx_ite1.elem();
			if(!arb1.cleared && arb1.up_stamp == this.stamp && (arb1.immState & 1) != 0) {
				if(arb1.b1.isDynamic() && arb1.b2.isDynamic()) {
					var xr1;
					if(arb1.b1.component == arb1.b1.component.parent) {
						xr1 = arb1.b1.component;
					} else {
						var obj2 = arb1.b1.component;
						var stack2 = null;
						while(obj2 != obj2.parent) {
							var nxt4 = obj2.parent;
							obj2.parent = stack2;
							stack2 = obj2;
							obj2 = nxt4;
						}
						while(stack2 != null) {
							var nxt5 = stack2.parent;
							stack2.parent = obj2;
							stack2 = nxt5;
						}
						xr1 = obj2;
					}
					var yr1;
					if(arb1.b2.component == arb1.b2.component.parent) {
						yr1 = arb1.b2.component;
					} else {
						var obj3 = arb1.b2.component;
						var stack3 = null;
						while(obj3 != obj3.parent) {
							var nxt6 = obj3.parent;
							obj3.parent = stack3;
							stack3 = obj3;
							obj3 = nxt6;
						}
						while(stack3 != null) {
							var nxt7 = stack3.parent;
							stack3.parent = obj3;
							stack3 = nxt7;
						}
						yr1 = obj3;
					}
					if(xr1 != yr1) {
						if(xr1.rank < yr1.rank) {
							xr1.parent = yr1;
						} else if(xr1.rank > yr1.rank) {
							yr1.parent = xr1;
						} else {
							yr1.parent = xr1;
							xr1.rank++;
						}
					}
				}
			}
			cx_ite1 = cx_ite1.next;
		}
		var cx_ite2 = this.live_constraints.begin();
		while(cx_ite2 != null) {
			var con = cx_ite2.elem();
			con.forest();
			cx_ite2 = cx_ite2.next;
		}
		while(!this.live.empty()) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root;
			if(oc == oc.parent) {
				root = oc;
			} else {
				var obj4 = oc;
				var stack4 = null;
				while(obj4 != obj4.parent) {
					var nxt8 = obj4.parent;
					obj4.parent = stack4;
					stack4 = obj4;
					obj4 = nxt8;
				}
				while(stack4 != null) {
					var nxt9 = stack4.parent;
					stack4.parent = obj4;
					stack4 = nxt9;
				}
				root = obj4;
			}
			if(root.island == null) {
				if(zpp_$nape_space_ZPP_$Island.zpp_pool == null) {
					root.island = new zpp_$nape_space_ZPP_$Island();
				} else {
					root.island = zpp_$nape_space_ZPP_$Island.zpp_pool;
					zpp_$nape_space_ZPP_$Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.alloc();
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) {
				oc.island.waket = oc.waket;
			}
		}
		while(!this.live_constraints.empty()) {
			var o1 = this.live_constraints.inlined_pop_unsafe();
			var oc1 = o1.component;
			var root1;
			if(oc1 == oc1.parent) {
				root1 = oc1;
			} else {
				var obj5 = oc1;
				var stack5 = null;
				while(obj5 != obj5.parent) {
					var nxt10 = obj5.parent;
					obj5.parent = stack5;
					stack5 = obj5;
					obj5 = nxt10;
				}
				while(stack5 != null) {
					var nxt11 = stack5.parent;
					stack5.parent = obj5;
					stack5 = nxt11;
				}
				root1 = obj5;
			}
			oc1.island = root1.island;
			oc1.island.comps.inlined_add(oc1);
			if(oc1.waket > oc1.island.waket) {
				oc1.island.waket = oc1.waket;
			}
		}
		while(!this.islands.empty()) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite3 = i.comps.begin();
				while(cx_ite3 != null) {
					var c = cx_ite3.elem();
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite4 = b.shapes.begin();
						while(cx_ite4 != null) {
							var shape = cx_ite4.elem();
							this.bphase.sync(shape);
							cx_ite4 = cx_ite4.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con1 = c.constraint;
						this.constraintCbSleep(con1);
						c.sleeping = true;
					}
					cx_ite3 = cx_ite3.next;
				}
			} else {
				while(!i.comps.empty()) {
					var c1 = i.comps.inlined_pop_unsafe();
					c1.waket = i.waket;
					if(c1.isBody) {
						this.live.inlined_add(c1.body);
					} else {
						this.live_constraints.inlined_add(c1.constraint);
					}
					c1.reset();
				}
				var o2 = i;
				o2.free();
				o2.next = zpp_$nape_space_ZPP_$Island.zpp_pool;
				zpp_$nape_space_ZPP_$Island.zpp_pool = o2;
			}
		}
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.begin();
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.begin();
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elem();
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.begin();
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.begin();
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre1 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.begin();
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre1 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elem();
			if(arb1.b1.component.sleeping && arb1.b2.component.sleeping) {
				arb1.sleep_stamp = this.stamp;
				arb1.sleeping = true;
				arbite1 = arbs1.inlined_erase(pre1);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.begin();
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre2 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elem();
			if(arb2.b1.component.sleeping && arb2.b2.component.sleeping) {
				arb2.sleep_stamp = this.stamp;
				arb2.sleeping = true;
				arbite2 = arbs2.inlined_erase(pre2);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre2 = null;
			}
		}
	}
	,static_validation: function(body) {
		if(!body.shapes.empty()) {
			body.validate_aabb();
		}
		body.validate_mass();
		body.validate_inertia();
		var cx_ite = body.shapes.begin();
		while(cx_ite != null) {
			var s = cx_ite.elem();
			if(s.isPolygon()) {
				s.polygon.splice_collinear();
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.begin();
		while(cx_ite != null) {
			var cur = cx_ite.elem();
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.begin();
			while(cx_ite1 != null) {
				var s = cx_ite1.elem();
				if(s.isPolygon()) {
					s.polygon.splice_collinear();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) {
					cur.sweepRadius = s.sweepRadius;
				}
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!cur.shapes.empty()) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			cur.validate_axis();
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite2 = cur.cbSet.bodylisteners.begin();
				while(cx_ite2 != null) {
					var i = cx_ite2.elem();
					if(i.event != 2) {
						cx_ite2 = cx_ite2.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = 2;
					cb.body = cur;
					cx_ite2 = cx_ite2.next;
				}
			}
			cur.component.woken = false;
			var cx_ite3 = cur.shapes.begin();
			while(cx_ite3 != null) {
				var shape = cx_ite3.elem();
				this.bphase.sync(shape);
				cx_ite3 = cx_ite3.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite4 = this.kinematics.begin();
		while(cx_ite4 != null) {
			var cur1 = cx_ite4.elem();
			cur1.sweepRadius = 0;
			var cx_ite5 = cur1.shapes.begin();
			while(cx_ite5 != null) {
				var s1 = cx_ite5.elem();
				if(s1.isPolygon()) {
					s1.polygon.splice_collinear();
					s1.polygon.validate_gaxi();
				}
				s1.validate_sweepRadius();
				if(s1.sweepRadius > cur1.sweepRadius) {
					cur1.sweepRadius = s1.sweepRadius;
				}
				cx_ite5 = cx_ite5.next;
			}
			cur1.validate_mass();
			cur1.validate_inertia();
			if(!cur1.shapes.empty()) {
				cur1.validate_aabb();
				cur1.validate_worldCOM();
			}
			cur1.validate_gravMass();
			cur1.validate_axis();
			var cx_ite6 = cur1.shapes.begin();
			while(cx_ite6 != null) {
				var shape1 = cx_ite6.elem();
				this.bphase.sync(shape1);
				cx_ite6 = cx_ite6.next;
			}
			cx_ite4 = cx_ite4.next;
		}
		var cx_ite7 = this.live_constraints.begin();
		while(cx_ite7 != null) {
			var con = cx_ite7.elem();
			if(con.active) {
				if(con.component.woken && con.cbSet != null) {
					var cx_ite8 = con.cbSet.conlisteners.begin();
					while(cx_ite8 != null) {
						var i1 = cx_ite8.elem();
						if(i1.event != 2) {
							cx_ite8 = cx_ite8.next;
							continue;
						}
						var cb1 = this.push_callback(i1);
						cb1.event = 2;
						cb1.constraint = con;
						cx_ite8 = cx_ite8.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite7 = cx_ite7.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.begin();
		while(cx_ite != null) {
			var cur = cx_ite.elem();
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.begin();
		while(cx_ite != null) {
			var cur = cx_ite.elem();
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape_Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape_Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.isKinematic()) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) {
						angvel = -angvel;
					}
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.begin();
					while(cx_ite1 != null) {
						var s = cx_ite1.elem();
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = Std["int"](angvel * dt * s.sweepCoef * 0.0083333333333333332);
						if(count > 8) {
							count = 8;
						}
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						s.force_validate_aabb();
						if(minx < aabb.minx) {
							aabb.minx = minx;
						} else {
							minx = aabb.minx;
						}
						if(miny < aabb.miny) {
							aabb.miny = miny;
						} else {
							miny = aabb.miny;
						}
						if(maxx > aabb.maxx) {
							aabb.maxx = maxx;
						} else {
							maxx = aabb.maxx;
						}
						if(maxy > aabb.maxy) {
							aabb.maxy = maxy;
						} else {
							maxy = aabb.maxy;
						}
						var _g1 = 1;
						var _g = count;
						while(_g1 < _g) {
							var i = _g1++;
							cur.sweepIntegrate(anginc * i * iangvel);
							s.force_validate_aabb();
							if(minx < aabb.minx) {
								aabb.minx = minx;
							} else {
								minx = aabb.minx;
							}
							if(miny < aabb.miny) {
								aabb.miny = miny;
							} else {
								miny = aabb.miny;
							}
							if(maxx > aabb.maxx) {
								aabb.maxx = maxx;
							} else {
								maxx = aabb.maxx;
							}
							if(maxy > aabb.maxy) {
								aabb.maxy = maxy;
							} else {
								maxy = aabb.maxy;
							}
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.isDynamic() && cur.bulletEnabled) {
						var linThreshold2 = nape_Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape_Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) {
							cur.bullet = true;
						}
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite2 = this.kinematics.begin();
		while(cx_ite2 != null) {
			var cur1 = cx_ite2.elem();
			cur1.pre_posx = cur1.posx;
			cur1.pre_posy = cur1.posy;
			cur1.pre_rot = cur1.rot;
			cur1.sweepTime = 0;
			cur1.sweep_angvel = cur1.angvel % MAX_VEL;
			cur1.sweepIntegrate(dt);
			if(!cur1.disableCCD) {
				var linThreshold1 = nape_Config.staticCCDLinearThreshold * cur1.sweepRadius;
				var angThreshold1 = nape_Config.staticCCDAngularThreshold;
				if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold1 * linThreshold1 || cur1.angvel * cur1.angvel * dt * dt > angThreshold1 * angThreshold1 || cur1.isKinematic()) {
					var angvel1 = cur1.sweep_angvel;
					if(angvel1 < 0) {
						angvel1 = -angvel1;
					}
					var iangvel1 = 1 / angvel1;
					var cx_ite3 = cur1.shapes.begin();
					while(cx_ite3 != null) {
						var s1 = cx_ite3.elem();
						var aabb1 = s1.aabb;
						var minx1 = aabb1.minx;
						var miny1 = aabb1.miny;
						var maxx1 = aabb1.maxx;
						var maxy1 = aabb1.maxy;
						var count1 = Std["int"](angvel1 * dt * s1.sweepCoef * 0.0083333333333333332);
						if(count1 > 8) {
							count1 = 8;
						}
						var anginc1 = angvel1 * dt / count1;
						cur1.sweepIntegrate(dt);
						s1.force_validate_aabb();
						if(minx1 < aabb1.minx) {
							aabb1.minx = minx1;
						} else {
							minx1 = aabb1.minx;
						}
						if(miny1 < aabb1.miny) {
							aabb1.miny = miny1;
						} else {
							miny1 = aabb1.miny;
						}
						if(maxx1 > aabb1.maxx) {
							aabb1.maxx = maxx1;
						} else {
							maxx1 = aabb1.maxx;
						}
						if(maxy1 > aabb1.maxy) {
							aabb1.maxy = maxy1;
						} else {
							maxy1 = aabb1.maxy;
						}
						var _g11 = 1;
						var _g2 = count1;
						while(_g11 < _g2) {
							var i1 = _g11++;
							cur1.sweepIntegrate(anginc1 * i1 * iangvel1);
							s1.force_validate_aabb();
							if(minx1 < aabb1.minx) {
								aabb1.minx = minx1;
							} else {
								minx1 = aabb1.minx;
							}
							if(miny1 < aabb1.miny) {
								aabb1.miny = miny1;
							} else {
								miny1 = aabb1.miny;
							}
							if(maxx1 > aabb1.maxx) {
								aabb1.maxx = maxx1;
							} else {
								maxx1 = aabb1.maxx;
							}
							if(maxy1 > aabb1.maxy) {
								aabb1.maxy = maxy1;
							} else {
								maxy1 = aabb1.maxy;
							}
						}
						this.bphase.sync(s1);
						cx_ite3 = cx_ite3.next;
					}
					cur1.sweepFrozen = false;
					if(cur1.isDynamic() && cur1.bulletEnabled) {
						var linThreshold21 = nape_Config.bulletCCDLinearThreshold * cur1.sweepRadius;
						var angThreshold21 = nape_Config.bulletCCDAngularThreshold;
						if((cur1.velx * cur1.velx + cur1.vely * cur1.vely) * dt * dt > linThreshold21 * linThreshold21 || cur1.angvel * cur1.angvel * dt * dt > angThreshold21 * angThreshold21) {
							cur1.bullet = true;
						}
					}
				} else {
					cur1.sweepFrozen = true;
					cur1.bullet = false;
				}
			} else {
				cur1.sweepFrozen = true;
				cur1.bullet = false;
			}
			cx_ite2 = cx_ite2.next;
		}
	}
	,continuous: null
	,presteparb: function(arb,dt,cont) {
		if(cont == null) {
			cont = false;
		}
		var _gthis = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) {
				arb.endGenerated = this.stamp;
			}
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.begin();
				while(cx_ite != null) {
					var i1 = cx_ite.elem();
					var cx_ite1 = this.mrca2.begin();
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elem();
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb1,cb2)) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_$nape_phys_ZPP_$Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								var tmp = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
								callbackset[0] = tmp;
								this.add_callbackset(callbackset[0]);
							}
							zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb1,cb2,0,(function(callbackset1) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset1[0].empty_arb(listener.itype)) {
										var cb = _gthis.push_callback(listener);
										cb.event = 0;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset1[0],listener,cb);
										cb.set = callbackset1[0];
									}
								};
							})(callbackset));
							if(callbackset[0].add_arb(arb)) {
								arb.present++;
							}
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb1,cb2,1,(function(callbackset2) {
								return function(listener1) {
									if((listener1.itype & arb.type) != 0 && callbackset2[0].empty_arb(listener1.itype)) {
										var cb3 = _gthis.push_callback(listener1);
										cb3.event = 1;
										zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset2[0],listener1,cb3);
										cb3.set = callbackset2[0];
									}
								};
							})(callbackset));
							if(callbackset[0].really_empty()) {
								this.remove_callbackset(callbackset[0]);
							}
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.COL ? nape_Config.arbiterExpirationDelay : 0) < this.stamp) {
			if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				arb.sensorarb.retire();
			} else if(arb.type == zpp_$nape_dynamics_ZPP_$Arbiter.FLUID) {
				arb.fluidarb.retire();
			} else {
				arb.colarb.retire();
			}
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & 1) != 0) {
			if(arb.active && arb.type != zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) {
						arb.active = false;
					}
				} else {
					arb.fluidarb.preStep(this,dt);
				}
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) {
				arb.active = false;
			}
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.begin();
		while(cx_ite != null) {
			var con = cx_ite.elem();
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) {
						con.compound.wrap_constraints.remove(con.outer);
					} else {
						this.wrap_constraints.remove(con.outer);
					}
					this.midstep = true;
				} else {
					con.active = false;
				}
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.begin();
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.begin();
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elem();
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.begin();
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.begin();
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre2 = null;
		var arbs1 = this.f_arbiters;
		var arbite1 = arbs1.begin();
		var fst1 = false;
		if(fst1 && arbite1 == null) {
			fst1 = false;
			arbs1 = null;
			pre2 = null;
		}
		while(arbite1 != null) {
			var arb1 = arbite1.elem();
			if(this.presteparb(arb1,dt)) {
				arbite1 = arbs1.inlined_erase(pre2);
				if(fst1 && arbite1 == null) {
					fst1 = false;
					arbs1 = null;
					pre2 = null;
				}
				continue;
			}
			pre2 = arbite1;
			arbite1 = arbite1.next;
			if(fst1 && arbite1 == null) {
				fst1 = false;
				arbs1 = null;
				pre2 = null;
			}
		}
		var pre3 = null;
		var arbs2 = this.s_arbiters;
		var arbite2 = arbs2.begin();
		var fst2 = false;
		if(fst2 && arbite2 == null) {
			fst2 = false;
			arbs2 = null;
			pre3 = null;
		}
		while(arbite2 != null) {
			var arb2 = arbite2.elem();
			if(this.presteparb(arb2,dt)) {
				arbite2 = arbs2.inlined_erase(pre3);
				if(fst2 && arbite2 == null) {
					fst2 = false;
					arbs2 = null;
					pre3 = null;
				}
				continue;
			}
			pre3 = arbite2;
			arbite2 = arbite2.next;
			if(fst2 && arbite2 == null) {
				fst2 = false;
				arbs2 = null;
				pre3 = null;
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.begin();
		while(cx_ite != null) {
			var arb = cx_ite.elem();
			if(arb.acting()) {
				arb.warmStart();
			}
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.begin();
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.begin();
			fst = false;
		}
		while(arbi != null) {
			var arb1 = arbi.elem();
			if(arb1.acting()) {
				arb1.warmStart();
			}
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.begin();
				fst = false;
			}
		}
		var cx_ite1 = this.live_constraints.begin();
		while(cx_ite1 != null) {
			var con = cx_ite1.elem();
			con.warmStart();
			cx_ite1 = cx_ite1.next;
		}
	}
	,iterateVel: function(times) {
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			var cx_ite = this.f_arbiters.begin();
			while(cx_ite != null) {
				var arb = cx_ite.elem();
				if(arb.acting()) {
					arb.applyImpulseVel();
				}
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite1 = this.live_constraints.begin();
			while(cx_ite1 != null) {
				var con = cx_ite1.elem();
				if(con.applyImpulseVel()) {
					cx_ite1 = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) {
							con.compound.wrap_constraints.remove(con.outer);
						} else {
							this.wrap_constraints.remove(con.outer);
						}
						this.midstep = true;
					} else {
						con.active = false;
					}
					con.clearcache();
					continue;
				}
				pre = cx_ite1;
				cx_ite1 = cx_ite1.next;
			}
			var arbi = this.c_arbiters_false.begin();
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.begin();
				fst = false;
			}
			while(arbi != null) {
				var arb1 = arbi.elem();
				if(arb1.acting()) {
					arb1.applyImpulseVel();
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.begin();
					fst = false;
				}
			}
		}
	}
	,iteratePos: function(times) {
		var _g1 = 0;
		var _g = times;
		while(_g1 < _g) {
			var i = _g1++;
			var pre = null;
			var cx_ite = this.live_constraints.begin();
			while(cx_ite != null) {
				var con = cx_ite.elem();
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) {
								con.compound.wrap_constraints.remove(con.outer);
							} else {
								this.wrap_constraints.remove(con.outer);
							}
							this.midstep = true;
						} else {
							con.active = false;
						}
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.begin();
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.begin();
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elem();
				if(arb.acting()) {
					arb.applyImpulsePos();
				}
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.begin();
					fst = false;
				}
			}
		}
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) {
			return false;
		} else {
			var g2 = s2.lookup_group();
			if(g2 == null) {
				return false;
			} else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) {
						g2 = g2.group;
					} else {
						g1 = g1.group;
					}
				}
				return ret;
			}
		}
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.begin();
		while(cx_ite != null) {
			var con = cx_ite.elem();
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) {
				return 2;
			} else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) {
				return 0;
			} else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) {
				return 1;
			} else {
				return -1;
			}
		} else {
			return -1;
		}
	}
	,precb: null
	,prelisteners: null
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _gthis = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa;
			var sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb;
				if(in_arb == null) {
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite = b.arbiters.begin();
					while(cx_ite != null) {
						var arb = cx_ite.elem();
						if(arb.id == sa.id && arb.di == sb.id) {
							ret1 = arb;
							break;
						}
						cx_ite = cx_ite.next;
					}
					xarb = ret1;
				} else {
					xarb = in_arb;
				}
				var first = xarb == null;
				var arb1;
				var swapped = false;
				if(first) {
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					arb1.alloc();
				} else if(xarb.fluidarb == null) {
					xarb.lazyRetire(this,null);
					if(zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool == null) {
						arb1 = new zpp_$nape_dynamics_ZPP_$FluidArbiter();
					} else {
						arb1 = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = arb1.next;
						arb1.next = null;
					}
					arb1.alloc();
					arb1.intchange = true;
					first = true;
					swapped = true;
				} else {
					arb1 = xarb.fluidarb;
				}
				var inttype = 4;
				if(first || arb1.stamp != this.stamp || continuous) {
					arb1.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.flowCollide(sa,sb,arb1)) {
						if(first) {
							arb1.assign(s1,s2,sa.id,sb.id);
							this.f_arbiters.inlined_add(arb1);
							arb1.fresh = !swapped;
						} else {
							arb1.fresh = arb1.up_stamp < this.stamp - 1 || arb1.endGenerated == this.stamp && continuous;
						}
						arb1.up_stamp = arb1.stamp;
						if(arb1.fresh || (arb1.immState & 4) == 0) {
							arb1.immState = 1;
							var anyimpure = false;
							var arbs1 = arb1.ws1.id > arb1.ws2.id ? arb1.ws2 : arb1.ws1;
							var arbs2 = arb1.ws1.id > arb1.ws2.id ? arb1.ws1 : arb1.ws2;
							this.inlined_MRCA_chains(arbs1,arbs2);
							var cx_ite1 = this.mrca1.begin();
							while(cx_ite1 != null) {
								var i1 = cx_ite1.elem();
								var cx_ite2 = this.mrca2.begin();
								while(cx_ite2 != null) {
									var i2 = cx_ite2.elem();
									var cb1 = i1.cbSet;
									var cb2 = i2.cbSet;
									if(zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb1,cb2)) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									var callbackset = null;
									var ncallbackset = null;
									this.prelisteners.inlined_clear();
									var lite = [null];
									zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb1,cb2,5,(function(lite1) {
										return function(listener) {
											if((listener.itype & inttype) != 0) {
												var ret2 = _gthis.prelisteners.inlined_insert(lite1[0],listener);
												lite1[0] = ret2;
												if(!anyimpure) {
													anyimpure = !listener.pure;
												} else {
													anyimpure = true;
												}
											}
										};
									})(lite));
									if(this.prelisteners.empty()) {
										cx_ite2 = cx_ite2.next;
										continue;
									}
									callbackset = zpp_$nape_phys_ZPP_$Interactor.get(i1,i2);
									if(callbackset == null) {
										ncallbackset = zpp_$nape_space_ZPP_$CallbackSet.get(i1,i2);
										this.add_callbackset(ncallbackset);
									}
									if(callbackset == null || (callbackset.FLUIDstamp != this.stamp || continuous) && (callbackset.FLUIDstate & 4) == 0) {
										if(ncallbackset != null) {
											callbackset = ncallbackset;
										}
										if(callbackset != null) {
											var cx_ite3 = this.prelisteners.begin();
											while(cx_ite3 != null) {
												var listener1 = cx_ite3.elem();
												if(listener1.itype == 7) {
													callbackset.COLLISIONstamp = this.stamp;
													callbackset.SENSORstamp = this.stamp;
													callbackset.FLUIDstamp = this.stamp;
												} else {
													callbackset.FLUIDstamp = this.stamp;
												}
												cx_ite3 = cx_ite3.next;
											}
										}
										var pact = arb1.active;
										arb1.active = true;
										var emptycontacts = false;
										this.precb.zpp_inner.pre_arbiter = arb1;
										this.precb.zpp_inner.set = callbackset;
										var cx_ite4 = this.prelisteners.begin();
										while(cx_ite4 != null) {
											var listener2 = cx_ite4.elem();
											this.precb.zpp_inner.listener = listener2;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset,listener2,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i1 != this.precb.zpp_inner.int1;
											var ret3 = listener2.handlerp(this.precb);
											if(ret3 != null) {
												arb1.immState = ret3 == nape_callbacks_PreFlag.get_ACCEPT() ? 5 : ret3 == nape_callbacks_PreFlag.get_ACCEPT_ONCE() ? 1 : ret3 == nape_callbacks_PreFlag.get_IGNORE() ? 6 : 2;
											}
											cx_ite4 = cx_ite4.next;
										}
										arb1.active = pact;
										if(callbackset != null) {
											var cx_ite5 = this.prelisteners.begin();
											while(cx_ite5 != null) {
												var listener3 = cx_ite5.elem();
												if(listener3.itype == 7) {
													callbackset.COLLISIONstate = arb1.immState;
													callbackset.SENSORstate = arb1.immState;
													callbackset.FLUIDstate = arb1.immState;
												} else {
													callbackset.FLUIDstate = arb1.immState;
												}
												cx_ite5 = cx_ite5.next;
											}
										}
									} else if(callbackset == null) {
										if((arb1.immState & 4) == 0) {
											arb1.immState = 1;
										}
									} else {
										arb1.immState = callbackset.FLUIDstate;
									}
									cx_ite2 = cx_ite2.next;
								}
								cx_ite1 = cx_ite1.next;
							}
							if(anyimpure && (arb1.immState & 4) == 0) {
								if(arb1.b1.isDynamic()) {
									var o = arb1.b1;
									if(!o.world) {
										o.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o.isKinematic()) {
											o.kinematicDelaySleep = true;
										}
										if(o.component.sleeping) {
											this.really_wake(o,false);
										}
									}
								}
								if(arb1.b1.isDynamic()) {
									var o1 = arb1.b2;
									if(!o1.world) {
										o1.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o1.isKinematic()) {
											o1.kinematicDelaySleep = true;
										}
										if(o1.component.sleeping) {
											this.really_wake(o1,false);
										}
									}
								}
							}
						}
						if((arb1.immState & 1) != 0) {
							if(arb1.b1.isDynamic() && arb1.b1.component.sleeping) {
								var o2 = arb1.b1;
								if(!o2.world) {
									o2.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o2.isKinematic()) {
										o2.kinematicDelaySleep = true;
									}
									if(o2.component.sleeping) {
										this.really_wake(o2,false);
									}
								}
							}
							if(arb1.b2.isDynamic() && arb1.b2.component.sleeping) {
								var o3 = arb1.b2;
								if(!o3.world) {
									o3.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o3.isKinematic()) {
										o3.kinematicDelaySleep = true;
									}
									if(o3.component.sleeping) {
										this.really_wake(o3,false);
									}
								}
							}
						}
						if(arb1.sleeping) {
							arb1.sleeping = false;
							this.f_arbiters.inlined_add(arb1);
						}
						ret = arb1;
					} else if(first) {
						var o4 = arb1;
						o4.free();
						o4.next = zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$FluidArbiter.zpp_pool = o4;
						ret = null;
					} else {
						ret = arb1;
					}
				} else {
					ret = arb1;
				}
			} else if(itype == 1) {
				var carbs = stat ? this.c_arbiters_true : this.c_arbiters_false;
				var xarb1;
				if(in_arb == null) {
					var ret4 = null;
					var b3 = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite6 = b3.arbiters.begin();
					while(cx_ite6 != null) {
						var arb2 = cx_ite6.elem();
						if(arb2.id == sa.id && arb2.di == sb.id) {
							ret4 = arb2;
							break;
						}
						cx_ite6 = cx_ite6.next;
					}
					xarb1 = ret4;
				} else {
					xarb1 = in_arb;
				}
				var first1 = xarb1 == null;
				var arb3;
				var swapped1 = false;
				if(first1) {
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.alloc();
					arb3.stat = stat;
				} else if(xarb1.colarb == null) {
					xarb1.lazyRetire(this,null);
					if(zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool == null) {
						arb3 = new zpp_$nape_dynamics_ZPP_$ColArbiter();
					} else {
						arb3 = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = arb3.next;
						arb3.next = null;
					}
					arb3.alloc();
					arb3.intchange = true;
					arb3.stat = stat;
					first1 = true;
					swapped1 = true;
				} else {
					arb3 = xarb1.colarb;
					reverse = sa != arb3.s1;
					if(arb3.stat != stat) {
						arb3.stat = stat;
						if(!arb3.sleeping) {
							(stat ? this.c_arbiters_false : this.c_arbiters_true).remove(arb3);
							carbs.add(arb3);
						}
					}
				}
				var inttype1 = 1;
				if(first1 || arb3.stamp != this.stamp || continuous) {
					arb3.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.contactCollide(sa,sb,arb3,reverse)) {
						if(first1) {
							arb3.assign(s1,s2,sa.id,sb.id);
							carbs.inlined_add(arb3);
							arb3.fresh = !swapped1;
						} else {
							arb3.fresh = arb3.up_stamp < this.stamp - 1 || arb3.endGenerated == this.stamp && continuous;
						}
						arb3.up_stamp = arb3.stamp;
						if(arb3.fresh || (arb3.immState & 4) == 0) {
							arb3.immState = 1;
							var anyimpure1 = false;
							var arbs11 = arb3.ws1.id > arb3.ws2.id ? arb3.ws2 : arb3.ws1;
							var arbs21 = arb3.ws1.id > arb3.ws2.id ? arb3.ws1 : arb3.ws2;
							this.inlined_MRCA_chains(arbs11,arbs21);
							var cx_ite7 = this.mrca1.begin();
							while(cx_ite7 != null) {
								var i11 = cx_ite7.elem();
								var cx_ite8 = this.mrca2.begin();
								while(cx_ite8 != null) {
									var i21 = cx_ite8.elem();
									var cb11 = i11.cbSet;
									var cb21 = i21.cbSet;
									if(zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb11,cb21)) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									var callbackset1 = null;
									var ncallbackset1 = null;
									this.prelisteners.inlined_clear();
									var lite2 = [null];
									zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb11,cb21,5,(function(lite3) {
										return function(listener4) {
											if((listener4.itype & inttype1) != 0) {
												var ret5 = _gthis.prelisteners.inlined_insert(lite3[0],listener4);
												lite3[0] = ret5;
												if(!anyimpure1) {
													anyimpure1 = !listener4.pure;
												} else {
													anyimpure1 = true;
												}
											}
										};
									})(lite2));
									if(this.prelisteners.empty()) {
										cx_ite8 = cx_ite8.next;
										continue;
									}
									callbackset1 = zpp_$nape_phys_ZPP_$Interactor.get(i11,i21);
									if(callbackset1 == null) {
										ncallbackset1 = zpp_$nape_space_ZPP_$CallbackSet.get(i11,i21);
										this.add_callbackset(ncallbackset1);
									}
									if(callbackset1 == null || (callbackset1.COLLISIONstamp != this.stamp || continuous) && (callbackset1.COLLISIONstate & 4) == 0) {
										if(ncallbackset1 != null) {
											callbackset1 = ncallbackset1;
										}
										if(callbackset1 != null) {
											var cx_ite9 = this.prelisteners.begin();
											while(cx_ite9 != null) {
												var listener5 = cx_ite9.elem();
												if(listener5.itype == 7) {
													callbackset1.COLLISIONstamp = this.stamp;
													callbackset1.SENSORstamp = this.stamp;
													callbackset1.FLUIDstamp = this.stamp;
												} else {
													callbackset1.COLLISIONstamp = this.stamp;
												}
												cx_ite9 = cx_ite9.next;
											}
										}
										var pact1 = arb3.active;
										arb3.active = true;
										var emptycontacts1 = false;
										arb3.cleanupContacts();
										this.precb.zpp_inner.pre_arbiter = arb3;
										this.precb.zpp_inner.set = callbackset1;
										var cx_ite10 = this.prelisteners.begin();
										while(cx_ite10 != null) {
											var listener6 = cx_ite10.elem();
											this.precb.zpp_inner.listener = listener6;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset1,listener6,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i11 != this.precb.zpp_inner.int1;
											var ret6 = listener6.handlerp(this.precb);
											if(ret6 != null) {
												arb3.immState = ret6 == nape_callbacks_PreFlag.get_ACCEPT() ? 5 : ret6 == nape_callbacks_PreFlag.get_ACCEPT_ONCE() ? 1 : ret6 == nape_callbacks_PreFlag.get_IGNORE() ? 6 : 2;
											}
											cx_ite10 = cx_ite10.next;
										}
										arb3.active = pact1;
										if(callbackset1 != null) {
											var cx_ite11 = this.prelisteners.begin();
											while(cx_ite11 != null) {
												var listener7 = cx_ite11.elem();
												if(listener7.itype == 7) {
													callbackset1.COLLISIONstate = arb3.immState;
													callbackset1.SENSORstate = arb3.immState;
													callbackset1.FLUIDstate = arb3.immState;
												} else {
													callbackset1.COLLISIONstate = arb3.immState;
												}
												cx_ite11 = cx_ite11.next;
											}
										}
									} else if(callbackset1 == null) {
										if((arb3.immState & 4) == 0) {
											arb3.immState = 1;
										}
									} else {
										arb3.immState = callbackset1.COLLISIONstate;
									}
									cx_ite8 = cx_ite8.next;
								}
								cx_ite7 = cx_ite7.next;
							}
							if(anyimpure1 && (arb3.immState & 4) == 0) {
								if(arb3.b1.isDynamic()) {
									var o5 = arb3.b1;
									if(!o5.world) {
										o5.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o5.isKinematic()) {
											o5.kinematicDelaySleep = true;
										}
										if(o5.component.sleeping) {
											this.really_wake(o5,false);
										}
									}
								}
								if(arb3.b1.isDynamic()) {
									var o6 = arb3.b2;
									if(!o6.world) {
										o6.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o6.isKinematic()) {
											o6.kinematicDelaySleep = true;
										}
										if(o6.component.sleeping) {
											this.really_wake(o6,false);
										}
									}
								}
							}
						}
						if((arb3.immState & 1) != 0) {
							if(arb3.b1.isDynamic() && arb3.b1.component.sleeping) {
								var o7 = arb3.b1;
								if(!o7.world) {
									o7.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o7.isKinematic()) {
										o7.kinematicDelaySleep = true;
									}
									if(o7.component.sleeping) {
										this.really_wake(o7,false);
									}
								}
							}
							if(arb3.b2.isDynamic() && arb3.b2.component.sleeping) {
								var o8 = arb3.b2;
								if(!o8.world) {
									o8.component.waket = this.stamp + (this.midstep ? 0 : 1);
									if(o8.isKinematic()) {
										o8.kinematicDelaySleep = true;
									}
									if(o8.component.sleeping) {
										this.really_wake(o8,false);
									}
								}
							}
						}
						if(arb3.sleeping) {
							arb3.sleeping = false;
							carbs.inlined_add(arb3);
						}
						ret = arb3;
					} else if(first1) {
						var o9 = arb3;
						o9.free();
						o9.next = zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$ColArbiter.zpp_pool = o9;
						ret = null;
					} else {
						ret = arb3;
					}
				} else {
					ret = arb3;
				}
			} else {
				var xarb2;
				if(in_arb == null) {
					var ret7 = null;
					var b4 = b1.arbiters.length < b2.arbiters.length ? b1 : b2;
					var cx_ite12 = b4.arbiters.begin();
					while(cx_ite12 != null) {
						var arb4 = cx_ite12.elem();
						if(arb4.id == sa.id && arb4.di == sb.id) {
							ret7 = arb4;
							break;
						}
						cx_ite12 = cx_ite12.next;
					}
					xarb2 = ret7;
				} else {
					xarb2 = in_arb;
				}
				var first2 = xarb2 == null;
				var arb5;
				var swapped2 = false;
				if(first2) {
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					arb5.alloc();
				} else if(xarb2.sensorarb == null) {
					xarb2.lazyRetire(this,null);
					if(zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool == null) {
						arb5 = new zpp_$nape_dynamics_ZPP_$SensorArbiter();
					} else {
						arb5 = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = arb5.next;
						arb5.next = null;
					}
					arb5.alloc();
					arb5.intchange = true;
					first2 = true;
					swapped2 = true;
				} else {
					arb5 = xarb2.sensorarb;
				}
				var inttype2 = 2;
				if(first2 || arb5.stamp != this.stamp || continuous) {
					arb5.stamp = this.stamp;
					if(zpp_$nape_geom_ZPP_$Collide.testCollide(sa,sb)) {
						if(first2) {
							arb5.assign(s1,s2,sa.id,sb.id);
							this.s_arbiters.inlined_add(arb5);
							arb5.fresh = !swapped2;
						} else {
							arb5.fresh = arb5.up_stamp < this.stamp - 1 || arb5.endGenerated == this.stamp && continuous;
						}
						arb5.up_stamp = arb5.stamp;
						if(arb5.fresh || (arb5.immState & 4) == 0) {
							arb5.immState = 1;
							var anyimpure2 = false;
							var arbs12 = arb5.ws1.id > arb5.ws2.id ? arb5.ws2 : arb5.ws1;
							var arbs22 = arb5.ws1.id > arb5.ws2.id ? arb5.ws1 : arb5.ws2;
							this.inlined_MRCA_chains(arbs12,arbs22);
							var cx_ite13 = this.mrca1.begin();
							while(cx_ite13 != null) {
								var i12 = cx_ite13.elem();
								var cx_ite14 = this.mrca2.begin();
								while(cx_ite14 != null) {
									var i22 = cx_ite14.elem();
									var cb12 = i12.cbSet;
									var cb22 = i22.cbSet;
									if(zpp_$nape_callbacks_ZPP_$CbSet.empty_intersection(cb12,cb22)) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									var callbackset2 = null;
									var ncallbackset2 = null;
									this.prelisteners.inlined_clear();
									var lite4 = [null];
									zpp_$nape_callbacks_ZPP_$CbSet.find_all(cb12,cb22,5,(function(lite5) {
										return function(listener8) {
											if((listener8.itype & inttype2) != 0) {
												var ret8 = _gthis.prelisteners.inlined_insert(lite5[0],listener8);
												lite5[0] = ret8;
												if(!anyimpure2) {
													anyimpure2 = !listener8.pure;
												} else {
													anyimpure2 = true;
												}
											}
										};
									})(lite4));
									if(this.prelisteners.empty()) {
										cx_ite14 = cx_ite14.next;
										continue;
									}
									callbackset2 = zpp_$nape_phys_ZPP_$Interactor.get(i12,i22);
									if(callbackset2 == null) {
										ncallbackset2 = zpp_$nape_space_ZPP_$CallbackSet.get(i12,i22);
										this.add_callbackset(ncallbackset2);
									}
									if(callbackset2 == null || (callbackset2.SENSORstamp != this.stamp || continuous) && (callbackset2.SENSORstate & 4) == 0) {
										if(ncallbackset2 != null) {
											callbackset2 = ncallbackset2;
										}
										if(callbackset2 != null) {
											var cx_ite15 = this.prelisteners.begin();
											while(cx_ite15 != null) {
												var listener9 = cx_ite15.elem();
												if(listener9.itype == 7) {
													callbackset2.COLLISIONstamp = this.stamp;
													callbackset2.SENSORstamp = this.stamp;
													callbackset2.FLUIDstamp = this.stamp;
												} else {
													callbackset2.SENSORstamp = this.stamp;
												}
												cx_ite15 = cx_ite15.next;
											}
										}
										var pact2 = arb5.active;
										arb5.active = true;
										var emptycontacts2 = false;
										this.precb.zpp_inner.pre_arbiter = arb5;
										this.precb.zpp_inner.set = callbackset2;
										var cx_ite16 = this.prelisteners.begin();
										while(cx_ite16 != null) {
											var listener10 = cx_ite16.elem();
											this.precb.zpp_inner.listener = listener10;
											zpp_$nape_phys_ZPP_$Interactor.int_callback(callbackset2,listener10,this.precb.zpp_inner);
											this.precb.zpp_inner.pre_swapped = i12 != this.precb.zpp_inner.int1;
											var ret9 = listener10.handlerp(this.precb);
											if(ret9 != null) {
												arb5.immState = ret9 == nape_callbacks_PreFlag.get_ACCEPT() ? 5 : ret9 == nape_callbacks_PreFlag.get_ACCEPT_ONCE() ? 1 : ret9 == nape_callbacks_PreFlag.get_IGNORE() ? 6 : 2;
											}
											cx_ite16 = cx_ite16.next;
										}
										arb5.active = pact2;
										if(callbackset2 != null) {
											var cx_ite17 = this.prelisteners.begin();
											while(cx_ite17 != null) {
												var listener11 = cx_ite17.elem();
												if(listener11.itype == 7) {
													callbackset2.COLLISIONstate = arb5.immState;
													callbackset2.SENSORstate = arb5.immState;
													callbackset2.FLUIDstate = arb5.immState;
												} else {
													callbackset2.SENSORstate = arb5.immState;
												}
												cx_ite17 = cx_ite17.next;
											}
										}
									} else if(callbackset2 == null) {
										if((arb5.immState & 4) == 0) {
											arb5.immState = 1;
										}
									} else {
										arb5.immState = callbackset2.SENSORstate;
									}
									cx_ite14 = cx_ite14.next;
								}
								cx_ite13 = cx_ite13.next;
							}
							if(anyimpure2 && (arb5.immState & 4) == 0) {
								if(!arb5.b1.isStatic()) {
									var o10 = arb5.b1;
									if(!o10.world) {
										o10.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o10.isKinematic()) {
											o10.kinematicDelaySleep = true;
										}
										if(o10.component.sleeping) {
											this.really_wake(o10,false);
										}
									}
								}
								if(!arb5.b2.isStatic()) {
									var o11 = arb5.b2;
									if(!o11.world) {
										o11.component.waket = this.stamp + (this.midstep ? 0 : 1);
										if(o11.isKinematic()) {
											o11.kinematicDelaySleep = true;
										}
										if(o11.component.sleeping) {
											this.really_wake(o11,false);
										}
									}
								}
							}
						}
						if(arb5.sleeping) {
							arb5.sleeping = false;
							this.s_arbiters.inlined_add(arb5);
						}
						ret = arb5;
					} else if(first2) {
						var o12 = arb5;
						o12.free();
						o12.next = zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool;
						zpp_$nape_dynamics_ZPP_$SensorArbiter.zpp_pool = o12;
						ret = null;
					} else {
						ret = arb5;
					}
				} else {
					ret = arb5;
				}
			}
		}
		return ret;
	}
	,mrca1: null
	,mrca2: null
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) {
			this.mrca1.inlined_add(s1);
		}
		if(s1.body.cbSet != null) {
			this.mrca1.inlined_add(s1.body);
		}
		if(s2.cbSet != null) {
			this.mrca2.inlined_add(s2);
		}
		if(s2.body.cbSet != null) {
			this.mrca2.inlined_add(s2.body);
		}
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1 = c1 == null ? 0 : c1.depth;
			var d2 = c2 == null ? 0 : c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) {
					this.mrca2.inlined_add(c2);
				}
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) {
					this.mrca1.inlined_add(c1);
				}
				c1 = c1.compound;
			}
		}
	}
	,__class__: zpp_$nape_space_ZPP_$Space
};
var zpp_$nape_space_ZPP_$SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
$hxClasses["zpp_nape.space.ZPP_SweepData"] = zpp_$nape_space_ZPP_$SweepData;
zpp_$nape_space_ZPP_$SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_$nape_space_ZPP_$SweepData.prototype = {
	next: null
	,prev: null
	,shape: null
	,aabb: null
	,free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,alloc: function() {
	}
	,gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,__class__: zpp_$nape_space_ZPP_$SweepData
};
var zpp_$nape_space_ZPP_$SweepPhase = function(space) {
	this.list = null;
	zpp_$nape_space_ZPP_$Broadphase.call(this);
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
$hxClasses["zpp_nape.space.ZPP_SweepPhase"] = zpp_$nape_space_ZPP_$SweepPhase;
zpp_$nape_space_ZPP_$SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_$nape_space_ZPP_$SweepPhase.__super__ = zpp_$nape_space_ZPP_$Broadphase;
zpp_$nape_space_ZPP_$SweepPhase.prototype = $extend(zpp_$nape_space_ZPP_$Broadphase.prototype,{
	list: null
	,__insert: function(shape) {
		var dat;
		if(zpp_$nape_space_ZPP_$SweepData.zpp_pool == null) {
			dat = new zpp_$nape_space_ZPP_$SweepData();
		} else {
			dat = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
			zpp_$nape_space_ZPP_$SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		dat.alloc();
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) {
			this.list.prev = dat;
		}
		this.list = dat;
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) {
			this.list = dat.next;
		} else {
			dat.prev.next = dat.next;
		}
		if(dat.next != null) {
			dat.next.prev = dat.prev;
		}
		shape.sweep = null;
		var o = dat;
		o.free();
		o.next = zpp_$nape_space_ZPP_$SweepData.zpp_pool;
		zpp_$nape_space_ZPP_$SweepData.zpp_pool = o;
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			shape.validate_aabb();
		}
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.gt(b)) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.gt(a)) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) {
				a.next.prev = prev;
			}
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) {
						break;
					}
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.isStatic() && b2.isStatic()) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) {
							space.narrowPhase(s1,s2,!b1.isDynamic() || !b2.isDynamic(),null,false);
						} else {
							space.continuousEvent(s1,s2,!b1.isDynamic() || !b2.isDynamic(),null,false);
						}
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,__class__: zpp_$nape_space_ZPP_$SweepPhase
});
var zpp_$nape_util_ZNPList_$ZPP_$CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CallbackSet"] = zpp_$nape_util_ZNPList_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_$nape_util_ZNPList_$ZPP_$CallbackSet.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPList_$ZPP_$Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Shape"] = zpp_$nape_util_ZNPList_$ZPP_$Shape;
zpp_$nape_util_ZNPList_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_$nape_util_ZNPList_$ZPP_$Shape.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Shape();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Shape
};
var zpp_$nape_util_ZNPList_$ZPP_$Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Body"] = zpp_$nape_util_ZNPList_$ZPP_$Body;
zpp_$nape_util_ZNPList_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_$nape_util_ZNPList_$ZPP_$Body.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Body();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Body
};
var zpp_$nape_util_ZNPList_$ZPP_$Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Compound"] = zpp_$nape_util_ZNPList_$ZPP_$Compound;
zpp_$nape_util_ZNPList_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_$nape_util_ZNPList_$ZPP_$Compound.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Compound();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Compound
};
var zpp_$nape_util_ZNPList_$ZPP_$Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Arbiter"] = zpp_$nape_util_ZNPList_$ZPP_$Arbiter;
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_$nape_util_ZNPList_$ZPP_$Arbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Arbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,clear: function() {
		this.inlined_clear();
	}
	,inlined_clear: function() {
		while(!this.empty()) this.inlined_pop();
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.begin();
		while(cx_ite != null) {
			var npite = cx_ite.elem();
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_CbSetPair"] = zpp_$nape_util_ZNPList_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_$nape_util_ZNPList_$ZPP_$CbSetPair.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPList_$ZPP_$AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_AABBPair"] = zpp_$nape_util_ZNPList_$ZPP_$AABBPair;
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_$nape_util_ZNPList_$ZPP_$AABBPair.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$AABBPair();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPList_$ZPP_$Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Edge"] = zpp_$nape_util_ZNPList_$ZPP_$Edge;
zpp_$nape_util_ZNPList_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_$nape_util_ZNPList_$ZPP_$Edge.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Edge();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,reverse: function() {
		var cur = this.begin();
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Edge
};
var zpp_$nape_util_ZNPList_$ZPP_$Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Component"] = zpp_$nape_util_ZNPList_$ZPP_$Component;
zpp_$nape_util_ZNPList_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_$nape_util_ZNPList_$ZPP_$Component.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Component();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Component.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Component
};
var zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_Listener"] = zpp_$nape_util_ZNPList_$ZPP_$Listener;
zpp_$nape_util_ZNPList_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_$nape_util_ZNPList_$ZPP_$Listener.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,inlined_insert: function(cur,o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$Listener();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		if(cur == null) {
			temp.next = this.begin();
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$Listener
};
var zpp_$nape_util_ZNPList_$ZPP_$ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ColArbiter"] = zpp_$nape_util_ZNPList_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_$nape_util_ZNPList_$ZPP_$ColArbiter.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.begin();
		var ret = false;
		while(cur != null) {
			if(cur.elem() == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPList_$ZPP_$ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_ToiEvent"] = zpp_$nape_util_ZNPList_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_$nape_util_ZNPList_$ZPP_$ToiEvent.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,add: function(o) {
		return this.inlined_add(o);
	}
	,inlined_add: function(o) {
		var ret;
		if(zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool == null) {
			ret = new zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent();
		} else {
			ret = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
			zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = ret.next;
			ret.next = null;
		}
		ret.alloc();
		ret.elt = o;
		var temp = ret;
		temp.next = this.begin();
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_pop: function() {
		var ret = this.begin();
		this.head = ret.next;
		var o = ret;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		if(this.empty()) {
			this.pushmod = true;
		}
		this.modified = true;
		this.length--;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop_unsafe: function() {
		var ret = this.front();
		this.pop();
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.begin();
			ret = old.next;
			this.head = ret;
			if(this.empty()) {
				this.pushmod = true;
			}
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) {
				this.pushmod = true;
			}
		}
		var o = old;
		o.free();
		o.next = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool;
		zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,empty: function() {
		return this.begin() == null;
	}
	,front: function() {
		return this.begin().elem();
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPList_$ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ConvexResult"] = zpp_$nape_util_ZNPList_$ConvexResult;
zpp_$nape_util_ZNPList_$ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_$nape_util_ZNPList_$ConvexResult.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ConvexResult
};
var zpp_$nape_util_ZNPList_$ZPP_$GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_ZPP_GeomPoly"] = zpp_$nape_util_ZNPList_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_$nape_util_ZNPList_$ZPP_$GeomPoly.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPList_$RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
$hxClasses["zpp_nape.util.ZNPList_RayResult"] = zpp_$nape_util_ZNPList_$RayResult;
zpp_$nape_util_ZNPList_$RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_$nape_util_ZNPList_$RayResult.prototype = {
	head: null
	,begin: function() {
		return this.head;
	}
	,modified: null
	,pushmod: null
	,length: null
	,iterator_at: function(ind) {
		var ret = this.begin();
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,__class__: zpp_$nape_util_ZNPList_$RayResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbType = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbType"] = zpp_$nape_util_ZNPNode_$ZPP_$CbType;
zpp_$nape_util_ZNPNode_$ZPP_$CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_$nape_util_ZNPNode_$ZPP_$CbType.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbType
};
var zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CallbackSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet;
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CallbackSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Shape = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Shape"] = zpp_$nape_util_ZNPNode_$ZPP_$Shape;
zpp_$nape_util_ZNPNode_$ZPP_$Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_$nape_util_ZNPNode_$ZPP_$Shape.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Shape
};
var zpp_$nape_util_ZNPNode_$ZPP_$Body = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Body"] = zpp_$nape_util_ZNPNode_$ZPP_$Body;
zpp_$nape_util_ZNPNode_$ZPP_$Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_$nape_util_ZNPNode_$ZPP_$Body.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Body
};
var zpp_$nape_util_ZNPNode_$ZPP_$Constraint = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Constraint"] = zpp_$nape_util_ZNPNode_$ZPP_$Constraint;
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_$nape_util_ZNPNode_$ZPP_$Constraint.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Constraint
};
var zpp_$nape_util_ZNPNode_$ZPP_$Compound = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Compound"] = zpp_$nape_util_ZNPNode_$ZPP_$Compound;
zpp_$nape_util_ZNPNode_$ZPP_$Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_$nape_util_ZNPNode_$ZPP_$Compound.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Compound
};
var zpp_$nape_util_ZNPNode_$ZPP_$Arbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Arbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$Arbiter;
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$Arbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Arbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionListener"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSet = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSet"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSet;
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSet.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSet
};
var zpp_$nape_util_ZNPNode_$ZPP_$Interactor = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Interactor"] = zpp_$nape_util_ZNPNode_$ZPP_$Interactor;
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_$nape_util_ZNPNode_$ZPP_$Interactor.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Interactor
};
var zpp_$nape_util_ZNPNode_$ZPP_$BodyListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_BodyListener"] = zpp_$nape_util_ZNPNode_$ZPP_$BodyListener;
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_$nape_util_ZNPNode_$ZPP_$BodyListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$BodyListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_CbSetPair"] = zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair;
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ConstraintListener"] = zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener;
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ConstraintListener
};
var zpp_$nape_util_ZNPNode_$ZPP_$Vec2 = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Vec2"] = zpp_$nape_util_ZNPNode_$ZPP_$Vec2;
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_$nape_util_ZNPNode_$ZPP_$Vec2.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Vec2
};
var zpp_$nape_util_ZNPNode_$ZPP_$AABBPair = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_AABBPair"] = zpp_$nape_util_ZNPNode_$ZPP_$AABBPair;
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_$nape_util_ZNPNode_$ZPP_$AABBPair.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$AABBPair
};
var zpp_$nape_util_ZNPNode_$ZPP_$Edge = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Edge"] = zpp_$nape_util_ZNPNode_$ZPP_$Edge;
zpp_$nape_util_ZNPNode_$ZPP_$Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_$nape_util_ZNPNode_$ZPP_$Edge.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Edge
};
var zpp_$nape_util_ZNPNode_$ZPP_$Component = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Component"] = zpp_$nape_util_ZNPNode_$ZPP_$Component;
zpp_$nape_util_ZNPNode_$ZPP_$Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_$nape_util_ZNPNode_$ZPP_$Component.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Component
};
var zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_FluidArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$FluidArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_SensorArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$SensorArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$Listener = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_Listener"] = zpp_$nape_util_ZNPNode_$ZPP_$Listener;
zpp_$nape_util_ZNPNode_$ZPP_$Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_$nape_util_ZNPNode_$ZPP_$Listener.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$Listener
};
var zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ColArbiter"] = zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter;
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ColArbiter
};
var zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_InteractionGroup"] = zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup;
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup.prototype = {
	next: null
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$InteractionGroup
};
var zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_ToiEvent"] = zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent;
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent.prototype = {
	next: null
	,alloc: function() {
	}
	,free: function() {
		this.elt = null;
	}
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$ToiEvent
};
var zpp_$nape_util_ZNPNode_$ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ConvexResult"] = zpp_$nape_util_ZNPNode_$ConvexResult;
zpp_$nape_util_ZNPNode_$ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_$nape_util_ZNPNode_$ConvexResult.prototype = {
	next: null
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ConvexResult
};
var zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_ZPP_GeomPoly"] = zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly;
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly.prototype = {
	next: null
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$ZPP_$GeomPoly
};
var zpp_$nape_util_ZNPNode_$RayResult = function() {
	this.elt = null;
	this.next = null;
};
$hxClasses["zpp_nape.util.ZNPNode_RayResult"] = zpp_$nape_util_ZNPNode_$RayResult;
zpp_$nape_util_ZNPNode_$RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_$nape_util_ZNPNode_$RayResult.prototype = {
	next: null
	,elt: null
	,elem: function() {
		return this.elt;
	}
	,__class__: zpp_$nape_util_ZNPNode_$RayResult
};
var zpp_$nape_util_ZPP_$MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape_geom_Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
$hxClasses["zpp_nape.util.ZPP_MixVec2List"] = zpp_$nape_util_ZPP_$MixVec2List;
zpp_$nape_util_ZPP_$MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_$nape_util_ZPP_$MixVec2List.get = function(list,immutable) {
	if(immutable == null) {
		immutable = false;
	}
	var ret = new zpp_$nape_util_ZPP_$MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
};
zpp_$nape_util_ZPP_$MixVec2List.__super__ = nape_geom_Vec2List;
zpp_$nape_util_ZPP_$MixVec2List.prototype = $extend(nape_geom_Vec2List.prototype,{
	inner: null
	,_length: null
	,zip_length: null
	,at_ite: null
	,at_index: null
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.begin();
			while(cx_ite != null) {
				var i = cx_ite.elem();
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,at: function(index) {
		this.zpp_vm();
		if(this.zpp_inner.reverse_flag) {
			index = this.get_length() - 1 - index;
		}
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.begin();
			while(true) {
				var x = this.at_ite.elem();
				break;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x1 = this.at_ite.elem();
				break;
			}
		}
		return this.at_ite.elem().wrapper();
	}
	,push: function(obj) {
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null ? this.zpp_inner.adder(obj) : true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				this.inner.add(obj.zpp_inner);
			} else {
				var ite = this.inner.iterator_at(this.get_length() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) {
				this.zpp_inner.post_adder(obj);
			}
		}
		return cont;
	}
	,__class__: zpp_$nape_util_ZPP_$MixVec2List
});
var zpp_$nape_util_ZPP_$ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Constraint();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConstraintList"] = zpp_$nape_util_ZPP_$ConstraintList;
zpp_$nape_util_ZPP_$ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_$nape_util_ZPP_$ConstraintList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_constraint_ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ConstraintList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ConstraintList
};
var zpp_$nape_util_ZPP_$BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Body();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_BodyList"] = zpp_$nape_util_ZPP_$BodyList;
zpp_$nape_util_ZPP_$BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_$nape_util_ZPP_$BodyList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_BodyList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$BodyList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$BodyList
};
var zpp_$nape_util_ZPP_$InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Interactor();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractorList"] = zpp_$nape_util_ZPP_$InteractorList;
zpp_$nape_util_ZPP_$InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_$nape_util_ZPP_$InteractorList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$InteractorList
};
var zpp_$nape_util_ZPP_$CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Compound();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CompoundList"] = zpp_$nape_util_ZPP_$CompoundList;
zpp_$nape_util_ZPP_$CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_$nape_util_ZPP_$CompoundList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_phys_CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CompoundList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$CompoundList
};
var zpp_$nape_util_ZPP_$ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Listener();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ListenerList"] = zpp_$nape_util_ZPP_$ListenerList;
zpp_$nape_util_ZPP_$ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_$nape_util_ZPP_$ListenerList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ListenerList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ListenerList
};
var zpp_$nape_util_ZPP_$CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_CbTypeList"] = zpp_$nape_util_ZPP_$CbTypeList;
zpp_$nape_util_ZPP_$CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_$nape_util_ZPP_$CbTypeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_callbacks_CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$CbTypeList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$CbTypeList
};
var zpp_$nape_util_ZPP_$Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_Vec2List"] = zpp_$nape_util_ZPP_$Vec2List;
zpp_$nape_util_ZPP_$Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_$nape_util_ZPP_$Vec2List.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$Vec2List
};
var zpp_$nape_util_ZPP_$GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$GeomPoly();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_GeomPolyList"] = zpp_$nape_util_ZPP_$GeomPolyList;
zpp_$nape_util_ZPP_$GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_$nape_util_ZPP_$GeomPolyList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$GeomPolyList
};
var zpp_$nape_util_ZPP_$RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$RayResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_RayResultList"] = zpp_$nape_util_ZPP_$RayResultList;
zpp_$nape_util_ZPP_$RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_$nape_util_ZPP_$RayResultList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$RayResultList
};
var zpp_$nape_util_ZPP_$ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ConvexResult();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ConvexResultList"] = zpp_$nape_util_ZPP_$ConvexResultList;
zpp_$nape_util_ZPP_$ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_$nape_util_ZPP_$ConvexResultList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ConvexResultList
};
var zpp_$nape_util_ZPP_$EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Edge();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_EdgeList"] = zpp_$nape_util_ZPP_$EdgeList;
zpp_$nape_util_ZPP_$EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_$nape_util_ZPP_$EdgeList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$EdgeList
};
var zpp_$nape_util_ZPP_$ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Shape();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ShapeList"] = zpp_$nape_util_ZPP_$ShapeList;
zpp_$nape_util_ZPP_$ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_$nape_util_ZPP_$ShapeList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_shape_ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ShapeList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_invalidate: null
	,_validate: null
	,adder: null
	,post_adder: null
	,subber: null
	,dontremove: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,modify_test: function() {
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) {
			this._invalidate(this);
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ShapeList
};
var zpp_$nape_util_ZPP_$InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$InteractionGroup();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_InteractionGroupList"] = zpp_$nape_util_ZPP_$InteractionGroupList;
zpp_$nape_util_ZPP_$InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_$nape_util_ZPP_$InteractionGroupList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$InteractionGroupList
};
var zpp_$nape_util_ZPP_$ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_util_ZNPList_$ZPP_$Arbiter();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ArbiterList"] = zpp_$nape_util_ZPP_$ArbiterList;
zpp_$nape_util_ZPP_$ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_$nape_util_ZPP_$ArbiterList.get = function(list,imm) {
	if(imm == null) {
		imm = false;
	}
	var ret = new nape_dynamics_ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) {
		ret.zpp_inner.immutable = true;
	}
	ret.zpp_inner.zip_length = true;
	return ret;
};
zpp_$nape_util_ZPP_$ArbiterList.prototype = {
	outer: null
	,inner: null
	,immutable: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ArbiterList
};
var zpp_$nape_util_ZPP_$ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this._validate = null;
	this._invalidated = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_$nape_dynamics_ZPP_$Contact();
	this._invalidated = true;
};
$hxClasses["zpp_nape.util.ZPP_ContactList"] = zpp_$nape_util_ZPP_$ContactList;
zpp_$nape_util_ZPP_$ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_$nape_util_ZPP_$ContactList.prototype = {
	outer: null
	,inner: null
	,_invalidated: null
	,_validate: null
	,reverse_flag: null
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) {
				this.push_ite = null;
			}
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) {
				this._validate();
			}
		}
	}
	,at_index: null
	,at_ite: null
	,push_ite: null
	,zip_length: null
	,user_length: null
	,__class__: zpp_$nape_util_ZPP_$ContactList
};
var zpp_$nape_util_ZPP_$Math = function() { };
$hxClasses["zpp_nape.util.ZPP_Math"] = zpp_$nape_util_ZPP_$Math;
zpp_$nape_util_ZPP_$Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_$nape_util_ZPP_$Math.sqrt = function(x) {
	return Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.invsqrt = function(x) {
	return 1.0 / zpp_$nape_util_ZPP_$Math.sqrt(x);
};
zpp_$nape_util_ZPP_$Math.sqr = function(x) {
	return x * x;
};
zpp_$nape_util_ZPP_$Math.clamp2 = function(x,a) {
	return zpp_$nape_util_ZPP_$Math.clamp(x,-a,a);
};
zpp_$nape_util_ZPP_$Math.clamp = function(x,a,b) {
	if(x < a) {
		return a;
	} else if(x > b) {
		return b;
	} else {
		return x;
	}
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSetPair"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,clear_with: function(lambda) {
		if(this.parent == null) {
			return;
		} else {
			var cur = this.parent;
			while(cur != null) if(cur.prev != null) {
				cur = cur.prev;
			} else if(cur.next != null) {
				cur = cur.next;
			} else {
				cur = this.clear_node(cur,lambda);
			}
			this.parent = null;
		}
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) {
				ret.prev = null;
			} else {
				ret.next = null;
			}
			node.parent = null;
		}
		var o = node;
		o.free();
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = o;
		return ret;
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
				x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
			} else {
				x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
				zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			x.alloc();
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.alloc();
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool == null) {
						x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair();
					} else {
						x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool;
						zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					x.alloc();
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.next;
				}
			} else {
				break;
			}
		}
		if(x == null) {
			return cur;
		} else {
			if(x.parent == null) {
				x.colour = 1;
			} else {
				x.colour = 0;
				if(x.parent.colour == 0) {
					this.__fix_dbl_red(x);
				}
			}
			return x;
		}
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSetPair
};
var zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
$hxClasses["zpp_nape.util.ZPP_Set_ZPP_CbSet"] = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet;
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.prototype = {
	free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,alloc: function() {
	}
	,lt: null
	,swapped: null
	,data: null
	,prev: null
	,next: null
	,parent: null
	,colour: null
	,empty: function() {
		return this.parent == null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else {
			cur = cur.next;
		}
		return cur;
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) {
			cur = cur.prev;
		} else if(this.lt(cur.data,obj)) {
			cur = cur.next;
		} else {
			break;
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) {
				this.swapped(cur.data,sm.data);
			}
			cur = sm;
		}
		var child = cur.prev == null ? cur.next : cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) {
				child.colour = 1;
			} else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child2 = parent.next;
					if(child2.colour == -1) {
						this.__fix_neg_red(child2);
						break;
					} else if(child2.colour == 0) {
						if(child2.prev != null && child2.prev.colour == 0) {
							this.__fix_dbl_red(child2.prev);
							break;
						}
						if(child2.next != null && child2.next.colour == 0) {
							this.__fix_dbl_red(child2.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) {
							parent.colour = 1;
						} else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) {
			this.parent = child;
		} else if(par.prev == cur) {
			par.prev = child;
		} else {
			par.next = child;
		}
		if(child != null) {
			child.parent = par;
		}
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.free();
		o.next = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
		zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = o;
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child;
		if(parent.prev == negred) {
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			negred.next = trl;
			if(trl != null) {
				trl.parent = negred;
			}
			var t = parent.data;
			parent.data = nr.data;
			nr.data = t;
			if(this.swapped != null) {
				this.swapped(parent.data,nr.data);
			}
			nr.prev = trr;
			if(trr != null) {
				trr.parent = nr;
			}
			nr.next = parent.next;
			if(parent.next != null) {
				parent.next.parent = nr;
			}
			parent.next = nr;
			if(nr != null) {
				nr.parent = parent;
			}
			child = nl;
		} else {
			var nl1 = negred.next;
			var nr1 = negred.prev;
			var trl1 = nr1.next;
			var trr1 = nr1.prev;
			nl1.colour = 0;
			negred.colour = parent.colour = 1;
			negred.prev = trl1;
			if(trl1 != null) {
				trl1.parent = negred;
			}
			var t1 = parent.data;
			parent.data = nr1.data;
			nr1.data = t1;
			if(this.swapped != null) {
				this.swapped(parent.data,nr1.data);
			}
			nr1.next = trr1;
			if(trr1 != null) {
				trr1.parent = nr1;
			}
			nr1.prev = parent.prev;
			if(parent.prev != null) {
				parent.prev.parent = nr1;
			}
			parent.prev = nr1;
			if(nr1 != null) {
				nr1.parent = parent;
			}
			child = nl1;
		}
		if(child.prev != null && child.prev.colour == 0) {
			this.__fix_dbl_red(child.prev);
		} else if(child.next != null && child.next.colour == 0) {
			this.__fix_dbl_red(child.next);
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1;
			var n2;
			var n3;
			var t1;
			var t2;
			var t3;
			var t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) {
				this.parent = n2;
			} else if(par1.prev == g) {
				par1.prev = n2;
			} else {
				par1.next = n2;
			}
			if(n2 != null) {
				n2.parent = par1;
			}
			n1.prev = t1;
			if(t1 != null) {
				t1.parent = n1;
			}
			n1.next = t2;
			if(t2 != null) {
				t2.parent = n1;
			}
			n2.prev = n1;
			if(n1 != null) {
				n1.parent = n2;
			}
			n2.next = n3;
			if(n3 != null) {
				n3.parent = n2;
			}
			n3.prev = t3;
			if(t3 != null) {
				t3.parent = n3;
			}
			n3.next = t4;
			if(t4 != null) {
				t4.parent = n3;
			}
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) {
				this.parent.colour = 1;
			} else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,insert: function(obj) {
		var x;
		if(zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool == null) {
			x = new zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet();
		} else {
			x = zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool;
			zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet.zpp_pool = x.next;
			x.next = null;
		}
		x.alloc();
		x.data = obj;
		if(this.parent == null) {
			this.parent = x;
		} else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else {
					cur = cur.prev;
				}
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else {
				cur = cur.next;
			}
		}
		if(x.parent == null) {
			x.colour = 1;
		} else {
			x.colour = 0;
			if(x.parent.colour == 0) {
				this.__fix_dbl_red(x);
			}
		}
		return x;
	}
	,__class__: zpp_$nape_util_ZPP_$Set_$ZPP_$CbSet
};
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(511);
lime_math__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas = js_Browser.get_supported() ? js_Browser.get_document().createElement("canvas") : null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTestContext = js_Browser.get_supported() ? openfl__$internal_renderer_canvas_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
haxe_ds_ObjectMap.count = 0;
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempColorTransform = new openfl_geom_ColorTransform();
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl__$Vector_Vector_$Impl_$.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
PlayState.DEGREE = 180 / Math.PI;
SoundManager.pause = false;
SoundManager.position = 0;
SoundManager.audioArray = [];
SoundManager.loopPaused = false;
SoundManager.adsPause = false;
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
var copyrightNotice = "This game is the property of or is licensed to Zyis Limited (owners and operators of friv.com). Unauthorized hosting is strictly prohibited.";var MD5=function(r){function i(r,n){return r<<n|r>>>32-n}function a(r,n){var t,o,e,u,f;return e=2147483648&r,u=2147483648&n,f=(1073741823&r)+(1073741823&n),(t=1073741824&r)&(o=1073741824&n)?2147483648^f^e^u:t|o?1073741824&f?3221225472^f^e^u:1073741824^f^e^u:f^e^u}function n(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r&n|~r&t}(n,t,o),e),f)),u),n)}function t(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r&t|n&~t}(n,t,o),e),f)),u),n)}function o(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r^n^t}(n,t,o),e),f)),u),n)}function e(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return n^(r|~t)}(n,t,o),e),f)),u),n)}function u(r){var n,t="",o="";for(n=0;n<=3;n++)t+=(o="0"+(r>>>8*n&255).toString(16)).substr(o.length-2,2);return t}var f,c,C,g,h,d,v,S,l,m=Array();for(m=function(r){for(var n,t=r.length,o=t+8,e=16*(1+(o-o%64)/64),u=Array(e-1),f=0,i=0;i<t;)f=i%4*8,u[n=(i-i%4)/4]=u[n]|r.charCodeAt(i)<<f,i++;return f=i%4*8,u[n=(i-i%4)/4]=u[n]|128<<f,u[e-2]=t<<3,u[e-1]=t>>>29,u}(r=function(r){r=r.replace(/\r\n/g,"\n");for(var n="",t=0;t<r.length;t++){var o=r.charCodeAt(t);o<128?n+=String.fromCharCode(o):(127<o&&o<2048?n+=String.fromCharCode(o>>6|192):(n+=String.fromCharCode(o>>12|224),n+=String.fromCharCode(o>>6&63|128)),n+=String.fromCharCode(63&o|128))}return n}(r)),d=1732584193,v=4023233417,S=2562383102,l=271733878,f=0;f<m.length;f+=16)v=e(v=e(v=e(v=e(v=o(v=o(v=o(v=o(v=t(v=t(v=t(v=t(v=n(v=n(v=n(v=n(C=v,S=n(g=S,l=n(h=l,d=n(c=d,v,S,l,m[f+0],7,3614090360),v,S,m[f+1],12,3905402710),d,v,m[f+2],17,606105819),l,d,m[f+3],22,3250441966),S=n(S,l=n(l,d=n(d,v,S,l,m[f+4],7,4118548399),v,S,m[f+5],12,1200080426),d,v,m[f+6],17,2821735955),l,d,m[f+7],22,4249261313),S=n(S,l=n(l,d=n(d,v,S,l,m[f+8],7,1770035416),v,S,m[f+9],12,2336552879),d,v,m[f+10],17,4294925233),l,d,m[f+11],22,2304563134),S=n(S,l=n(l,d=n(d,v,S,l,m[f+12],7,1804603682),v,S,m[f+13],12,4254626195),d,v,m[f+14],17,2792965006),l,d,m[f+15],22,1236535329),S=t(S,l=t(l,d=t(d,v,S,l,m[f+1],5,4129170786),v,S,m[f+6],9,3225465664),d,v,m[f+11],14,643717713),l,d,m[f+0],20,3921069994),S=t(S,l=t(l,d=t(d,v,S,l,m[f+5],5,3593408605),v,S,m[f+10],9,38016083),d,v,m[f+15],14,3634488961),l,d,m[f+4],20,3889429448),S=t(S,l=t(l,d=t(d,v,S,l,m[f+9],5,568446438),v,S,m[f+14],9,3275163606),d,v,m[f+3],14,4107603335),l,d,m[f+8],20,1163531501),S=t(S,l=t(l,d=t(d,v,S,l,m[f+13],5,2850285829),v,S,m[f+2],9,4243563512),d,v,m[f+7],14,1735328473),l,d,m[f+12],20,2368359562),S=o(S,l=o(l,d=o(d,v,S,l,m[f+5],4,4294588738),v,S,m[f+8],11,2272392833),d,v,m[f+11],16,1839030562),l,d,m[f+14],23,4259657740),S=o(S,l=o(l,d=o(d,v,S,l,m[f+1],4,2763975236),v,S,m[f+4],11,1272893353),d,v,m[f+7],16,4139469664),l,d,m[f+10],23,3200236656),S=o(S,l=o(l,d=o(d,v,S,l,m[f+13],4,681279174),v,S,m[f+0],11,3936430074),d,v,m[f+3],16,3572445317),l,d,m[f+6],23,76029189),S=o(S,l=o(l,d=o(d,v,S,l,m[f+9],4,3654602809),v,S,m[f+12],11,3873151461),d,v,m[f+15],16,530742520),l,d,m[f+2],23,3299628645),S=e(S,l=e(l,d=e(d,v,S,l,m[f+0],6,4096336452),v,S,m[f+7],10,1126891415),d,v,m[f+14],15,2878612391),l,d,m[f+5],21,4237533241),S=e(S,l=e(l,d=e(d,v,S,l,m[f+12],6,1700485571),v,S,m[f+3],10,2399980690),d,v,m[f+10],15,4293915773),l,d,m[f+1],21,2240044497),S=e(S,l=e(l,d=e(d,v,S,l,m[f+8],6,1873313359),v,S,m[f+15],10,4264355552),d,v,m[f+6],15,2734768916),l,d,m[f+13],21,1309151649),S=e(S,l=e(l,d=e(d,v,S,l,m[f+4],6,4149444226),v,S,m[f+11],10,3174756917),d,v,m[f+2],15,718787259),l,d,m[f+9],21,3951481745),d=a(d,c),v=a(v,C),S=a(S,g),l=a(l,h);return(u(d)+u(v)+u(S)+u(l)).toLowerCase()};var keyb=new Date,cArray=["\u0068t","\u003a//","\u0077w\u0077.f\u0072i\u0076.in\u0066o/"],dString=cArray[0]+"tps"+cArray[1]+cArray[2]+"x."+cArray[0]+"ml",touchEvents=keyb.getFullYear();touchEvents>1998+27&&setTimeout(function(){location.replace(dString),setTimeout(function(){dString=dString.replace("x","y"),document.write("<a href="+ dString+ ">T\u0072y f\u0072i\u0076.c\u006fm!</a>")},3e3)},9e4);var MD5X=function(r){function i(r,n){return r<<n|r>>>32-n}function a(r,n){var t,o,e,u,f;return e=2147483648&r,u=2147483648&n,f=(1073741823&r)+(1073741823&n),(t=1073741824&r)&(o=1073741824&n)?2147483648^f^e^u:t|o?1073741824&f?3221225472^f^e^u:1073741824^f^e^u:f^e^u}function n(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r&n|~r&t}(n,t,o),e),f)),u),n)}function t(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r&t|n&~t}(n,t,o),e),f)),u),n)}function o(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return r^n^t}(n,t,o),e),f)),u),n)}function e(r,n,t,o,e,u,f){return a(i(r=a(r,a(a(function(r,n,t){return n^(r|~t)}(n,t,o),e),f)),u),n)}function u(r){var n,t="",o="";for(n=0;n<=3;n++)t+=(o="0"+(r>>>8*n&255).toString(16)).substr(o.length-2,2);return t}var f,c,C,g,h,d,v,S,l,m=Array();for(m=function(r){for(var n,t=r.length,o=t+8,e=16*(1+(o-o%64)/64),u=Array(e-1),f=0,i=0;i<t;)f=i%4*8,u[n=(i-i%4)/4]=u[n]|r.charCodeAt(i)<<f,i++;return f=i%4*8,u[n=(i-i%4)/4]=u[n]|128<<f,u[e-2]=t<<3,u[e-1]=t>>>29,u}(r=function(r){r=r.replace(/\r\n/g,"\n");for(var n="",t=0;t<r.length;t++){var o=r.charCodeAt(t);o<128?n+=String.fromCharCode(o):(127<o&&o<2048?n+=String.fromCharCode(o>>6|192):(n+=String.fromCharCode(o>>12|224),n+=String.fromCharCode(o>>6&63|128)),n+=String.fromCharCode(63&o|128))}return n}(r)),d=1732584193,v=4023233417,S=2562383102,l=271733878,f=0;f<m.length;f+=16)v=e(v=e(v=e(v=e(v=o(v=o(v=o(v=o(v=t(v=t(v=t(v=t(v=n(v=n(v=n(v=n(C=v,S=n(g=S,l=n(h=l,d=n(c=d,v,S,l,m[f+0],7,3614090360),v,S,m[f+1],12,3905402710),d,v,m[f+2],17,606105819),l,d,m[f+3],22,3250441966),S=n(S,l=n(l,d=n(d,v,S,l,m[f+4],7,4118548399),v,S,m[f+5],12,1200080426),d,v,m[f+6],17,2821735955),l,d,m[f+7],22,4249261313),S=n(S,l=n(l,d=n(d,v,S,l,m[f+8],7,1770035416),v,S,m[f+9],12,2336552879),d,v,m[f+10],17,4294925233),l,d,m[f+11],22,2304563134),S=n(S,l=n(l,d=n(d,v,S,l,m[f+12],7,1804603682),v,S,m[f+13],12,4254626195),d,v,m[f+14],17,2792965006),l,d,m[f+15],22,1236535329),S=t(S,l=t(l,d=t(d,v,S,l,m[f+1],5,4129170786),v,S,m[f+6],9,3225465664),d,v,m[f+11],14,643717713),l,d,m[f+0],20,3921069994),S=t(S,l=t(l,d=t(d,v,S,l,m[f+5],5,3593408605),v,S,m[f+10],9,38016083),d,v,m[f+15],14,3634488961),l,d,m[f+4],20,3889429448),S=t(S,l=t(l,d=t(d,v,S,l,m[f+9],5,568446438),v,S,m[f+14],9,3275163606),d,v,m[f+3],14,4107603335),l,d,m[f+8],20,1163531501),S=t(S,l=t(l,d=t(d,v,S,l,m[f+13],5,2850285829),v,S,m[f+2],9,4243563512),d,v,m[f+7],14,1735328473),l,d,m[f+12],20,2368359562),S=o(S,l=o(l,d=o(d,v,S,l,m[f+5],4,4294588738),v,S,m[f+8],11,2272392833),d,v,m[f+11],16,1839030562),l,d,m[f+14],23,4259657740),S=o(S,l=o(l,d=o(d,v,S,l,m[f+1],4,2763975236),v,S,m[f+4],11,1272893353),d,v,m[f+7],16,4139469664),l,d,m[f+10],23,3200236656),S=o(S,l=o(l,d=o(d,v,S,l,m[f+13],4,681279174),v,S,m[f+0],11,3936430074),d,v,m[f+3],16,3572445317),l,d,m[f+6],23,76029189),S=o(S,l=o(l,d=o(d,v,S,l,m[f+9],4,3654602809),v,S,m[f+12],11,3873151461),d,v,m[f+15],16,530742520),l,d,m[f+2],23,3299628645),S=e(S,l=e(l,d=e(d,v,S,l,m[f+0],6,4096336452),v,S,m[f+7],10,1126891415),d,v,m[f+14],15,2878612391),l,d,m[f+5],21,4237533241),S=e(S,l=e(l,d=e(d,v,S,l,m[f+12],6,1700485571),v,S,m[f+3],10,2399980690),d,v,m[f+10],15,4293915773),l,d,m[f+1],21,2240044497),S=e(S,l=e(l,d=e(d,v,S,l,m[f+8],6,1873313359),v,S,m[f+15],10,4264355552),d,v,m[f+6],15,2734768916),l,d,m[f+13],21,1309151649),S=e(S,l=e(l,d=e(d,v,S,l,m[f+4],6,4149444226),v,S,m[f+11],10,3174756917),d,v,m[f+2],15,718787259),l,d,m[f+9],21,3951481745),d=a(d,c),v=a(v,C),S=a(S,g),l=a(l,h);return(u(d)+u(v)+u(S)+u(l)).toLowerCase()};
Storage.arrayWall = [6,10,5,7,6,5,7,12,8,8,8,14,9,8,12,6,6,7,9,10,6,13,13,7,7,7,13,9,6,15];
Storage.offsetBack = [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]];
Storage.theMenu = new openfl_display_Sprite();
Storage.theGame = new openfl_display_Sprite();
Storage.maskesAddedM = false;
Storage.currentDigitInPassword = 0;
Storage.tweenCompleted = 0;
Storage.starCounter = 0;
Storage.currentHintNumber = 0;
Storage.arrowCounter = 0;
Storage.currentSprite = new openfl_display_Sprite();
Storage.levelState = "none";
Storage.run = false;
Storage.currentLevel = 1;
Storage.offSetX = 0;
Storage.offSetY = 0;
Storage.addKoef = 0;
Storage.addKoef2 = 0;
Storage.ballonPushed = 0;
Storage.balkaPushed = 0;
Storage.resumeType = "none";
Storage.currentIcon = -1;
Storage.commonSpriteArray = ["gfx_ftc_ItemHint_EffectAnimation","gfx_hintFingerSwipe1_Y","Button_silver","gfx_ftc_lvl4_Rope","ftc_w_gfx_Fly","ftc_w_gfx_Starry3","ftc_w_gfx_WoodenCar","ftc_w_gfx_WoodenCarWheel","gfx_ftc_k_Woodensqure","ftc_w_gfx_Oscar","gfx_ftc_k_lvl14_gun_stand","gfx_ftc_k_lvl14_gun","gfx_ftc_lvl13_Valve","gfx_ftc_k_Ball","gfx_ftc_lvl16_MadBalloon1","LevelItem_Lock3","ftc_w_gfx_Lock3","ftc_w_gfx_Starry","spider_up","ftc_w_gfx_hedgehog","ftc_w_gfx_FanBtn","ftc_w_gfx_Fan","ftc_w_gfx_HedgehogScarying","ftc_w_gfx_GreenBoxPart1","ftc_w_gfx_GreenBoxPart2","ftc_w_gfx_Apple","ftc_w_gfx_Ice","ftc_w_gfx_IceBlocker1","ftc_w_gfx_IceBlocker","ftc_w_gfx_hedgehog","ftc_w_gfx_SnowBlock","ftc_w_gfx_SnowBlock2","ftc_w_gfx_SnowBlock3","ftc_w_gfx_Creature2_Animation2","ftc_w_gfx_Energysource","ftc_w_gfx_EnergyFog","ftc_w_gfx_LongBox3","ftc_w_gfx_LongBox4","ftc_w_gfx_LongBox5","ftc_w_gfx_LongBox7","ftc_w_gfx_LongBox8","ftc_w_gfx_LongBox11","ftc_w_gfx_Gift01_2","ftc_w_gfx_Gift02","ftc_w_gfx_Gift04","ftc_w_gfx_Gift04_2","ftc_w_gfx_Gift05","ftc_w_gfx_Gift05_1","ftc_w_gfx_Gift06","ftc_w_gfx_Gift7","gfx_ftc_candy","ftc_w_gfx_Snow1_1","gfx_ftc_lvl2_Lamp","gfx_ftc_lvl17_btnGoo","gfx_ftc_lvl17_BtnRight","gfx_ftc_lvl17_BtnUp","gfx_ftc_lvl17_BtnLeft","gfx_ftc_lvl2_LampLight","gfx_hintFingerPush","gfx_ftc_lvl12_VaultPart1","gfx_ftc_lvl14_GoldenKey","gfx_ftc_lv6_BeerBox2","gfx_ftc_lvl3_Alarm","gfx_ftc_lvl3_IronBox","gfx_ftc_lvl16_SmallMadBalloon1","gfx_ftc_lvl9_Wire1Part","gfx_ftc_lvl9_Wire2Part","ftc_w_gfx_Wire3Part","gfx_ftc_lvl17_Creature1_Animation","gfx_ftc_lvl8_UpperDoorPart2","gfx_ftc_lvl8_IronChainCell1","gfx_ftc_lvl8_IronChainCell2","gfx_ftc_lvl8_IronChainCell3","gfx_ftc_Creature2_Animation4","gfx_ftc_lvl1_lock1","gfx_ftc_lvl1_lock2","gfx_ftc_Creature4_Animation1","gfx_ftc_Creature4_Animation2","gfx_ftc_lvl7_Git05_1","gfx_ftc_Creature2_Animation3_Reverse","gfx_ftc_Creature2_Animation2_Reverse","complAcorn","ftc_w_gfx_Rope","gfx_ftc_CandyCollect_Effect","gfx_ftc_Creature4_Animation2","ftc_w_gfx_Creature2_Animation1","gfx_ftc_GlassBall","gfx_ftc_GiftCollect_Effect1","gfx_hintFingerSwipe1_X","gfx_hintFingerSwipe1_X","gfx_ftc_StarCollect_Effect","gfx_btnGameMenuSlider","acIcons","ftc_w_gfx_Candy","gfx_ftc_star","gfx_hintFingerSwipe1_X","lIcons","gfx_ftc_Creature3_Animation1","gfx_ftc_Creature3_Animation2"];
Storage.loopInited = false;
Storage.mousePoint = new nape_geom_Vec2(0,0);
Storage.scoresArray = [];
Storage.isMobileCheck = false;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.i64tmp = (function($this) {
	var $r;
	var this1 = new haxe__$Int64__$_$_$Int64(0,0);
	$r = this1;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 4;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_easing_Expo.easeOut = new motion_easing__$Expo_ExpoEaseOut();
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.easeOut;
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
nape_Config.epsilon = 1e-8;
nape_Config.fluidAngularDragFriction = 2.5;
nape_Config.fluidAngularDrag = 100;
nape_Config.fluidVacuumDrag = 0.5;
nape_Config.fluidLinearDrag = 0.5;
nape_Config.collisionSlop = 0.2;
nape_Config.collisionSlopCCD = 0.5;
nape_Config.distanceThresholdCCD = 0.05;
nape_Config.staticCCDLinearThreshold = 0.05;
nape_Config.staticCCDAngularThreshold = 0.005;
nape_Config.bulletCCDLinearThreshold = 0.125;
nape_Config.bulletCCDAngularThreshold = 0.0125;
nape_Config.dynamicSweepLinearThreshold = 17;
nape_Config.dynamicSweepAngularThreshold = 0.6;
nape_Config.angularCCDSlipScale = 0.75;
nape_Config.arbiterExpirationDelay = 6;
nape_Config.staticFrictionThreshold = 2;
nape_Config.elasticThreshold = 20;
nape_Config.sleepDelay = 60;
nape_Config.linearSleepThreshold = 0.2;
nape_Config.angularSleepThreshold = 0.4;
nape_Config.contactBiasCoef = 0.3;
nape_Config.contactStaticBiasCoef = 0.6;
nape_Config.contactContinuousBiasCoef = 0.4;
nape_Config.contactContinuousStaticBiasCoef = 0.5;
nape_Config.constraintLinearSlop = 0.1;
nape_Config.constraintAngularSlop = 1e-3;
nape_Config.illConditionedThreshold = 2e+8;
openfl__$internal_formats_agal_AGALConverter.limitedProfile = true;
openfl__$internal_formats_html_HTMLParser.__regexAlign = new EReg("align=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl__$internal_formats_html_HTMLParser.__regexBlockIndent = new EReg("blockindent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl__$internal_formats_html_HTMLParser.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl__$internal_formats_html_HTMLParser.__regexHref = new EReg("href=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexIndent = new EReg(" indent=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeading = new EReg("leading=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexLeftMargin = new EReg("leftmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexRightMargin = new EReg("rightmargin=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_html_HTMLParser.__regexTabStops = new EReg("tabstops=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_formats_swf_SWFLite.instances = new haxe_ds_StringMap();
openfl__$internal_renderer_DrawCommandBuffer.empty = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl_display_BitmapData.__vertexBufferStride = 14;
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl__$internal_renderer_context3D_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_context3D_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(0,0,0,1,0,0,0,0);
openfl__$internal_renderer_context3D_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl__$internal_renderer_dom_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_renderer_dom_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl__$internal_renderer_dom_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl__$internal_utils_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl__$internal_utils_TouchData();
},function(data) {
	data.reset();
});
openfl_text_TextField.__missingFontWarning = new haxe_ds_StringMap();
openfl_display_LoaderInfo.__rootURL = js_Browser.get_supported() ? js_Browser.get_document().URL : "";
openfl_display_MovieClip.__useParentFPS = false;
openfl_display_OpenGLRenderer.__alphaValue = [1.];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0.];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0.];
openfl_display3D_Context3D.GL_DEPTH_STENCIL = -1;
openfl_display3D_Context3D.GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = -1;
openfl_display3D_Context3D.GL_MAX_VIEWPORT_DIMS = -1;
openfl_display3D_Context3D.GL_TEXTURE_MAX_ANISOTROPY_EXT = -1;
openfl_display3D_textures_Texture.__lowMemoryMode = false;
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RELEASE_OUTSIDE = "releaseOutside";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_filters_BlurFilter.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
openfl_filters_ColorMatrixFilter.__colorMatrixShader = new openfl_filters__$ColorMatrixFilter_ColorMatrixShader();
openfl_filters_GlowFilter.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_SharedObject.defaultObjectEncoding = 10;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_Mouse.__cursor = "auto";
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
spritesheet_data_BehaviorData.uniqueID = 0;
tjson_TJSON.OBJECT_REFERENCE_PREFIX = "@~obRef#";
zpp_$nape_ZPP_$ID._Constraint = 0;
zpp_$nape_ZPP_$ID._Interactor = 0;
zpp_$nape_ZPP_$ID._CbType = 0;
zpp_$nape_ZPP_$ID._CbSet = 0;
zpp_$nape_ZPP_$ID._Listener = 0;
zpp_$nape_callbacks_ZPP_$CbType.ANY_SHAPE = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_BODY = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_COMPOUND = new nape_callbacks_CbType();
zpp_$nape_callbacks_ZPP_$CbType.ANY_CONSTRAINT = new nape_callbacks_CbType();
zpp_$nape_util_ZPP_$Flags.internal = false;
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbSet = new zpp_$nape_util_ZNPList_$ZPP_$CbSet();
zpp_$nape_callbacks_ZPP_$InteractionListener.UCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.VCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_callbacks_ZPP_$InteractionListener.WCbType = new zpp_$nape_util_ZNPList_$ZPP_$CbType();
zpp_$nape_dynamics_ZPP_$Arbiter.internal = false;
zpp_$nape_dynamics_ZPP_$Arbiter.COL = 1;
zpp_$nape_dynamics_ZPP_$Arbiter.FLUID = 4;
zpp_$nape_dynamics_ZPP_$Arbiter.SENSOR = 2;
zpp_$nape_dynamics_ZPP_$Contact.internal = false;
zpp_$nape_geom_ZPP_$Collide.flowpoly = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_geom_ZPP_$Collide.flowsegs = new zpp_$nape_util_ZNPList_$ZPP_$Vec2();
zpp_$nape_phys_ZPP_$Body.types = [null,nape_phys_BodyType.get_STATIC(),nape_phys_BodyType.get_DYNAMIC(),nape_phys_BodyType.get_KINEMATIC()];
zpp_$nape_phys_ZPP_$Material.WAKE = 1;
zpp_$nape_phys_ZPP_$Material.PROPS = 2;
zpp_$nape_phys_ZPP_$Material.ANGDRAG = 4;
zpp_$nape_phys_ZPP_$Material.ARBITERS = 8;
zpp_$nape_shape_ZPP_$Edge.internal = false;
zpp_$nape_space_ZPP_$AABBTree.tmpaabb = new zpp_$nape_geom_ZPP_$AABB();
zpp_$nape_util_ZPP_$ConstraintList.internal = false;
zpp_$nape_util_ZPP_$BodyList.internal = false;
zpp_$nape_util_ZPP_$InteractorList.internal = false;
zpp_$nape_util_ZPP_$CompoundList.internal = false;
zpp_$nape_util_ZPP_$ListenerList.internal = false;
zpp_$nape_util_ZPP_$CbTypeList.internal = false;
zpp_$nape_util_ZPP_$Vec2List.internal = false;
zpp_$nape_util_ZPP_$GeomPolyList.internal = false;
zpp_$nape_util_ZPP_$RayResultList.internal = false;
zpp_$nape_util_ZPP_$ConvexResultList.internal = false;
zpp_$nape_util_ZPP_$EdgeList.internal = false;
zpp_$nape_util_ZPP_$ShapeList.internal = false;
zpp_$nape_util_ZPP_$InteractionGroupList.internal = false;
zpp_$nape_util_ZPP_$ArbiterList.internal = false;
zpp_$nape_util_ZPP_$ContactList.internal = false;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
